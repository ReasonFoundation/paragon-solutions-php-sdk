<?php
/**
 * CardTransactionReportInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CardTransactionReportInfo Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardTransactionReportInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardTransactionReportInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reseller_key' => 'string',
        'transaction_settle_key' => 'string',
        'ip' => 'string',
        'last_update' => 'string',
        'card_info_key' => 'string',
        'transaction_card_key' => 'string',
        'total_number' => 'string',
        'payment_reference_number' => 'string',
        'date' => 'string',
        'merchant_key' => 'string',
        'username' => 'string',
        'payment_type' => 'string',
        'transaction_type' => 'string',
        'processor_id' => 'string',
        'reversal_flag' => 'string',
        'authorization_code' => 'string',
        'void_flag' => 'string',
        'settle_flag' => 'string',
        'entry_mode' => 'string',
        'authorized_amount' => 'string',
        'tip_amount' => 'string',
        'total_amount' => 'string',
        'level3_amount' => 'string',
        'cashback_amount' => 'string',
        'surcharge_amount' => 'string',
        'result' => 'string',
        'result_description' => 'string',
        'host_reference_number' => 'string',
        'avs_result_code' => 'string',
        'avs_result_message' => 'string',
        'cv_result_code' => 'string',
        'cv_result_message' => 'string',
        'card_number_masked' => 'string',
        'expiration_date' => 'string',
        'name_on_card' => 'string',
        'street' => 'string',
        'zip' => 'string',
        'customer_id' => 'string',
        'original_payment_reference_number' => 'string',
        'authorized_date' => 'string',
        'batch_id' => 'string',
        'batch_number' => 'string',
        'batch_sequence_number' => 'string',
        'currency_code' => 'string',
        'payout_currency_code' => 'string',
        'payout_currency_amount' => 'string',
        'authorization_total_amount' => 'string',
        'capture_total_amount' => 'string',
        'force_capture_total_amount' => 'string',
        'post_authorization_total_amount' => 'string',
        'refund_total_amount' => 'string',
        'sale_total_amount' => 'string',
        'repeat_sale_total_amount' => 'string',
        'authorization_count' => 'string',
        'capture_count' => 'string',
        'force_capture_count' => 'string',
        'post_authorization_count' => 'string',
        'refund_count' => 'string',
        'sale_count' => 'string',
        'repeat_sale_count' => 'string',
        'invoice_id' => 'string',
        'contract_key' => 'string',
        'contract_id' => 'string',
        'tax_amount' => 'string',
        'token_request_key' => 'string',
        'settle_date' => 'string',
        'clerk_id' => 'string',
        'tax_exempt' => 'string',
        'terminal_id' => 'string',
        'terminal_serial_number' => 'string',
        'is_deferred_authorization' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reseller_key' => null,
        'transaction_settle_key' => null,
        'ip' => null,
        'last_update' => null,
        'card_info_key' => null,
        'transaction_card_key' => null,
        'total_number' => null,
        'payment_reference_number' => null,
        'date' => null,
        'merchant_key' => null,
        'username' => null,
        'payment_type' => null,
        'transaction_type' => null,
        'processor_id' => null,
        'reversal_flag' => null,
        'authorization_code' => null,
        'void_flag' => null,
        'settle_flag' => null,
        'entry_mode' => null,
        'authorized_amount' => null,
        'tip_amount' => null,
        'total_amount' => null,
        'level3_amount' => null,
        'cashback_amount' => null,
        'surcharge_amount' => null,
        'result' => null,
        'result_description' => null,
        'host_reference_number' => null,
        'avs_result_code' => null,
        'avs_result_message' => null,
        'cv_result_code' => null,
        'cv_result_message' => null,
        'card_number_masked' => null,
        'expiration_date' => null,
        'name_on_card' => null,
        'street' => null,
        'zip' => null,
        'customer_id' => null,
        'original_payment_reference_number' => null,
        'authorized_date' => null,
        'batch_id' => null,
        'batch_number' => null,
        'batch_sequence_number' => null,
        'currency_code' => null,
        'payout_currency_code' => null,
        'payout_currency_amount' => null,
        'authorization_total_amount' => null,
        'capture_total_amount' => null,
        'force_capture_total_amount' => null,
        'post_authorization_total_amount' => null,
        'refund_total_amount' => null,
        'sale_total_amount' => null,
        'repeat_sale_total_amount' => null,
        'authorization_count' => null,
        'capture_count' => null,
        'force_capture_count' => null,
        'post_authorization_count' => null,
        'refund_count' => null,
        'sale_count' => null,
        'repeat_sale_count' => null,
        'invoice_id' => null,
        'contract_key' => null,
        'contract_id' => null,
        'tax_amount' => null,
        'token_request_key' => null,
        'settle_date' => null,
        'clerk_id' => null,
        'tax_exempt' => null,
        'terminal_id' => null,
        'terminal_serial_number' => null,
        'is_deferred_authorization' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reseller_key' => 'reseller_key',
        'transaction_settle_key' => 'transaction_settle_key',
        'ip' => 'ip',
        'last_update' => 'last_update',
        'card_info_key' => 'card_info_key',
        'transaction_card_key' => 'transaction_card_key',
        'total_number' => 'total_number',
        'payment_reference_number' => 'payment_reference_number',
        'date' => 'date',
        'merchant_key' => 'merchant_key',
        'username' => 'username',
        'payment_type' => 'payment_type',
        'transaction_type' => 'transaction_type',
        'processor_id' => 'processor_id',
        'reversal_flag' => 'reversal_flag',
        'authorization_code' => 'authorization_code',
        'void_flag' => 'void_flag',
        'settle_flag' => 'settle_flag',
        'entry_mode' => 'entry_mode',
        'authorized_amount' => 'authorized_amount',
        'tip_amount' => 'tip_amount',
        'total_amount' => 'total_amount',
        'level3_amount' => 'level3_amount',
        'cashback_amount' => 'cashback_amount',
        'surcharge_amount' => 'surcharge_amount',
        'result' => 'result',
        'result_description' => 'result_description',
        'host_reference_number' => 'host_reference_number',
        'avs_result_code' => 'avs_result_code',
        'avs_result_message' => 'avs_result_message',
        'cv_result_code' => 'cv_result_code',
        'cv_result_message' => 'cv_result_message',
        'card_number_masked' => 'card_number_masked',
        'expiration_date' => 'expiration_date',
        'name_on_card' => 'name_on_card',
        'street' => 'street',
        'zip' => 'zip',
        'customer_id' => 'customer_id',
        'original_payment_reference_number' => 'original_payment_reference_number',
        'authorized_date' => 'authorized_date',
        'batch_id' => 'batch_id',
        'batch_number' => 'batch_number',
        'batch_sequence_number' => 'batch_sequence_number',
        'currency_code' => 'currency_code',
        'payout_currency_code' => 'payout_currency_code',
        'payout_currency_amount' => 'payout_currency_amount',
        'authorization_total_amount' => 'authorization_total_amount',
        'capture_total_amount' => 'capture_total_amount',
        'force_capture_total_amount' => 'force_capture_total_amount',
        'post_authorization_total_amount' => 'post_authorization_total_amount',
        'refund_total_amount' => 'refund_total_amount',
        'sale_total_amount' => 'sale_total_amount',
        'repeat_sale_total_amount' => 'repeat_sale_total_amount',
        'authorization_count' => 'authorization_count',
        'capture_count' => 'capture_count',
        'force_capture_count' => 'force_capture_count',
        'post_authorization_count' => 'post_authorization_count',
        'refund_count' => 'refund_count',
        'sale_count' => 'sale_count',
        'repeat_sale_count' => 'repeat_sale_count',
        'invoice_id' => 'invoice_id',
        'contract_key' => 'contract_key',
        'contract_id' => 'contract_id',
        'tax_amount' => 'tax_amount',
        'token_request_key' => 'token_request_key',
        'settle_date' => 'settle_date',
        'clerk_id' => 'clerk_id',
        'tax_exempt' => 'tax_exempt',
        'terminal_id' => 'terminal_id',
        'terminal_serial_number' => 'terminal_serial_number',
        'is_deferred_authorization' => 'is_deferred_authorization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reseller_key' => 'setResellerKey',
        'transaction_settle_key' => 'setTransactionSettleKey',
        'ip' => 'setIp',
        'last_update' => 'setLastUpdate',
        'card_info_key' => 'setCardInfoKey',
        'transaction_card_key' => 'setTransactionCardKey',
        'total_number' => 'setTotalNumber',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'date' => 'setDate',
        'merchant_key' => 'setMerchantKey',
        'username' => 'setUsername',
        'payment_type' => 'setPaymentType',
        'transaction_type' => 'setTransactionType',
        'processor_id' => 'setProcessorId',
        'reversal_flag' => 'setReversalFlag',
        'authorization_code' => 'setAuthorizationCode',
        'void_flag' => 'setVoidFlag',
        'settle_flag' => 'setSettleFlag',
        'entry_mode' => 'setEntryMode',
        'authorized_amount' => 'setAuthorizedAmount',
        'tip_amount' => 'setTipAmount',
        'total_amount' => 'setTotalAmount',
        'level3_amount' => 'setLevel3Amount',
        'cashback_amount' => 'setCashbackAmount',
        'surcharge_amount' => 'setSurchargeAmount',
        'result' => 'setResult',
        'result_description' => 'setResultDescription',
        'host_reference_number' => 'setHostReferenceNumber',
        'avs_result_code' => 'setAvsResultCode',
        'avs_result_message' => 'setAvsResultMessage',
        'cv_result_code' => 'setCvResultCode',
        'cv_result_message' => 'setCvResultMessage',
        'card_number_masked' => 'setCardNumberMasked',
        'expiration_date' => 'setExpirationDate',
        'name_on_card' => 'setNameOnCard',
        'street' => 'setStreet',
        'zip' => 'setZip',
        'customer_id' => 'setCustomerId',
        'original_payment_reference_number' => 'setOriginalPaymentReferenceNumber',
        'authorized_date' => 'setAuthorizedDate',
        'batch_id' => 'setBatchId',
        'batch_number' => 'setBatchNumber',
        'batch_sequence_number' => 'setBatchSequenceNumber',
        'currency_code' => 'setCurrencyCode',
        'payout_currency_code' => 'setPayoutCurrencyCode',
        'payout_currency_amount' => 'setPayoutCurrencyAmount',
        'authorization_total_amount' => 'setAuthorizationTotalAmount',
        'capture_total_amount' => 'setCaptureTotalAmount',
        'force_capture_total_amount' => 'setForceCaptureTotalAmount',
        'post_authorization_total_amount' => 'setPostAuthorizationTotalAmount',
        'refund_total_amount' => 'setRefundTotalAmount',
        'sale_total_amount' => 'setSaleTotalAmount',
        'repeat_sale_total_amount' => 'setRepeatSaleTotalAmount',
        'authorization_count' => 'setAuthorizationCount',
        'capture_count' => 'setCaptureCount',
        'force_capture_count' => 'setForceCaptureCount',
        'post_authorization_count' => 'setPostAuthorizationCount',
        'refund_count' => 'setRefundCount',
        'sale_count' => 'setSaleCount',
        'repeat_sale_count' => 'setRepeatSaleCount',
        'invoice_id' => 'setInvoiceId',
        'contract_key' => 'setContractKey',
        'contract_id' => 'setContractId',
        'tax_amount' => 'setTaxAmount',
        'token_request_key' => 'setTokenRequestKey',
        'settle_date' => 'setSettleDate',
        'clerk_id' => 'setClerkId',
        'tax_exempt' => 'setTaxExempt',
        'terminal_id' => 'setTerminalId',
        'terminal_serial_number' => 'setTerminalSerialNumber',
        'is_deferred_authorization' => 'setIsDeferredAuthorization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reseller_key' => 'getResellerKey',
        'transaction_settle_key' => 'getTransactionSettleKey',
        'ip' => 'getIp',
        'last_update' => 'getLastUpdate',
        'card_info_key' => 'getCardInfoKey',
        'transaction_card_key' => 'getTransactionCardKey',
        'total_number' => 'getTotalNumber',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'date' => 'getDate',
        'merchant_key' => 'getMerchantKey',
        'username' => 'getUsername',
        'payment_type' => 'getPaymentType',
        'transaction_type' => 'getTransactionType',
        'processor_id' => 'getProcessorId',
        'reversal_flag' => 'getReversalFlag',
        'authorization_code' => 'getAuthorizationCode',
        'void_flag' => 'getVoidFlag',
        'settle_flag' => 'getSettleFlag',
        'entry_mode' => 'getEntryMode',
        'authorized_amount' => 'getAuthorizedAmount',
        'tip_amount' => 'getTipAmount',
        'total_amount' => 'getTotalAmount',
        'level3_amount' => 'getLevel3Amount',
        'cashback_amount' => 'getCashbackAmount',
        'surcharge_amount' => 'getSurchargeAmount',
        'result' => 'getResult',
        'result_description' => 'getResultDescription',
        'host_reference_number' => 'getHostReferenceNumber',
        'avs_result_code' => 'getAvsResultCode',
        'avs_result_message' => 'getAvsResultMessage',
        'cv_result_code' => 'getCvResultCode',
        'cv_result_message' => 'getCvResultMessage',
        'card_number_masked' => 'getCardNumberMasked',
        'expiration_date' => 'getExpirationDate',
        'name_on_card' => 'getNameOnCard',
        'street' => 'getStreet',
        'zip' => 'getZip',
        'customer_id' => 'getCustomerId',
        'original_payment_reference_number' => 'getOriginalPaymentReferenceNumber',
        'authorized_date' => 'getAuthorizedDate',
        'batch_id' => 'getBatchId',
        'batch_number' => 'getBatchNumber',
        'batch_sequence_number' => 'getBatchSequenceNumber',
        'currency_code' => 'getCurrencyCode',
        'payout_currency_code' => 'getPayoutCurrencyCode',
        'payout_currency_amount' => 'getPayoutCurrencyAmount',
        'authorization_total_amount' => 'getAuthorizationTotalAmount',
        'capture_total_amount' => 'getCaptureTotalAmount',
        'force_capture_total_amount' => 'getForceCaptureTotalAmount',
        'post_authorization_total_amount' => 'getPostAuthorizationTotalAmount',
        'refund_total_amount' => 'getRefundTotalAmount',
        'sale_total_amount' => 'getSaleTotalAmount',
        'repeat_sale_total_amount' => 'getRepeatSaleTotalAmount',
        'authorization_count' => 'getAuthorizationCount',
        'capture_count' => 'getCaptureCount',
        'force_capture_count' => 'getForceCaptureCount',
        'post_authorization_count' => 'getPostAuthorizationCount',
        'refund_count' => 'getRefundCount',
        'sale_count' => 'getSaleCount',
        'repeat_sale_count' => 'getRepeatSaleCount',
        'invoice_id' => 'getInvoiceId',
        'contract_key' => 'getContractKey',
        'contract_id' => 'getContractId',
        'tax_amount' => 'getTaxAmount',
        'token_request_key' => 'getTokenRequestKey',
        'settle_date' => 'getSettleDate',
        'clerk_id' => 'getClerkId',
        'tax_exempt' => 'getTaxExempt',
        'terminal_id' => 'getTerminalId',
        'terminal_serial_number' => 'getTerminalSerialNumber',
        'is_deferred_authorization' => 'getIsDeferredAuthorization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reseller_key'] = $data['reseller_key'] ?? null;
        $this->container['transaction_settle_key'] = $data['transaction_settle_key'] ?? null;
        $this->container['ip'] = $data['ip'] ?? null;
        $this->container['last_update'] = $data['last_update'] ?? null;
        $this->container['card_info_key'] = $data['card_info_key'] ?? null;
        $this->container['transaction_card_key'] = $data['transaction_card_key'] ?? null;
        $this->container['total_number'] = $data['total_number'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['merchant_key'] = $data['merchant_key'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['payment_type'] = $data['payment_type'] ?? null;
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['processor_id'] = $data['processor_id'] ?? null;
        $this->container['reversal_flag'] = $data['reversal_flag'] ?? null;
        $this->container['authorization_code'] = $data['authorization_code'] ?? null;
        $this->container['void_flag'] = $data['void_flag'] ?? null;
        $this->container['settle_flag'] = $data['settle_flag'] ?? null;
        $this->container['entry_mode'] = $data['entry_mode'] ?? null;
        $this->container['authorized_amount'] = $data['authorized_amount'] ?? null;
        $this->container['tip_amount'] = $data['tip_amount'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['level3_amount'] = $data['level3_amount'] ?? null;
        $this->container['cashback_amount'] = $data['cashback_amount'] ?? null;
        $this->container['surcharge_amount'] = $data['surcharge_amount'] ?? null;
        $this->container['result'] = $data['result'] ?? null;
        $this->container['result_description'] = $data['result_description'] ?? null;
        $this->container['host_reference_number'] = $data['host_reference_number'] ?? null;
        $this->container['avs_result_code'] = $data['avs_result_code'] ?? null;
        $this->container['avs_result_message'] = $data['avs_result_message'] ?? null;
        $this->container['cv_result_code'] = $data['cv_result_code'] ?? null;
        $this->container['cv_result_message'] = $data['cv_result_message'] ?? null;
        $this->container['card_number_masked'] = $data['card_number_masked'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['name_on_card'] = $data['name_on_card'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['original_payment_reference_number'] = $data['original_payment_reference_number'] ?? null;
        $this->container['authorized_date'] = $data['authorized_date'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['batch_number'] = $data['batch_number'] ?? null;
        $this->container['batch_sequence_number'] = $data['batch_sequence_number'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['payout_currency_code'] = $data['payout_currency_code'] ?? null;
        $this->container['payout_currency_amount'] = $data['payout_currency_amount'] ?? null;
        $this->container['authorization_total_amount'] = $data['authorization_total_amount'] ?? null;
        $this->container['capture_total_amount'] = $data['capture_total_amount'] ?? null;
        $this->container['force_capture_total_amount'] = $data['force_capture_total_amount'] ?? null;
        $this->container['post_authorization_total_amount'] = $data['post_authorization_total_amount'] ?? null;
        $this->container['refund_total_amount'] = $data['refund_total_amount'] ?? null;
        $this->container['sale_total_amount'] = $data['sale_total_amount'] ?? null;
        $this->container['repeat_sale_total_amount'] = $data['repeat_sale_total_amount'] ?? null;
        $this->container['authorization_count'] = $data['authorization_count'] ?? null;
        $this->container['capture_count'] = $data['capture_count'] ?? null;
        $this->container['force_capture_count'] = $data['force_capture_count'] ?? null;
        $this->container['post_authorization_count'] = $data['post_authorization_count'] ?? null;
        $this->container['refund_count'] = $data['refund_count'] ?? null;
        $this->container['sale_count'] = $data['sale_count'] ?? null;
        $this->container['repeat_sale_count'] = $data['repeat_sale_count'] ?? null;
        $this->container['invoice_id'] = $data['invoice_id'] ?? null;
        $this->container['contract_key'] = $data['contract_key'] ?? null;
        $this->container['contract_id'] = $data['contract_id'] ?? null;
        $this->container['tax_amount'] = $data['tax_amount'] ?? null;
        $this->container['token_request_key'] = $data['token_request_key'] ?? null;
        $this->container['settle_date'] = $data['settle_date'] ?? null;
        $this->container['clerk_id'] = $data['clerk_id'] ?? null;
        $this->container['tax_exempt'] = $data['tax_exempt'] ?? null;
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['terminal_serial_number'] = $data['terminal_serial_number'] ?? null;
        $this->container['is_deferred_authorization'] = $data['is_deferred_authorization'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reseller_key
     *
     * @return string|null
     */
    public function getResellerKey()
    {
        return $this->container['reseller_key'];
    }

    /**
     * Sets reseller_key
     *
     * @param string|null $reseller_key Unique identifier for Paragon platform reseller.
     *
     * @return self
     */
    public function setResellerKey($reseller_key)
    {
        $this->container['reseller_key'] = $reseller_key;

        return $this;
    }

    /**
     * Gets transaction_settle_key
     *
     * @return string|null
     */
    public function getTransactionSettleKey()
    {
        return $this->container['transaction_settle_key'];
    }

    /**
     * Sets transaction_settle_key
     *
     * @param string|null $transaction_settle_key transaction_settle_key
     *
     * @return self
     */
    public function setTransactionSettleKey($transaction_settle_key)
    {
        $this->container['transaction_settle_key'] = $transaction_settle_key;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string|null $last_update last_update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets card_info_key
     *
     * @return string|null
     */
    public function getCardInfoKey()
    {
        return $this->container['card_info_key'];
    }

    /**
     * Sets card_info_key
     *
     * @param string|null $card_info_key Unique identifier assigned by Paragon platform to card used to process transaction.
     *
     * @return self
     */
    public function setCardInfoKey($card_info_key)
    {
        $this->container['card_info_key'] = $card_info_key;

        return $this;
    }

    /**
     * Gets transaction_card_key
     *
     * @return string|null
     */
    public function getTransactionCardKey()
    {
        return $this->container['transaction_card_key'];
    }

    /**
     * Sets transaction_card_key
     *
     * @param string|null $transaction_card_key transaction_card_key
     *
     * @return self
     */
    public function setTransactionCardKey($transaction_card_key)
    {
        $this->container['transaction_card_key'] = $transaction_card_key;

        return $this;
    }

    /**
     * Gets total_number
     *
     * @return string|null
     */
    public function getTotalNumber()
    {
        return $this->container['total_number'];
    }

    /**
     * Sets total_number
     *
     * @param string|null $total_number total_number
     *
     * @return self
     */
    public function setTotalNumber($total_number)
    {
        $this->container['total_number'] = $total_number;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Unique identifier of a transaction, assigned by Paragon platform.   Required for TransType = Force; Return; Reversal; Void; Capture;  Optional for TransType = Auth; Sale; RepeatSale; CaptureAll.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date and time on which transaction processed by Paragon platform
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets merchant_key
     *
     * @return string|null
     */
    public function getMerchantKey()
    {
        return $this->container['merchant_key'];
    }

    /**
     * Sets merchant_key
     *
     * @param string|null $merchant_key User name assigned in Paragon platform. The account must be granted a sufficient level of security access in order to invoke the operation.
     *
     * @return self
     */
    public function setMerchantKey($merchant_key)
    {
        $this->container['merchant_key'] = $merchant_key;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Paragon platform User Name used when transaction processed.
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type Payment type of cards
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Transaction Type(s) to include from list of settled transactions(commaseparated list of single-quoted strings).  Valid values are Auth, Sale, Force, RepeatSale, Return, Reversal, Void, Capture and CaptureAll  This field is Mandatory
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets processor_id
     *
     * @return string|null
     */
    public function getProcessorId()
    {
        return $this->container['processor_id'];
    }

    /**
     * Sets processor_id
     *
     * @param string|null $processor_id Identifier used by Paragon platform to reference payment processor.
     *
     * @return self
     */
    public function setProcessorId($processor_id)
    {
        $this->container['processor_id'] = $processor_id;

        return $this;
    }

    /**
     * Gets reversal_flag
     *
     * @return string|null
     */
    public function getReversalFlag()
    {
        return $this->container['reversal_flag'];
    }

    /**
     * Sets reversal_flag
     *
     * @param string|null $reversal_flag Reversal transaction indicator. Value of 1 means it is while 0 means it is not.
     *
     * @return self
     */
    public function setReversalFlag($reversal_flag)
    {
        $this->container['reversal_flag'] = $reversal_flag;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Authorization/approval code assigned to original transaction by processor.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets void_flag
     *
     * @return string|null
     */
    public function getVoidFlag()
    {
        return $this->container['void_flag'];
    }

    /**
     * Sets void_flag
     *
     * @param string|null $void_flag Void transaction indicator.
     *
     * @return self
     */
    public function setVoidFlag($void_flag)
    {
        $this->container['void_flag'] = $void_flag;

        return $this;
    }

    /**
     * Gets settle_flag
     *
     * @return string|null
     */
    public function getSettleFlag()
    {
        return $this->container['settle_flag'];
    }

    /**
     * Sets settle_flag
     *
     * @param string|null $settle_flag Include settled (1) or unsettled (0)transactions in list of transactions.
     *
     * @return self
     */
    public function setSettleFlag($settle_flag)
    {
        $this->container['settle_flag'] = $settle_flag;

        return $this;
    }

    /**
     * Gets entry_mode
     *
     * @return string|null
     */
    public function getEntryMode()
    {
        return $this->container['entry_mode'];
    }

    /**
     * Sets entry_mode
     *
     * @param string|null $entry_mode Indicate how merchant obtained values from credit card
     *
     * @return self
     */
    public function setEntryMode($entry_mode)
    {
        $this->container['entry_mode'] = $entry_mode;

        return $this;
    }

    /**
     * Gets authorized_amount
     *
     * @return string|null
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorized_amount'];
    }

    /**
     * Sets authorized_amount
     *
     * @param string|null $authorized_amount Authorized amount for a card transaction.
     *
     * @return self
     */
    public function setAuthorizedAmount($authorized_amount)
    {
        $this->container['authorized_amount'] = $authorized_amount;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return string|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param string|null $tip_amount Tip amount for a processed transaction.
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string|null $total_amount Total amount for a processed transaction.
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets level3_amount
     *
     * @return string|null
     */
    public function getLevel3Amount()
    {
        return $this->container['level3_amount'];
    }

    /**
     * Sets level3_amount
     *
     * @param string|null $level3_amount Level 3 amount for a processed transaction.
     *
     * @return self
     */
    public function setLevel3Amount($level3_amount)
    {
        $this->container['level3_amount'] = $level3_amount;

        return $this;
    }

    /**
     * Gets cashback_amount
     *
     * @return string|null
     */
    public function getCashbackAmount()
    {
        return $this->container['cashback_amount'];
    }

    /**
     * Sets cashback_amount
     *
     * @param string|null $cashback_amount Cash back amount for a processed transaction.
     *
     * @return self
     */
    public function setCashbackAmount($cashback_amount)
    {
        $this->container['cashback_amount'] = $cashback_amount;

        return $this;
    }

    /**
     * Gets surcharge_amount
     *
     * @return string|null
     */
    public function getSurchargeAmount()
    {
        return $this->container['surcharge_amount'];
    }

    /**
     * Sets surcharge_amount
     *
     * @param string|null $surcharge_amount Surcharge amount for a processed transaction.
     *
     * @return self
     */
    public function setSurchargeAmount($surcharge_amount)
    {
        $this->container['surcharge_amount'] = $surcharge_amount;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Result code returned by Paragon platform for processed transaction.
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_description
     *
     * @return string|null
     */
    public function getResultDescription()
    {
        return $this->container['result_description'];
    }

    /**
     * Sets result_description
     *
     * @param string|null $result_description Result message returned by Paragon platform for check transaction.
     *
     * @return self
     */
    public function setResultDescription($result_description)
    {
        $this->container['result_description'] = $result_description;

        return $this;
    }

    /**
     * Gets host_reference_number
     *
     * @return string|null
     */
    public function getHostReferenceNumber()
    {
        return $this->container['host_reference_number'];
    }

    /**
     * Sets host_reference_number
     *
     * @param string|null $host_reference_number Unique identifier for transaction (assigned by payment processor).
     *
     * @return self
     */
    public function setHostReferenceNumber($host_reference_number)
    {
        $this->container['host_reference_number'] = $host_reference_number;

        return $this;
    }

    /**
     * Gets avs_result_code
     *
     * @return string|null
     */
    public function getAvsResultCode()
    {
        return $this->container['avs_result_code'];
    }

    /**
     * Sets avs_result_code
     *
     * @param string|null $avs_result_code Response code returned from Address Verification Service for card used to process transaction.
     *
     * @return self
     */
    public function setAvsResultCode($avs_result_code)
    {
        $this->container['avs_result_code'] = $avs_result_code;

        return $this;
    }

    /**
     * Gets avs_result_message
     *
     * @return string|null
     */
    public function getAvsResultMessage()
    {
        return $this->container['avs_result_message'];
    }

    /**
     * Sets avs_result_message
     *
     * @param string|null $avs_result_message Response text returned from Address Verification Service for card used to process transaction.
     *
     * @return self
     */
    public function setAvsResultMessage($avs_result_message)
    {
        $this->container['avs_result_message'] = $avs_result_message;

        return $this;
    }

    /**
     * Gets cv_result_code
     *
     * @return string|null
     */
    public function getCvResultCode()
    {
        return $this->container['cv_result_code'];
    }

    /**
     * Sets cv_result_code
     *
     * @param string|null $cv_result_code Response code returned by Card Validation (from payment processor).
     *
     * @return self
     */
    public function setCvResultCode($cv_result_code)
    {
        $this->container['cv_result_code'] = $cv_result_code;

        return $this;
    }

    /**
     * Gets cv_result_message
     *
     * @return string|null
     */
    public function getCvResultMessage()
    {
        return $this->container['cv_result_message'];
    }

    /**
     * Sets cv_result_message
     *
     * @param string|null $cv_result_message Response text returned by Card Validation (from payment processor).
     *
     * @return self
     */
    public function setCvResultMessage($cv_result_message)
    {
        $this->container['cv_result_message'] = $cv_result_message;

        return $this;
    }

    /**
     * Gets card_number_masked
     *
     * @return string|null
     */
    public function getCardNumberMasked()
    {
        return $this->container['card_number_masked'];
    }

    /**
     * Sets card_number_masked
     *
     * @param string|null $card_number_masked Card number masked
     *
     * @return self
     */
    public function setCardNumberMasked($card_number_masked)
    {
        $this->container['card_number_masked'] = $card_number_masked;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Card expiration date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Name of card holder.
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Billing street address for credit card.
     *
     * @return self
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip State abbreviation for card with which transaction processed.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Identifier for a customer assigned by Merchant.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets original_payment_reference_number
     *
     * @return string|null
     */
    public function getOriginalPaymentReferenceNumber()
    {
        return $this->container['original_payment_reference_number'];
    }

    /**
     * Sets original_payment_reference_number
     *
     * @param string|null $original_payment_reference_number Identifier of original transaction (with which transaction is associated).
     *
     * @return self
     */
    public function setOriginalPaymentReferenceNumber($original_payment_reference_number)
    {
        $this->container['original_payment_reference_number'] = $original_payment_reference_number;

        return $this;
    }

    /**
     * Gets authorized_date
     *
     * @return string|null
     */
    public function getAuthorizedDate()
    {
        return $this->container['authorized_date'];
    }

    /**
     * Sets authorized_date
     *
     * @param string|null $authorized_date Date of Authorization
     *
     * @return self
     */
    public function setAuthorizedDate($authorized_date)
    {
        $this->container['authorized_date'] = $authorized_date;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string|null $batch_id Batch number for the transaction created by the gateway.
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number Batch number for  the transaction (returned by the payment processor).
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets batch_sequence_number
     *
     * @return string|null
     */
    public function getBatchSequenceNumber()
    {
        return $this->container['batch_sequence_number'];
    }

    /**
     * Sets batch_sequence_number
     *
     * @param string|null $batch_sequence_number A sequential batch number created by the gateway for the transaction.
     *
     * @return self
     */
    public function setBatchSequenceNumber($batch_sequence_number)
    {
        $this->container['batch_sequence_number'] = $batch_sequence_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code for specified transaction
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payout_currency_code
     *
     * @return string|null
     */
    public function getPayoutCurrencyCode()
    {
        return $this->container['payout_currency_code'];
    }

    /**
     * Sets payout_currency_code
     *
     * @param string|null $payout_currency_code Currency code payout
     *
     * @return self
     */
    public function setPayoutCurrencyCode($payout_currency_code)
    {
        $this->container['payout_currency_code'] = $payout_currency_code;

        return $this;
    }

    /**
     * Gets payout_currency_amount
     *
     * @return string|null
     */
    public function getPayoutCurrencyAmount()
    {
        return $this->container['payout_currency_amount'];
    }

    /**
     * Sets payout_currency_amount
     *
     * @param string|null $payout_currency_amount Amount to be payed out after exchange rates
     *
     * @return self
     */
    public function setPayoutCurrencyAmount($payout_currency_amount)
    {
        $this->container['payout_currency_amount'] = $payout_currency_amount;

        return $this;
    }

    /**
     * Gets authorization_total_amount
     *
     * @return string|null
     */
    public function getAuthorizationTotalAmount()
    {
        return $this->container['authorization_total_amount'];
    }

    /**
     * Sets authorization_total_amount
     *
     * @param string|null $authorization_total_amount Total Authorization amount
     *
     * @return self
     */
    public function setAuthorizationTotalAmount($authorization_total_amount)
    {
        $this->container['authorization_total_amount'] = $authorization_total_amount;

        return $this;
    }

    /**
     * Gets capture_total_amount
     *
     * @return string|null
     */
    public function getCaptureTotalAmount()
    {
        return $this->container['capture_total_amount'];
    }

    /**
     * Sets capture_total_amount
     *
     * @param string|null $capture_total_amount Total Capture amount
     *
     * @return self
     */
    public function setCaptureTotalAmount($capture_total_amount)
    {
        $this->container['capture_total_amount'] = $capture_total_amount;

        return $this;
    }

    /**
     * Gets force_capture_total_amount
     *
     * @return string|null
     */
    public function getForceCaptureTotalAmount()
    {
        return $this->container['force_capture_total_amount'];
    }

    /**
     * Sets force_capture_total_amount
     *
     * @param string|null $force_capture_total_amount Total Force Capture amount
     *
     * @return self
     */
    public function setForceCaptureTotalAmount($force_capture_total_amount)
    {
        $this->container['force_capture_total_amount'] = $force_capture_total_amount;

        return $this;
    }

    /**
     * Gets post_authorization_total_amount
     *
     * @return string|null
     */
    public function getPostAuthorizationTotalAmount()
    {
        return $this->container['post_authorization_total_amount'];
    }

    /**
     * Sets post_authorization_total_amount
     *
     * @param string|null $post_authorization_total_amount Total Post Authorization amount
     *
     * @return self
     */
    public function setPostAuthorizationTotalAmount($post_authorization_total_amount)
    {
        $this->container['post_authorization_total_amount'] = $post_authorization_total_amount;

        return $this;
    }

    /**
     * Gets refund_total_amount
     *
     * @return string|null
     */
    public function getRefundTotalAmount()
    {
        return $this->container['refund_total_amount'];
    }

    /**
     * Sets refund_total_amount
     *
     * @param string|null $refund_total_amount Total refund amount
     *
     * @return self
     */
    public function setRefundTotalAmount($refund_total_amount)
    {
        $this->container['refund_total_amount'] = $refund_total_amount;

        return $this;
    }

    /**
     * Gets sale_total_amount
     *
     * @return string|null
     */
    public function getSaleTotalAmount()
    {
        return $this->container['sale_total_amount'];
    }

    /**
     * Sets sale_total_amount
     *
     * @param string|null $sale_total_amount Total sale amount
     *
     * @return self
     */
    public function setSaleTotalAmount($sale_total_amount)
    {
        $this->container['sale_total_amount'] = $sale_total_amount;

        return $this;
    }

    /**
     * Gets repeat_sale_total_amount
     *
     * @return string|null
     */
    public function getRepeatSaleTotalAmount()
    {
        return $this->container['repeat_sale_total_amount'];
    }

    /**
     * Sets repeat_sale_total_amount
     *
     * @param string|null $repeat_sale_total_amount Total Repeat sale amount
     *
     * @return self
     */
    public function setRepeatSaleTotalAmount($repeat_sale_total_amount)
    {
        $this->container['repeat_sale_total_amount'] = $repeat_sale_total_amount;

        return $this;
    }

    /**
     * Gets authorization_count
     *
     * @return string|null
     */
    public function getAuthorizationCount()
    {
        return $this->container['authorization_count'];
    }

    /**
     * Sets authorization_count
     *
     * @param string|null $authorization_count Count of Authorized Transactions
     *
     * @return self
     */
    public function setAuthorizationCount($authorization_count)
    {
        $this->container['authorization_count'] = $authorization_count;

        return $this;
    }

    /**
     * Gets capture_count
     *
     * @return string|null
     */
    public function getCaptureCount()
    {
        return $this->container['capture_count'];
    }

    /**
     * Sets capture_count
     *
     * @param string|null $capture_count Count of Captured Transactions
     *
     * @return self
     */
    public function setCaptureCount($capture_count)
    {
        $this->container['capture_count'] = $capture_count;

        return $this;
    }

    /**
     * Gets force_capture_count
     *
     * @return string|null
     */
    public function getForceCaptureCount()
    {
        return $this->container['force_capture_count'];
    }

    /**
     * Sets force_capture_count
     *
     * @param string|null $force_capture_count Count of Force Capture Transactions
     *
     * @return self
     */
    public function setForceCaptureCount($force_capture_count)
    {
        $this->container['force_capture_count'] = $force_capture_count;

        return $this;
    }

    /**
     * Gets post_authorization_count
     *
     * @return string|null
     */
    public function getPostAuthorizationCount()
    {
        return $this->container['post_authorization_count'];
    }

    /**
     * Sets post_authorization_count
     *
     * @param string|null $post_authorization_count Count of Post Authorized Transactions
     *
     * @return self
     */
    public function setPostAuthorizationCount($post_authorization_count)
    {
        $this->container['post_authorization_count'] = $post_authorization_count;

        return $this;
    }

    /**
     * Gets refund_count
     *
     * @return string|null
     */
    public function getRefundCount()
    {
        return $this->container['refund_count'];
    }

    /**
     * Sets refund_count
     *
     * @param string|null $refund_count Count of Refunded Transactions
     *
     * @return self
     */
    public function setRefundCount($refund_count)
    {
        $this->container['refund_count'] = $refund_count;

        return $this;
    }

    /**
     * Gets sale_count
     *
     * @return string|null
     */
    public function getSaleCount()
    {
        return $this->container['sale_count'];
    }

    /**
     * Sets sale_count
     *
     * @param string|null $sale_count Count of Sale Transactions
     *
     * @return self
     */
    public function setSaleCount($sale_count)
    {
        $this->container['sale_count'] = $sale_count;

        return $this;
    }

    /**
     * Gets repeat_sale_count
     *
     * @return string|null
     */
    public function getRepeatSaleCount()
    {
        return $this->container['repeat_sale_count'];
    }

    /**
     * Sets repeat_sale_count
     *
     * @param string|null $repeat_sale_count Count of Repeat Transactions
     *
     * @return self
     */
    public function setRepeatSaleCount($repeat_sale_count)
    {
        $this->container['repeat_sale_count'] = $repeat_sale_count;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id Reference to the invoice associated by Merchant with a processed transaction.
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets contract_key
     *
     * @return string|null
     */
    public function getContractKey()
    {
        return $this->container['contract_key'];
    }

    /**
     * Sets contract_key
     *
     * @param string|null $contract_key Unique identifier assigned by Paragon platform to contract.
     *
     * @return self
     */
    public function setContractKey($contract_key)
    {
        $this->container['contract_key'] = $contract_key;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string|null $contract_id Unique identifier assigned by Merchant to the Recurring Payment Agreement between Merchant and Customer.
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return string|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param string|null $tax_amount Fee (added to Amount) to cover cost of sales tax.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets token_request_key
     *
     * @return string|null
     */
    public function getTokenRequestKey()
    {
        return $this->container['token_request_key'];
    }

    /**
     * Sets token_request_key
     *
     * @param string|null $token_request_key Original Paragon Platform token used to generate the transaction.
     *
     * @return self
     */
    public function setTokenRequestKey($token_request_key)
    {
        $this->container['token_request_key'] = $token_request_key;

        return $this;
    }

    /**
     * Gets settle_date
     *
     * @return string|null
     */
    public function getSettleDate()
    {
        return $this->container['settle_date'];
    }

    /**
     * Sets settle_date
     *
     * @param string|null $settle_date Settlement date of the transaction
     *
     * @return self
     */
    public function setSettleDate($settle_date)
    {
        $this->container['settle_date'] = $settle_date;

        return $this;
    }

    /**
     * Gets clerk_id
     *
     * @return string|null
     */
    public function getClerkId()
    {
        return $this->container['clerk_id'];
    }

    /**
     * Sets clerk_id
     *
     * @param string|null $clerk_id Clerk identifier
     *
     * @return self
     */
    public function setClerkId($clerk_id)
    {
        $this->container['clerk_id'] = $clerk_id;

        return $this;
    }

    /**
     * Gets tax_exempt
     *
     * @return string|null
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     *
     * @param string|null $tax_exempt Indicates whether purchasing card qualifies for tax-exempt status.
     *
     * @return self
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id PUREcloud Terminal ID.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets terminal_serial_number
     *
     * @return string|null
     */
    public function getTerminalSerialNumber()
    {
        return $this->container['terminal_serial_number'];
    }

    /**
     * Sets terminal_serial_number
     *
     * @param string|null $terminal_serial_number PUREcloud Terminal Serial Number.
     *
     * @return self
     */
    public function setTerminalSerialNumber($terminal_serial_number)
    {
        $this->container['terminal_serial_number'] = $terminal_serial_number;

        return $this;
    }

    /**
     * Gets is_deferred_authorization
     *
     * @return string|null
     */
    public function getIsDeferredAuthorization()
    {
        return $this->container['is_deferred_authorization'];
    }

    /**
     * Sets is_deferred_authorization
     *
     * @param string|null $is_deferred_authorization Indicates whether transaction was a deferred authorization (true or false).
     *
     * @return self
     */
    public function setIsDeferredAuthorization($is_deferred_authorization)
    {
        $this->container['is_deferred_authorization'] = $is_deferred_authorization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


