<?php
/**
 * UtilityResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * UtilityResponseModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UtilityResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UtilityResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_brand' => 'string',
        'issuing_organization' => 'string',
        'type_of_card' => 'string',
        'category_of_card' => 'string',
        'country_name' => 'string',
        'country_iso_a2_code' => 'string',
        'country_iso_a3_code' => 'string',
        'country_iso_number' => 'string',
        'issuing_organization_website' => 'string',
        'issuing_organization_phone' => 'string',
        'issued_entity' => 'string',
        'is_regulated' => 'string',
        'result' => 'string',
        'result_message' => 'string',
        'bank_identification_number' => 'string',
        'card_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_brand' => null,
        'issuing_organization' => null,
        'type_of_card' => null,
        'category_of_card' => null,
        'country_name' => null,
        'country_iso_a2_code' => null,
        'country_iso_a3_code' => null,
        'country_iso_number' => null,
        'issuing_organization_website' => null,
        'issuing_organization_phone' => null,
        'issued_entity' => null,
        'is_regulated' => null,
        'result' => null,
        'result_message' => null,
        'bank_identification_number' => null,
        'card_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_brand' => 'card_brand',
        'issuing_organization' => 'issuing_organization',
        'type_of_card' => 'type_of_card',
        'category_of_card' => 'category_of_card',
        'country_name' => 'country_name',
        'country_iso_a2_code' => 'country_iso_a2_code',
        'country_iso_a3_code' => 'country_iso_a3_code',
        'country_iso_number' => 'country_iso_number',
        'issuing_organization_website' => 'issuing_organization_website',
        'issuing_organization_phone' => 'issuing_organization_phone',
        'issued_entity' => 'issued_entity',
        'is_regulated' => 'is_regulated',
        'result' => 'result',
        'result_message' => 'result_message',
        'bank_identification_number' => 'bank_identification_number',
        'card_number' => 'card_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_brand' => 'setCardBrand',
        'issuing_organization' => 'setIssuingOrganization',
        'type_of_card' => 'setTypeOfCard',
        'category_of_card' => 'setCategoryOfCard',
        'country_name' => 'setCountryName',
        'country_iso_a2_code' => 'setCountryIsoA2Code',
        'country_iso_a3_code' => 'setCountryIsoA3Code',
        'country_iso_number' => 'setCountryIsoNumber',
        'issuing_organization_website' => 'setIssuingOrganizationWebsite',
        'issuing_organization_phone' => 'setIssuingOrganizationPhone',
        'issued_entity' => 'setIssuedEntity',
        'is_regulated' => 'setIsRegulated',
        'result' => 'setResult',
        'result_message' => 'setResultMessage',
        'bank_identification_number' => 'setBankIdentificationNumber',
        'card_number' => 'setCardNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_brand' => 'getCardBrand',
        'issuing_organization' => 'getIssuingOrganization',
        'type_of_card' => 'getTypeOfCard',
        'category_of_card' => 'getCategoryOfCard',
        'country_name' => 'getCountryName',
        'country_iso_a2_code' => 'getCountryIsoA2Code',
        'country_iso_a3_code' => 'getCountryIsoA3Code',
        'country_iso_number' => 'getCountryIsoNumber',
        'issuing_organization_website' => 'getIssuingOrganizationWebsite',
        'issuing_organization_phone' => 'getIssuingOrganizationPhone',
        'issued_entity' => 'getIssuedEntity',
        'is_regulated' => 'getIsRegulated',
        'result' => 'getResult',
        'result_message' => 'getResultMessage',
        'bank_identification_number' => 'getBankIdentificationNumber',
        'card_number' => 'getCardNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_brand'] = $data['card_brand'] ?? null;
        $this->container['issuing_organization'] = $data['issuing_organization'] ?? null;
        $this->container['type_of_card'] = $data['type_of_card'] ?? null;
        $this->container['category_of_card'] = $data['category_of_card'] ?? null;
        $this->container['country_name'] = $data['country_name'] ?? null;
        $this->container['country_iso_a2_code'] = $data['country_iso_a2_code'] ?? null;
        $this->container['country_iso_a3_code'] = $data['country_iso_a3_code'] ?? null;
        $this->container['country_iso_number'] = $data['country_iso_number'] ?? null;
        $this->container['issuing_organization_website'] = $data['issuing_organization_website'] ?? null;
        $this->container['issuing_organization_phone'] = $data['issuing_organization_phone'] ?? null;
        $this->container['issued_entity'] = $data['issued_entity'] ?? null;
        $this->container['is_regulated'] = $data['is_regulated'] ?? null;
        $this->container['result'] = $data['result'] ?? null;
        $this->container['result_message'] = $data['result_message'] ?? null;
        $this->container['bank_identification_number'] = $data['bank_identification_number'] ?? null;
        $this->container['card_number'] = $data['card_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_brand
     *
     * @return string|null
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param string|null $card_brand Card brand
     *
     * @return self
     */
    public function setCardBrand($card_brand)
    {
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets issuing_organization
     *
     * @return string|null
     */
    public function getIssuingOrganization()
    {
        return $this->container['issuing_organization'];
    }

    /**
     * Sets issuing_organization
     *
     * @param string|null $issuing_organization Card Issuing Organization
     *
     * @return self
     */
    public function setIssuingOrganization($issuing_organization)
    {
        $this->container['issuing_organization'] = $issuing_organization;

        return $this;
    }

    /**
     * Gets type_of_card
     *
     * @return string|null
     */
    public function getTypeOfCard()
    {
        return $this->container['type_of_card'];
    }

    /**
     * Sets type_of_card
     *
     * @param string|null $type_of_card Card Brand
     *
     * @return self
     */
    public function setTypeOfCard($type_of_card)
    {
        $this->container['type_of_card'] = $type_of_card;

        return $this;
    }

    /**
     * Gets category_of_card
     *
     * @return string|null
     */
    public function getCategoryOfCard()
    {
        return $this->container['category_of_card'];
    }

    /**
     * Sets category_of_card
     *
     * @param string|null $category_of_card Type of card
     *
     * @return self
     */
    public function setCategoryOfCard($category_of_card)
    {
        $this->container['category_of_card'] = $category_of_card;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name Country name
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets country_iso_a2_code
     *
     * @return string|null
     */
    public function getCountryIsoA2Code()
    {
        return $this->container['country_iso_a2_code'];
    }

    /**
     * Sets country_iso_a2_code
     *
     * @param string|null $country_iso_a2_code country iso a2 code
     *
     * @return self
     */
    public function setCountryIsoA2Code($country_iso_a2_code)
    {
        $this->container['country_iso_a2_code'] = $country_iso_a2_code;

        return $this;
    }

    /**
     * Gets country_iso_a3_code
     *
     * @return string|null
     */
    public function getCountryIsoA3Code()
    {
        return $this->container['country_iso_a3_code'];
    }

    /**
     * Sets country_iso_a3_code
     *
     * @param string|null $country_iso_a3_code ountry iso a3 code
     *
     * @return self
     */
    public function setCountryIsoA3Code($country_iso_a3_code)
    {
        $this->container['country_iso_a3_code'] = $country_iso_a3_code;

        return $this;
    }

    /**
     * Gets country_iso_number
     *
     * @return string|null
     */
    public function getCountryIsoNumber()
    {
        return $this->container['country_iso_number'];
    }

    /**
     * Sets country_iso_number
     *
     * @param string|null $country_iso_number ountry iso number
     *
     * @return self
     */
    public function setCountryIsoNumber($country_iso_number)
    {
        $this->container['country_iso_number'] = $country_iso_number;

        return $this;
    }

    /**
     * Gets issuing_organization_website
     *
     * @return string|null
     */
    public function getIssuingOrganizationWebsite()
    {
        return $this->container['issuing_organization_website'];
    }

    /**
     * Sets issuing_organization_website
     *
     * @param string|null $issuing_organization_website Card issuing organization website
     *
     * @return self
     */
    public function setIssuingOrganizationWebsite($issuing_organization_website)
    {
        $this->container['issuing_organization_website'] = $issuing_organization_website;

        return $this;
    }

    /**
     * Gets issuing_organization_phone
     *
     * @return string|null
     */
    public function getIssuingOrganizationPhone()
    {
        return $this->container['issuing_organization_phone'];
    }

    /**
     * Sets issuing_organization_phone
     *
     * @param string|null $issuing_organization_phone Card issuing organization phone number
     *
     * @return self
     */
    public function setIssuingOrganizationPhone($issuing_organization_phone)
    {
        $this->container['issuing_organization_phone'] = $issuing_organization_phone;

        return $this;
    }

    /**
     * Gets issued_entity
     *
     * @return string|null
     */
    public function getIssuedEntity()
    {
        return $this->container['issued_entity'];
    }

    /**
     * Sets issued_entity
     *
     * @param string|null $issued_entity Card issued_entity
     *
     * @return self
     */
    public function setIssuedEntity($issued_entity)
    {
        $this->container['issued_entity'] = $issued_entity;

        return $this;
    }

    /**
     * Gets is_regulated
     *
     * @return string|null
     */
    public function getIsRegulated()
    {
        return $this->container['is_regulated'];
    }

    /**
     * Sets is_regulated
     *
     * @param string|null $is_regulated Card is regulated
     *
     * @return self
     */
    public function setIsRegulated($is_regulated)
    {
        $this->container['is_regulated'] = $is_regulated;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Numeric value returned from PURE Gateway to summarize result from invoking operation
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_message
     *
     * @return string|null
     */
    public function getResultMessage()
    {
        return $this->container['result_message'];
    }

    /**
     * Sets result_message
     *
     * @param string|null $result_message Message returned from describing the sucess or failure of invoking operation
     *
     * @return self
     */
    public function setResultMessage($result_message)
    {
        $this->container['result_message'] = $result_message;

        return $this;
    }

    /**
     * Gets bank_identification_number
     *
     * @return string|null
     */
    public function getBankIdentificationNumber()
    {
        return $this->container['bank_identification_number'];
    }

    /**
     * Sets bank_identification_number
     *
     * @param string|null $bank_identification_number Bank identification number
     *
     * @return self
     */
    public function setBankIdentificationNumber($bank_identification_number)
    {
        $this->container['bank_identification_number'] = $bank_identification_number;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string|null
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string|null $card_number Card number
     *
     * @return self
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


