<?php
/**
 * HealthcareDetailsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * HealthcareDetailsModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HealthcareDetailsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HealthcareDetailsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'copay_amount' => 'string',
        'clinical_amount' => 'string',
        'dental_amount' => 'string',
        'healthcare_total_amount' => 'string',
        'over_the_counter_medical_items_amount' => 'string',
        'prescribed_medical_items_amount' => 'string',
        'vision_amount' => 'string',
        'inventory_information_approval_system_indicator' => 'string',
        'partial_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'copay_amount' => null,
        'clinical_amount' => null,
        'dental_amount' => null,
        'healthcare_total_amount' => null,
        'over_the_counter_medical_items_amount' => null,
        'prescribed_medical_items_amount' => null,
        'vision_amount' => null,
        'inventory_information_approval_system_indicator' => null,
        'partial_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'copay_amount' => 'copay_amount',
        'clinical_amount' => 'clinical_amount',
        'dental_amount' => 'dental_amount',
        'healthcare_total_amount' => 'healthcare_total_amount',
        'over_the_counter_medical_items_amount' => 'over_the_counter_medical_items_amount',
        'prescribed_medical_items_amount' => 'prescribed_medical_items_amount',
        'vision_amount' => 'vision_amount',
        'inventory_information_approval_system_indicator' => 'inventory_information_approval_system_indicator',
        'partial_indicator' => 'partial_indicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'copay_amount' => 'setCopayAmount',
        'clinical_amount' => 'setClinicalAmount',
        'dental_amount' => 'setDentalAmount',
        'healthcare_total_amount' => 'setHealthcareTotalAmount',
        'over_the_counter_medical_items_amount' => 'setOverTheCounterMedicalItemsAmount',
        'prescribed_medical_items_amount' => 'setPrescribedMedicalItemsAmount',
        'vision_amount' => 'setVisionAmount',
        'inventory_information_approval_system_indicator' => 'setInventoryInformationApprovalSystemIndicator',
        'partial_indicator' => 'setPartialIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'copay_amount' => 'getCopayAmount',
        'clinical_amount' => 'getClinicalAmount',
        'dental_amount' => 'getDentalAmount',
        'healthcare_total_amount' => 'getHealthcareTotalAmount',
        'over_the_counter_medical_items_amount' => 'getOverTheCounterMedicalItemsAmount',
        'prescribed_medical_items_amount' => 'getPrescribedMedicalItemsAmount',
        'vision_amount' => 'getVisionAmount',
        'inventory_information_approval_system_indicator' => 'getInventoryInformationApprovalSystemIndicator',
        'partial_indicator' => 'getPartialIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVENTORY_INFORMATION_APPROVAL_SYSTEM_INDICATOR_TRUE = 'true';
    public const INVENTORY_INFORMATION_APPROVAL_SYSTEM_INDICATOR_FALSE = 'false';
    public const PARTIAL_INDICATOR_TRUE = 'true';
    public const PARTIAL_INDICATOR_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInventoryInformationApprovalSystemIndicatorAllowableValues()
    {
        return [
            self::INVENTORY_INFORMATION_APPROVAL_SYSTEM_INDICATOR_TRUE,
            self::INVENTORY_INFORMATION_APPROVAL_SYSTEM_INDICATOR_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialIndicatorAllowableValues()
    {
        return [
            self::PARTIAL_INDICATOR_TRUE,
            self::PARTIAL_INDICATOR_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['copay_amount'] = $data['copay_amount'] ?? null;
        $this->container['clinical_amount'] = $data['clinical_amount'] ?? null;
        $this->container['dental_amount'] = $data['dental_amount'] ?? null;
        $this->container['healthcare_total_amount'] = $data['healthcare_total_amount'] ?? null;
        $this->container['over_the_counter_medical_items_amount'] = $data['over_the_counter_medical_items_amount'] ?? null;
        $this->container['prescribed_medical_items_amount'] = $data['prescribed_medical_items_amount'] ?? null;
        $this->container['vision_amount'] = $data['vision_amount'] ?? null;
        $this->container['inventory_information_approval_system_indicator'] = $data['inventory_information_approval_system_indicator'] ?? null;
        $this->container['partial_indicator'] = $data['partial_indicator'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInventoryInformationApprovalSystemIndicatorAllowableValues();
        if (!is_null($this->container['inventory_information_approval_system_indicator']) && !in_array($this->container['inventory_information_approval_system_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inventory_information_approval_system_indicator', must be one of '%s'",
                $this->container['inventory_information_approval_system_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartialIndicatorAllowableValues();
        if (!is_null($this->container['partial_indicator']) && !in_array($this->container['partial_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partial_indicator', must be one of '%s'",
                $this->container['partial_indicator'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets copay_amount
     *
     * @return string|null
     */
    public function getCopayAmount()
    {
        return $this->container['copay_amount'];
    }

    /**
     * Sets copay_amount
     *
     * @param string|null $copay_amount Subtotal for healthcare services (DDDD.CC) paid as part of Copay. Decimal included.
     *
     * @return self
     */
    public function setCopayAmount($copay_amount)
    {
        $this->container['copay_amount'] = $copay_amount;

        return $this;
    }

    /**
     * Gets clinical_amount
     *
     * @return string|null
     */
    public function getClinicalAmount()
    {
        return $this->container['clinical_amount'];
    }

    /**
     * Sets clinical_amount
     *
     * @param string|null $clinical_amount Subtotal for clinical services (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setClinicalAmount($clinical_amount)
    {
        $this->container['clinical_amount'] = $clinical_amount;

        return $this;
    }

    /**
     * Gets dental_amount
     *
     * @return string|null
     */
    public function getDentalAmount()
    {
        return $this->container['dental_amount'];
    }

    /**
     * Sets dental_amount
     *
     * @param string|null $dental_amount Subtotal for dental services (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setDentalAmount($dental_amount)
    {
        $this->container['dental_amount'] = $dental_amount;

        return $this;
    }

    /**
     * Gets healthcare_total_amount
     *
     * @return string|null
     */
    public function getHealthcareTotalAmount()
    {
        return $this->container['healthcare_total_amount'];
    }

    /**
     * Sets healthcare_total_amount
     *
     * @param string|null $healthcare_total_amount Total amount paid towards healthcare (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setHealthcareTotalAmount($healthcare_total_amount)
    {
        $this->container['healthcare_total_amount'] = $healthcare_total_amount;

        return $this;
    }

    /**
     * Gets over_the_counter_medical_items_amount
     *
     * @return string|null
     */
    public function getOverTheCounterMedicalItemsAmount()
    {
        return $this->container['over_the_counter_medical_items_amount'];
    }

    /**
     * Sets over_the_counter_medical_items_amount
     *
     * @param string|null $over_the_counter_medical_items_amount Subtotal for over-the-counter medical items (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setOverTheCounterMedicalItemsAmount($over_the_counter_medical_items_amount)
    {
        $this->container['over_the_counter_medical_items_amount'] = $over_the_counter_medical_items_amount;

        return $this;
    }

    /**
     * Gets prescribed_medical_items_amount
     *
     * @return string|null
     */
    public function getPrescribedMedicalItemsAmount()
    {
        return $this->container['prescribed_medical_items_amount'];
    }

    /**
     * Sets prescribed_medical_items_amount
     *
     * @param string|null $prescribed_medical_items_amount Subtotal for prescribed medical items (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setPrescribedMedicalItemsAmount($prescribed_medical_items_amount)
    {
        $this->container['prescribed_medical_items_amount'] = $prescribed_medical_items_amount;

        return $this;
    }

    /**
     * Gets vision_amount
     *
     * @return string|null
     */
    public function getVisionAmount()
    {
        return $this->container['vision_amount'];
    }

    /**
     * Sets vision_amount
     *
     * @param string|null $vision_amount Subtotal for vision services (DDDD.CC). Decimal included.
     *
     * @return self
     */
    public function setVisionAmount($vision_amount)
    {
        $this->container['vision_amount'] = $vision_amount;

        return $this;
    }

    /**
     * Gets inventory_information_approval_system_indicator
     *
     * @return string|null
     */
    public function getInventoryInformationApprovalSystemIndicator()
    {
        return $this->container['inventory_information_approval_system_indicator'];
    }

    /**
     * Sets inventory_information_approval_system_indicator
     *
     * @param string|null $inventory_information_approval_system_indicator Indication (T) received from an Inventory Information Approval System (IIAS) that credit card payment for eligible medical expense. Specific only to First Data North processor profile.
     *
     * @return self
     */
    public function setInventoryInformationApprovalSystemIndicator($inventory_information_approval_system_indicator)
    {
        $allowedValues = $this->getInventoryInformationApprovalSystemIndicatorAllowableValues();
        if (!is_null($inventory_information_approval_system_indicator) && !in_array($inventory_information_approval_system_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inventory_information_approval_system_indicator', must be one of '%s'",
                    $inventory_information_approval_system_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inventory_information_approval_system_indicator'] = $inventory_information_approval_system_indicator;

        return $this;
    }

    /**
     * Gets partial_indicator
     *
     * @return string|null
     */
    public function getPartialIndicator()
    {
        return $this->container['partial_indicator'];
    }

    /**
     * Sets partial_indicator
     *
     * @param string|null $partial_indicator Processor may (T) authorize partial amount for medical expense based on funds available. Specific only to First Data North processor profile.
     *
     * @return self
     */
    public function setPartialIndicator($partial_indicator)
    {
        $allowedValues = $this->getPartialIndicatorAllowableValues();
        if (!is_null($partial_indicator) && !in_array($partial_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partial_indicator', must be one of '%s'",
                    $partial_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_indicator'] = $partial_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


