<?php
/**
 * CreateDebitCardTransactionsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CreateDebitCardTransactionsModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDebitCardTransactionsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDebitCardTransactionsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'string',
        'card_number' => 'string',
        'expiration_date' => 'string',
        'magnetic_track_data' => 'string',
        'name_on_card' => 'string',
        'amount' => 'string',
        'invoice_number' => 'string',
        'payment_reference_number' => 'string',
        'primary_identification_number' => 'string',
        'register_number' => 'string',
        'surcharge_amount' => 'string',
        'cashback_amount' => 'string',
        'authorization_code' => 'string',
        'customer_code' => 'string',
        'force' => 'string',
        'key_serial_number' => 'string',
        'point_to_point_encryption' => '\DCarbone\ParagonSolutionsPHPSDK\Model\P2PEModel',
        'server_id' => 'string',
        'tip_amount' => 'string',
        'apple_pay_payment_data' => 'string',
        'google_pay_payment_data' => 'string',
        'card_number_last_four_digits' => 'string',
        'emv_data' => 'string',
        'entry_mode' => 'string',
        'application_id' => 'string',
        'chip_condition_code' => 'string',
        'card_present' => 'string',
        'clerk_id' => 'string',
        'transaction_id' => 'string',
        'terminal_operating_environment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'card_number' => null,
        'expiration_date' => null,
        'magnetic_track_data' => null,
        'name_on_card' => null,
        'amount' => null,
        'invoice_number' => null,
        'payment_reference_number' => null,
        'primary_identification_number' => null,
        'register_number' => null,
        'surcharge_amount' => null,
        'cashback_amount' => null,
        'authorization_code' => null,
        'customer_code' => null,
        'force' => null,
        'key_serial_number' => null,
        'point_to_point_encryption' => null,
        'server_id' => null,
        'tip_amount' => null,
        'apple_pay_payment_data' => null,
        'google_pay_payment_data' => null,
        'card_number_last_four_digits' => null,
        'emv_data' => null,
        'entry_mode' => null,
        'application_id' => null,
        'chip_condition_code' => null,
        'card_present' => null,
        'clerk_id' => null,
        'transaction_id' => null,
        'terminal_operating_environment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'card_number' => 'card_number',
        'expiration_date' => 'expiration_date',
        'magnetic_track_data' => 'magnetic_track_data',
        'name_on_card' => 'name_on_card',
        'amount' => 'amount',
        'invoice_number' => 'invoice_number',
        'payment_reference_number' => 'payment_reference_number',
        'primary_identification_number' => 'primary_identification_number',
        'register_number' => 'register_number',
        'surcharge_amount' => 'surcharge_amount',
        'cashback_amount' => 'cashback_amount',
        'authorization_code' => 'authorization_code',
        'customer_code' => 'customer_code',
        'force' => 'force',
        'key_serial_number' => 'key_serial_number',
        'point_to_point_encryption' => 'point_to_point_encryption',
        'server_id' => 'server_id',
        'tip_amount' => 'tip_amount',
        'apple_pay_payment_data' => 'apple_pay_payment_data',
        'google_pay_payment_data' => 'google_pay_payment_data',
        'card_number_last_four_digits' => 'card_number_last_four_digits',
        'emv_data' => 'emv_data',
        'entry_mode' => 'entry_mode',
        'application_id' => 'application_id',
        'chip_condition_code' => 'chip_condition_code',
        'card_present' => 'card_present',
        'clerk_id' => 'clerk_id',
        'transaction_id' => 'transaction_id',
        'terminal_operating_environment' => 'terminal_operating_environment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'card_number' => 'setCardNumber',
        'expiration_date' => 'setExpirationDate',
        'magnetic_track_data' => 'setMagneticTrackData',
        'name_on_card' => 'setNameOnCard',
        'amount' => 'setAmount',
        'invoice_number' => 'setInvoiceNumber',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'primary_identification_number' => 'setPrimaryIdentificationNumber',
        'register_number' => 'setRegisterNumber',
        'surcharge_amount' => 'setSurchargeAmount',
        'cashback_amount' => 'setCashbackAmount',
        'authorization_code' => 'setAuthorizationCode',
        'customer_code' => 'setCustomerCode',
        'force' => 'setForce',
        'key_serial_number' => 'setKeySerialNumber',
        'point_to_point_encryption' => 'setPointToPointEncryption',
        'server_id' => 'setServerId',
        'tip_amount' => 'setTipAmount',
        'apple_pay_payment_data' => 'setApplePayPaymentData',
        'google_pay_payment_data' => 'setGooglePayPaymentData',
        'card_number_last_four_digits' => 'setCardNumberLastFourDigits',
        'emv_data' => 'setEmvData',
        'entry_mode' => 'setEntryMode',
        'application_id' => 'setApplicationId',
        'chip_condition_code' => 'setChipConditionCode',
        'card_present' => 'setCardPresent',
        'clerk_id' => 'setClerkId',
        'transaction_id' => 'setTransactionId',
        'terminal_operating_environment' => 'setTerminalOperatingEnvironment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'card_number' => 'getCardNumber',
        'expiration_date' => 'getExpirationDate',
        'magnetic_track_data' => 'getMagneticTrackData',
        'name_on_card' => 'getNameOnCard',
        'amount' => 'getAmount',
        'invoice_number' => 'getInvoiceNumber',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'primary_identification_number' => 'getPrimaryIdentificationNumber',
        'register_number' => 'getRegisterNumber',
        'surcharge_amount' => 'getSurchargeAmount',
        'cashback_amount' => 'getCashbackAmount',
        'authorization_code' => 'getAuthorizationCode',
        'customer_code' => 'getCustomerCode',
        'force' => 'getForce',
        'key_serial_number' => 'getKeySerialNumber',
        'point_to_point_encryption' => 'getPointToPointEncryption',
        'server_id' => 'getServerId',
        'tip_amount' => 'getTipAmount',
        'apple_pay_payment_data' => 'getApplePayPaymentData',
        'google_pay_payment_data' => 'getGooglePayPaymentData',
        'card_number_last_four_digits' => 'getCardNumberLastFourDigits',
        'emv_data' => 'getEmvData',
        'entry_mode' => 'getEntryMode',
        'application_id' => 'getApplicationId',
        'chip_condition_code' => 'getChipConditionCode',
        'card_present' => 'getCardPresent',
        'clerk_id' => 'getClerkId',
        'transaction_id' => 'getTransactionId',
        'terminal_operating_environment' => 'getTerminalOperatingEnvironment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_AUTH = 'auth';
    public const TRANSACTION_TYPE_SALE = 'sale';
    public const TRANSACTION_TYPE_FORCE = 'force';
    public const TRANSACTION_TYPE__RETURN = 'return';
    public const TRANSACTION_TYPE_REVERSAL = 'reversal';
    public const TRANSACTION_TYPE_CAPTURE = 'capture';
    public const TRANSACTION_TYPE_CAPTUREALL = 'captureall';
    public const FORCE_TRUE = 'true';
    public const FORCE_FALSE = 'false';
    public const ENTRY_MODE_UNKNOWN = 'UNKNOWN';
    public const ENTRY_MODE_MANUAL = 'MANUAL';
    public const ENTRY_MODE_MAGNETIC_STRIPE = 'MagneticStripe';
    public const ENTRY_MODE_ICC = 'ICC';
    public const ENTRY_MODE_PROXIMITY = 'PROXIMITY';
    public const ENTRY_MODE_FALLBACK = 'FALLBACK';
    public const ENTRY_MODE_NOAIDFALLBACK = 'NOAIDFALLBACK';
    public const CARD_PRESENT_TRUE = 'TRUE';
    public const CARD_PRESENT_FALSE = 'FALSE';
    public const CARD_PRESENT_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_AUTH,
            self::TRANSACTION_TYPE_SALE,
            self::TRANSACTION_TYPE_FORCE,
            self::TRANSACTION_TYPE__RETURN,
            self::TRANSACTION_TYPE_REVERSAL,
            self::TRANSACTION_TYPE_CAPTURE,
            self::TRANSACTION_TYPE_CAPTUREALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForceAllowableValues()
    {
        return [
            self::FORCE_TRUE,
            self::FORCE_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryModeAllowableValues()
    {
        return [
            self::ENTRY_MODE_UNKNOWN,
            self::ENTRY_MODE_MANUAL,
            self::ENTRY_MODE_MAGNETIC_STRIPE,
            self::ENTRY_MODE_ICC,
            self::ENTRY_MODE_PROXIMITY,
            self::ENTRY_MODE_FALLBACK,
            self::ENTRY_MODE_NOAIDFALLBACK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardPresentAllowableValues()
    {
        return [
            self::CARD_PRESENT_TRUE,
            self::CARD_PRESENT_FALSE,
            self::CARD_PRESENT_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['card_number'] = $data['card_number'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['magnetic_track_data'] = $data['magnetic_track_data'] ?? null;
        $this->container['name_on_card'] = $data['name_on_card'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['invoice_number'] = $data['invoice_number'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['primary_identification_number'] = $data['primary_identification_number'] ?? null;
        $this->container['register_number'] = $data['register_number'] ?? null;
        $this->container['surcharge_amount'] = $data['surcharge_amount'] ?? null;
        $this->container['cashback_amount'] = $data['cashback_amount'] ?? null;
        $this->container['authorization_code'] = $data['authorization_code'] ?? null;
        $this->container['customer_code'] = $data['customer_code'] ?? null;
        $this->container['force'] = $data['force'] ?? null;
        $this->container['key_serial_number'] = $data['key_serial_number'] ?? null;
        $this->container['point_to_point_encryption'] = $data['point_to_point_encryption'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['tip_amount'] = $data['tip_amount'] ?? null;
        $this->container['apple_pay_payment_data'] = $data['apple_pay_payment_data'] ?? null;
        $this->container['google_pay_payment_data'] = $data['google_pay_payment_data'] ?? null;
        $this->container['card_number_last_four_digits'] = $data['card_number_last_four_digits'] ?? null;
        $this->container['emv_data'] = $data['emv_data'] ?? null;
        $this->container['entry_mode'] = $data['entry_mode'] ?? null;
        $this->container['application_id'] = $data['application_id'] ?? null;
        $this->container['chip_condition_code'] = $data['chip_condition_code'] ?? null;
        $this->container['card_present'] = $data['card_present'] ?? null;
        $this->container['clerk_id'] = $data['clerk_id'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['terminal_operating_environment'] = $data['terminal_operating_environment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($this->container['force']) && !in_array($this->container['force'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'force', must be one of '%s'",
                $this->container['force'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntryModeAllowableValues();
        if (!is_null($this->container['entry_mode']) && !in_array($this->container['entry_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_mode', must be one of '%s'",
                $this->container['entry_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardPresentAllowableValues();
        if (!is_null($this->container['card_present']) && !in_array($this->container['card_present'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_present', must be one of '%s'",
                $this->container['card_present'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type The type of transaction you wish to create. Valid values are Auth, Sale, Force, RepeatSale, Return, Reversal, Void, Capture and CaptureAll  This field is Mandatory
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string|null
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string|null $card_number The Primary Account Number (PAN) uniquely identifies the issuer and debit cardholder account.   Required for TransType = Sale; Return; Reversal;  Optional for TransType = Capture; CaptureAll.
     *
     * @return self
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Expiration Date (MMYY)  Required for TransType = Auth; Sale; RepeatSale; Return; Reversal;  Optional for TransType = Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets magnetic_track_data
     *
     * @return string|null
     */
    public function getMagneticTrackData()
    {
        return $this->container['magnetic_track_data'];
    }

    /**
     * Sets magnetic_track_data
     *
     * @param string|null $magnetic_track_data The data - number and expiration date - read from magnetic stripe on card.  Required when credit card presented by consumer at point of sale/service.
     *
     * @return self
     */
    public function setMagneticTrackData($magnetic_track_data)
    {
        $this->container['magnetic_track_data'] = $magnetic_track_data;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Cardholder's name as it appears on the card.
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount $0.00 &gt; Amount &lt; $1,000,000.00 (DDDDDD.CC).  Required for TransType = Auth; Sale; RepeatSale; Force; Return; Reversal;  Optional for TransType = Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Identifier assigned by the merchant to locate a specific transaction or multiple transactions (grouped by a single invoice).
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Unique identifier of a transaction, assigned by Paragon platform.   Required for TransType = Force; Return; Reversal; Void; Capture;  Optional for TransType = Auth; Sale; RepeatSale; CaptureAll.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets primary_identification_number
     *
     * @return string|null
     */
    public function getPrimaryIdentificationNumber()
    {
        return $this->container['primary_identification_number'];
    }

    /**
     * Sets primary_identification_number
     *
     * @param string|null $primary_identification_number The encrypted PIN-block returned from a secure cryptographic device, such as a PIN Pad.  Required when processor requires customer to provide Personal Identification Number.
     *
     * @return self
     */
    public function setPrimaryIdentificationNumber($primary_identification_number)
    {
        $this->container['primary_identification_number'] = $primary_identification_number;

        return $this;
    }

    /**
     * Gets register_number
     *
     * @return string|null
     */
    public function getRegisterNumber()
    {
        return $this->container['register_number'];
    }

    /**
     * Sets register_number
     *
     * @param string|null $register_number A string that uniquely identifies the register, terminal, -r computer on which-the transaction was performed.
     *
     * @return self
     */
    public function setRegisterNumber($register_number)
    {
        $this->container['register_number'] = $register_number;

        return $this;
    }

    /**
     * Gets surcharge_amount
     *
     * @return string|null
     */
    public function getSurchargeAmount()
    {
        return $this->container['surcharge_amount'];
    }

    /**
     * Sets surcharge_amount
     *
     * @param string|null $surcharge_amount The amount charged - surcharge applied - by a merchant to process a transaction with a debit card.
     *
     * @return self
     */
    public function setSurchargeAmount($surcharge_amount)
    {
        $this->container['surcharge_amount'] = $surcharge_amount;

        return $this;
    }

    /**
     * Gets cashback_amount
     *
     * @return string|null
     */
    public function getCashbackAmount()
    {
        return $this->container['cashback_amount'];
    }

    /**
     * Sets cashback_amount
     *
     * @param string|null $cashback_amount Amount added to a Sale Amount that is returned in Cash (DDDDD.CC format).
     *
     * @return self
     */
    public function setCashbackAmount($cashback_amount)
    {
        $this->container['cashback_amount'] = $cashback_amount;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Authorization/approval code assigned to original transaction by processor.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string|null
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string|null $customer_code Identifier assigned by merchant to allow payment processed by Global Payments to be traced to purchase order number.
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets force
     *
     * @return string|null
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param string|null $force Force (T) Paragon platform to accept duplicate transaction into current batch (ignored by Concord EFS processor).
     *
     * @return self
     */
    public function setForce($force)
    {
        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($force) && !in_array($force, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'force', must be one of '%s'",
                    $force,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['force'] = $force;

        return $this;
    }

    /**
     * Gets key_serial_number
     *
     * @return string|null
     */
    public function getKeySerialNumber()
    {
        return $this->container['key_serial_number'];
    }

    /**
     * Sets key_serial_number
     *
     * @param string|null $key_serial_number Serial number of PIN pad and encryption key for the transaction.  Required for online PIN debit transctions.
     *
     * @return self
     */
    public function setKeySerialNumber($key_serial_number)
    {
        $this->container['key_serial_number'] = $key_serial_number;

        return $this;
    }

    /**
     * Gets point_to_point_encryption
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\P2PEModel|null
     */
    public function getPointToPointEncryption()
    {
        return $this->container['point_to_point_encryption'];
    }

    /**
     * Sets point_to_point_encryption
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\P2PEModel|null $point_to_point_encryption point_to_point_encryption
     *
     * @return self
     */
    public function setPointToPointEncryption($point_to_point_encryption)
    {
        $this->container['point_to_point_encryption'] = $point_to_point_encryption;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id Unique identifier of Paragon platform used to process transaction.
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return string|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param string|null $tip_amount Fee (included in Amount) specified by consumer as gratuity for service performed (DDDDD.CC).
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets apple_pay_payment_data
     *
     * @return string|null
     */
    public function getApplePayPaymentData()
    {
        return $this->container['apple_pay_payment_data'];
    }

    /**
     * Sets apple_pay_payment_data
     *
     * @param string|null $apple_pay_payment_data Base64 Encoded apple pay payment data.
     *
     * @return self
     */
    public function setApplePayPaymentData($apple_pay_payment_data)
    {
        $this->container['apple_pay_payment_data'] = $apple_pay_payment_data;

        return $this;
    }

    /**
     * Gets google_pay_payment_data
     *
     * @return string|null
     */
    public function getGooglePayPaymentData()
    {
        return $this->container['google_pay_payment_data'];
    }

    /**
     * Sets google_pay_payment_data
     *
     * @param string|null $google_pay_payment_data Base64 Encoded google pay payment data.
     *
     * @return self
     */
    public function setGooglePayPaymentData($google_pay_payment_data)
    {
        $this->container['google_pay_payment_data'] = $google_pay_payment_data;

        return $this;
    }

    /**
     * Gets card_number_last_four_digits
     *
     * @return string|null
     */
    public function getCardNumberLastFourDigits()
    {
        return $this->container['card_number_last_four_digits'];
    }

    /**
     * Sets card_number_last_four_digits
     *
     * @param string|null $card_number_last_four_digits Last 4 digits of card number.
     *
     * @return self
     */
    public function setCardNumberLastFourDigits($card_number_last_four_digits)
    {
        $this->container['card_number_last_four_digits'] = $card_number_last_four_digits;

        return $this;
    }

    /**
     * Gets emv_data
     *
     * @return string|null
     */
    public function getEmvData()
    {
        return $this->container['emv_data'];
    }

    /**
     * Sets emv_data
     *
     * @param string|null $emv_data Application cryptogram generated by chip requesting issuer to confirm legitimacy of card.
     *
     * @return self
     */
    public function setEmvData($emv_data)
    {
        $this->container['emv_data'] = $emv_data;

        return $this;
    }

    /**
     * Gets entry_mode
     *
     * @return string|null
     */
    public function getEntryMode()
    {
        return $this->container['entry_mode'];
    }

    /**
     * Sets entry_mode
     *
     * @param string|null $entry_mode Indicate how merchant obtained values from credit card, as follows:   UNKNOWN; MANUAL MagneticStripe; ICC; PROXIMITY.  Required when MagData or EMVData fields are populated.
     *
     * @return self
     */
    public function setEntryMode($entry_mode)
    {
        $allowedValues = $this->getEntryModeAllowableValues();
        if (!is_null($entry_mode) && !in_array($entry_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_mode', must be one of '%s'",
                    $entry_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_mode'] = $entry_mode;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets chip_condition_code
     *
     * @return string|null
     */
    public function getChipConditionCode()
    {
        return $this->container['chip_condition_code'];
    }

    /**
     * Sets chip_condition_code
     *
     * @param string|null $chip_condition_code The condition code of magnetic stripe read transactions of EMV (chip capable) cards.
     *
     * @return self
     */
    public function setChipConditionCode($chip_condition_code)
    {
        $this->container['chip_condition_code'] = $chip_condition_code;

        return $this;
    }

    /**
     * Gets card_present
     *
     * @return string|null
     */
    public function getCardPresent()
    {
        return $this->container['card_present'];
    }

    /**
     * Sets card_present
     *
     * @param string|null $card_present Card presence indicator.
     *
     * @return self
     */
    public function setCardPresent($card_present)
    {
        $allowedValues = $this->getCardPresentAllowableValues();
        if (!is_null($card_present) && !in_array($card_present, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_present', must be one of '%s'",
                    $card_present,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_present'] = $card_present;

        return $this;
    }

    /**
     * Gets clerk_id
     *
     * @return string|null
     */
    public function getClerkId()
    {
        return $this->container['clerk_id'];
    }

    /**
     * Sets clerk_id
     *
     * @param string|null $clerk_id Clerk identifier
     *
     * @return self
     */
    public function setClerkId($clerk_id)
    {
        $this->container['clerk_id'] = $clerk_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Numeric value assigned by Merchant to identify a transaction (for use as alternative to Paragon platform-assigned PNRef).
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets terminal_operating_environment
     *
     * @return string|null
     */
    public function getTerminalOperatingEnvironment()
    {
        return $this->container['terminal_operating_environment'];
    }

    /**
     * Sets terminal_operating_environment
     *
     * @param string|null $terminal_operating_environment Indicates the terminal's location and indicates whether it is attended by the card acceptor.
     *
     * @return self
     */
    public function setTerminalOperatingEnvironment($terminal_operating_environment)
    {
        $this->container['terminal_operating_environment'] = $terminal_operating_environment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


