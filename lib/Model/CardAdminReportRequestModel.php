<?php
/**
 * CardAdminReportRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CardAdminReportRequestModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardAdminReportRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardAdminReportRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => 'string',
        'end_date' => 'string',
        'card_type' => 'string',
        'contract_key' => 'string',
        'customer_key' => 'string',
        'customer_id' => 'string',
        'card_info_key' => 'string',
        'name_on_card' => 'string',
        'account_number' => 'string',
        'reason_code' => 'string',
        'exclude_inactive' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => null,
        'end_date' => null,
        'card_type' => null,
        'contract_key' => null,
        'customer_key' => null,
        'customer_id' => null,
        'card_info_key' => null,
        'name_on_card' => null,
        'account_number' => null,
        'reason_code' => null,
        'exclude_inactive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'card_type' => 'card_type',
        'contract_key' => 'contract_key',
        'customer_key' => 'customer_key',
        'customer_id' => 'customer_id',
        'card_info_key' => 'card_info_key',
        'name_on_card' => 'name_on_card',
        'account_number' => 'account_number',
        'reason_code' => 'reason_code',
        'exclude_inactive' => 'exclude_inactive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'card_type' => 'setCardType',
        'contract_key' => 'setContractKey',
        'customer_key' => 'setCustomerKey',
        'customer_id' => 'setCustomerId',
        'card_info_key' => 'setCardInfoKey',
        'name_on_card' => 'setNameOnCard',
        'account_number' => 'setAccountNumber',
        'reason_code' => 'setReasonCode',
        'exclude_inactive' => 'setExcludeInactive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'card_type' => 'getCardType',
        'contract_key' => 'getContractKey',
        'customer_key' => 'getCustomerKey',
        'customer_id' => 'getCustomerId',
        'card_info_key' => 'getCardInfoKey',
        'name_on_card' => 'getNameOnCard',
        'account_number' => 'getAccountNumber',
        'reason_code' => 'getReasonCode',
        'exclude_inactive' => 'getExcludeInactive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARD_TYPE_VISA = 'VISA';
    public const CARD_TYPE_MASTERCARD = 'MASTERCARD';
    public const CARD_TYPE_DISCOVER = 'DISCOVER';
    public const CARD_TYPE_AMEX = 'AMEX';
    public const EXCLUDE_INACTIVE_TRUE = 'true';
    public const EXCLUDE_INACTIVE_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MASTERCARD,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_AMEX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludeInactiveAllowableValues()
    {
        return [
            self::EXCLUDE_INACTIVE_TRUE,
            self::EXCLUDE_INACTIVE_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['card_type'] = $data['card_type'] ?? null;
        $this->container['contract_key'] = $data['contract_key'] ?? null;
        $this->container['customer_key'] = $data['customer_key'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['card_info_key'] = $data['card_info_key'] ?? null;
        $this->container['name_on_card'] = $data['name_on_card'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['reason_code'] = $data['reason_code'] ?? null;
        $this->container['exclude_inactive'] = $data['exclude_inactive'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ((mb_strlen($this->container['start_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'start_date', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['end_date']) && (mb_strlen($this->container['end_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'end_date', the character length must be smaller than or equal to 10.";
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_type', must be one of '%s'",
                $this->container['card_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 19)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 19.";
        }

        $allowedValues = $this->getExcludeInactiveAllowableValues();
        if (!is_null($this->container['exclude_inactive']) && !in_array($this->container['exclude_inactive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exclude_inactive', must be one of '%s'",
                $this->container['exclude_inactive'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Filter by start date where update_receive_date &gt;= start_date  Format: YYYY-MM-DD
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if ((mb_strlen($start_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $start_date when calling CardAdminReportRequestModel., must be smaller than or equal to 10.');
        }

        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (!is_null($end_date) && (mb_strlen($end_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $end_date when calling CardAdminReportRequestModel., must be smaller than or equal to 10.');
        }

        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Filter by card type  Values: AMEX, DISCOVER, VISA, MASTERCARD  Note: Seperate multiple values with a comma (Ex. VISA, MASTERCARD) to filter by multiple card types
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_type', must be one of '%s'",
                    $card_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets contract_key
     *
     * @return string|null
     */
    public function getContractKey()
    {
        return $this->container['contract_key'];
    }

    /**
     * Sets contract_key
     *
     * @param string|null $contract_key Filter by contract key  Note: Unique identifier for the contract assigned by the Paragon Platform
     *
     * @return self
     */
    public function setContractKey($contract_key)
    {
        $this->container['contract_key'] = $contract_key;

        return $this;
    }

    /**
     * Gets customer_key
     *
     * @return string|null
     */
    public function getCustomerKey()
    {
        return $this->container['customer_key'];
    }

    /**
     * Sets customer_key
     *
     * @param string|null $customer_key Filter by customer key  Note: Unique identifier for the customer assigned by the Paragon Platform
     *
     * @return self
     */
    public function setCustomerKey($customer_key)
    {
        $this->container['customer_key'] = $customer_key;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Filter by customer id assigned by the merchant
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets card_info_key
     *
     * @return string|null
     */
    public function getCardInfoKey()
    {
        return $this->container['card_info_key'];
    }

    /**
     * Sets card_info_key
     *
     * @param string|null $card_info_key Filter by card info key   Note: Unique identifier for the card assigned by the Paragon Platform
     *
     * @return self
     */
    public function setCardInfoKey($card_info_key)
    {
        $this->container['card_info_key'] = $card_info_key;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Filter by cardholder's name on card
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The Primary Account Number(PAN) uniquely identifies the issuer and cardholder account
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (!is_null($account_number) && (mb_strlen($account_number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling CardAdminReportRequestModel., must be smaller than or equal to 19.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Filter by update reason code  Note: Seperate multiple reason codes with a comma (Ex. 201, 202) to filter by multiple update reason codes  Common Reason Code values:      200 = No update      201 = Expiration Date update      202 = Account Number update      203 = Account closed      204 = Account closed, call cardholder      For a complete list of supported reason codes, please refer to the Card Account Updater user guide.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets exclude_inactive
     *
     * @return string|null
     */
    public function getExcludeInactive()
    {
        return $this->container['exclude_inactive'];
    }

    /**
     * Sets exclude_inactive
     *
     * @param string|null $exclude_inactive Exclude inactive tokens from the results ('true' or 'false')
     *
     * @return self
     */
    public function setExcludeInactive($exclude_inactive)
    {
        $allowedValues = $this->getExcludeInactiveAllowableValues();
        if (!is_null($exclude_inactive) && !in_array($exclude_inactive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exclude_inactive', must be one of '%s'",
                    $exclude_inactive,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclude_inactive'] = $exclude_inactive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


