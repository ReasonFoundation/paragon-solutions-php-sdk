<?php
/**
 * UpdateTicketStatusRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * UpdateTicketStatusRequestModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateTicketStatusRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateTicketStatusRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'terminal_id' => 'string',
        'ticket_id' => 'string',
        'ticket_status' => 'string',
        'payment_reference_number' => 'string',
        'commercial_card_status' => 'string',
        'terminal_cashback_amount' => 'string',
        'ticket_result' => 'string',
        'ticket_sub_result' => 'string',
        'ticket_result_message' => 'string',
        'ticket_result_description' => 'string',
        'ticket_approval_code' => 'string',
        'terminal_auth_amount' => 'string',
        'terminal_tip_amount' => 'string',
        'terminal_tax_amount' => 'string',
        'card_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'terminal_id' => null,
        'ticket_id' => null,
        'ticket_status' => null,
        'payment_reference_number' => null,
        'commercial_card_status' => null,
        'terminal_cashback_amount' => null,
        'ticket_result' => null,
        'ticket_sub_result' => null,
        'ticket_result_message' => null,
        'ticket_result_description' => null,
        'ticket_approval_code' => null,
        'terminal_auth_amount' => null,
        'terminal_tip_amount' => null,
        'terminal_tax_amount' => null,
        'card_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'terminal_id' => 'terminal_id',
        'ticket_id' => 'ticket_id',
        'ticket_status' => 'ticket_status',
        'payment_reference_number' => 'payment_reference_number',
        'commercial_card_status' => 'commercial_card_status',
        'terminal_cashback_amount' => 'terminal_cashback_amount',
        'ticket_result' => 'ticket_result',
        'ticket_sub_result' => 'ticket_sub_result',
        'ticket_result_message' => 'ticket_result_message',
        'ticket_result_description' => 'ticket_result_description',
        'ticket_approval_code' => 'ticket_approval_code',
        'terminal_auth_amount' => 'terminal_auth_amount',
        'terminal_tip_amount' => 'terminal_tip_amount',
        'terminal_tax_amount' => 'terminal_tax_amount',
        'card_key' => 'card_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'terminal_id' => 'setTerminalId',
        'ticket_id' => 'setTicketId',
        'ticket_status' => 'setTicketStatus',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'commercial_card_status' => 'setCommercialCardStatus',
        'terminal_cashback_amount' => 'setTerminalCashbackAmount',
        'ticket_result' => 'setTicketResult',
        'ticket_sub_result' => 'setTicketSubResult',
        'ticket_result_message' => 'setTicketResultMessage',
        'ticket_result_description' => 'setTicketResultDescription',
        'ticket_approval_code' => 'setTicketApprovalCode',
        'terminal_auth_amount' => 'setTerminalAuthAmount',
        'terminal_tip_amount' => 'setTerminalTipAmount',
        'terminal_tax_amount' => 'setTerminalTaxAmount',
        'card_key' => 'setCardKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'terminal_id' => 'getTerminalId',
        'ticket_id' => 'getTicketId',
        'ticket_status' => 'getTicketStatus',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'commercial_card_status' => 'getCommercialCardStatus',
        'terminal_cashback_amount' => 'getTerminalCashbackAmount',
        'ticket_result' => 'getTicketResult',
        'ticket_sub_result' => 'getTicketSubResult',
        'ticket_result_message' => 'getTicketResultMessage',
        'ticket_result_description' => 'getTicketResultDescription',
        'ticket_approval_code' => 'getTicketApprovalCode',
        'terminal_auth_amount' => 'getTerminalAuthAmount',
        'terminal_tip_amount' => 'getTerminalTipAmount',
        'terminal_tax_amount' => 'getTerminalTaxAmount',
        'card_key' => 'getCardKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TICKET_STATUS_NOTSET = 'NOTSET';
    public const TICKET_STATUS_OPEN = 'OPEN';
    public const TICKET_STATUS_INPROCESS = 'INPROCESS';
    public const TICKET_STATUS_COMPLETE = 'COMPLETE';
    public const TICKET_STATUS_ERROR = 'ERROR';
    public const TICKET_STATUS_CANCELLED = 'CANCELLED';
    public const TICKET_STATUS_REVERSED = 'REVERSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTicketStatusAllowableValues()
    {
        return [
            self::TICKET_STATUS_NOTSET,
            self::TICKET_STATUS_OPEN,
            self::TICKET_STATUS_INPROCESS,
            self::TICKET_STATUS_COMPLETE,
            self::TICKET_STATUS_ERROR,
            self::TICKET_STATUS_CANCELLED,
            self::TICKET_STATUS_REVERSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['ticket_id'] = $data['ticket_id'] ?? null;
        $this->container['ticket_status'] = $data['ticket_status'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['commercial_card_status'] = $data['commercial_card_status'] ?? null;
        $this->container['terminal_cashback_amount'] = $data['terminal_cashback_amount'] ?? null;
        $this->container['ticket_result'] = $data['ticket_result'] ?? null;
        $this->container['ticket_sub_result'] = $data['ticket_sub_result'] ?? null;
        $this->container['ticket_result_message'] = $data['ticket_result_message'] ?? null;
        $this->container['ticket_result_description'] = $data['ticket_result_description'] ?? null;
        $this->container['ticket_approval_code'] = $data['ticket_approval_code'] ?? null;
        $this->container['terminal_auth_amount'] = $data['terminal_auth_amount'] ?? null;
        $this->container['terminal_tip_amount'] = $data['terminal_tip_amount'] ?? null;
        $this->container['terminal_tax_amount'] = $data['terminal_tax_amount'] ?? null;
        $this->container['card_key'] = $data['card_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['terminal_id'] === null) {
            $invalidProperties[] = "'terminal_id' can't be null";
        }
        if ((mb_strlen($this->container['terminal_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['terminal_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ticket_id'] === null) {
            $invalidProperties[] = "'ticket_id' can't be null";
        }
        if ((mb_strlen($this->container['ticket_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'ticket_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['ticket_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'ticket_id', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTicketStatusAllowableValues();
        if (!is_null($this->container['ticket_status']) && !in_array($this->container['ticket_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ticket_status', must be one of '%s'",
                $this->container['ticket_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_reference_number']) && (mb_strlen($this->container['payment_reference_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'payment_reference_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets terminal_id
     *
     * @return string
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string $terminal_id Terminal identifier.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if ((mb_strlen($terminal_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling UpdateTicketStatusRequestModel., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($terminal_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling UpdateTicketStatusRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return string
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param string $ticket_id Unique Paragon ticket identifier.
     *
     * @return self
     */
    public function setTicketId($ticket_id)
    {
        if ((mb_strlen($ticket_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $ticket_id when calling UpdateTicketStatusRequestModel., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($ticket_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ticket_id when calling UpdateTicketStatusRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets ticket_status
     *
     * @return string|null
     */
    public function getTicketStatus()
    {
        return $this->container['ticket_status'];
    }

    /**
     * Sets ticket_status
     *
     * @param string|null $ticket_status The ticket status you want to set. Valid values are (OPEN, COMPLETE, ERROR, CANCELLED)  This field is Mandatory
     *
     * @return self
     */
    public function setTicketStatus($ticket_status)
    {
        $allowedValues = $this->getTicketStatusAllowableValues();
        if (!is_null($ticket_status) && !in_array($ticket_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ticket_status', must be one of '%s'",
                    $ticket_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ticket_status'] = $ticket_status;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Returned from Paragon, the PNREF
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        if (!is_null($payment_reference_number) && (mb_strlen($payment_reference_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payment_reference_number when calling UpdateTicketStatusRequestModel., must be smaller than or equal to 10.');
        }

        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets commercial_card_status
     *
     * @return string|null
     */
    public function getCommercialCardStatus()
    {
        return $this->container['commercial_card_status'];
    }

    /**
     * Sets commercial_card_status
     *
     * @param string|null $commercial_card_status Commercial Card Status ( 0 = NotSet, 1 = Commercial Card, Tax Exempt )
     *
     * @return self
     */
    public function setCommercialCardStatus($commercial_card_status)
    {
        $this->container['commercial_card_status'] = $commercial_card_status;

        return $this;
    }

    /**
     * Gets terminal_cashback_amount
     *
     * @return string|null
     */
    public function getTerminalCashbackAmount()
    {
        return $this->container['terminal_cashback_amount'];
    }

    /**
     * Sets terminal_cashback_amount
     *
     * @param string|null $terminal_cashback_amount Final cash back amount sent to the gateway
     *
     * @return self
     */
    public function setTerminalCashbackAmount($terminal_cashback_amount)
    {
        $this->container['terminal_cashback_amount'] = $terminal_cashback_amount;

        return $this;
    }

    /**
     * Gets ticket_result
     *
     * @return string|null
     */
    public function getTicketResult()
    {
        return $this->container['ticket_result'];
    }

    /**
     * Sets ticket_result
     *
     * @param string|null $ticket_result Code returned from Paragon platform describing result from processing transaction
     *
     * @return self
     */
    public function setTicketResult($ticket_result)
    {
        $this->container['ticket_result'] = $ticket_result;

        return $this;
    }

    /**
     * Gets ticket_sub_result
     *
     * @return string|null
     */
    public function getTicketSubResult()
    {
        return $this->container['ticket_sub_result'];
    }

    /**
     * Sets ticket_sub_result
     *
     * @param string|null $ticket_sub_result Code returned from Paragon platform describing sub result from processing transaction
     *
     * @return self
     */
    public function setTicketSubResult($ticket_sub_result)
    {
        $this->container['ticket_sub_result'] = $ticket_sub_result;

        return $this;
    }

    /**
     * Gets ticket_result_message
     *
     * @return string|null
     */
    public function getTicketResultMessage()
    {
        return $this->container['ticket_result_message'];
    }

    /**
     * Sets ticket_result_message
     *
     * @param string|null $ticket_result_message Message returned from Paragon platform describing result from processing transaction
     *
     * @return self
     */
    public function setTicketResultMessage($ticket_result_message)
    {
        $this->container['ticket_result_message'] = $ticket_result_message;

        return $this;
    }

    /**
     * Gets ticket_result_description
     *
     * @return string|null
     */
    public function getTicketResultDescription()
    {
        return $this->container['ticket_result_description'];
    }

    /**
     * Sets ticket_result_description
     *
     * @param string|null $ticket_result_description Description returned from Paragon platform describing result from processing transaction
     *
     * @return self
     */
    public function setTicketResultDescription($ticket_result_description)
    {
        $this->container['ticket_result_description'] = $ticket_result_description;

        return $this;
    }

    /**
     * Gets ticket_approval_code
     *
     * @return string|null
     */
    public function getTicketApprovalCode()
    {
        return $this->container['ticket_approval_code'];
    }

    /**
     * Sets ticket_approval_code
     *
     * @param string|null $ticket_approval_code Code returned from Paragon platform describing approval code from approved transaction
     *
     * @return self
     */
    public function setTicketApprovalCode($ticket_approval_code)
    {
        $this->container['ticket_approval_code'] = $ticket_approval_code;

        return $this;
    }

    /**
     * Gets terminal_auth_amount
     *
     * @return string|null
     */
    public function getTerminalAuthAmount()
    {
        return $this->container['terminal_auth_amount'];
    }

    /**
     * Sets terminal_auth_amount
     *
     * @param string|null $terminal_auth_amount Final amount terminal sent to the gateway
     *
     * @return self
     */
    public function setTerminalAuthAmount($terminal_auth_amount)
    {
        $this->container['terminal_auth_amount'] = $terminal_auth_amount;

        return $this;
    }

    /**
     * Gets terminal_tip_amount
     *
     * @return string|null
     */
    public function getTerminalTipAmount()
    {
        return $this->container['terminal_tip_amount'];
    }

    /**
     * Sets terminal_tip_amount
     *
     * @param string|null $terminal_tip_amount Final tip amount terminal sent to the gateway
     *
     * @return self
     */
    public function setTerminalTipAmount($terminal_tip_amount)
    {
        $this->container['terminal_tip_amount'] = $terminal_tip_amount;

        return $this;
    }

    /**
     * Gets terminal_tax_amount
     *
     * @return string|null
     */
    public function getTerminalTaxAmount()
    {
        return $this->container['terminal_tax_amount'];
    }

    /**
     * Sets terminal_tax_amount
     *
     * @param string|null $terminal_tax_amount Final tax amount terminal sent to the gateway
     *
     * @return self
     */
    public function setTerminalTaxAmount($terminal_tax_amount)
    {
        $this->container['terminal_tax_amount'] = $terminal_tax_amount;

        return $this;
    }

    /**
     * Gets card_key
     *
     * @return string|null
     */
    public function getCardKey()
    {
        return $this->container['card_key'];
    }

    /**
     * Sets card_key
     *
     * @param string|null $card_key card_key
     *
     * @return self
     */
    public function setCardKey($card_key)
    {
        $this->container['card_key'] = $card_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


