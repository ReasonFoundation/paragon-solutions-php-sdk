<?php
/**
 * AddMerchantRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * AddMerchantRequestModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddMerchantRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddMerchantRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reseller_key' => 'string',
        'username' => 'string',
        'password' => 'string',
        'primary_merchant_id' => 'string',
        'merchant_id' => 'string',
        'annual_sales' => 'string',
        'business_start_date' => 'string',
        'company_name' => 'string',
        'soft_descriptor' => 'string',
        'doing_business_as' => 'string',
        'url' => 'string',
        'federal_tax_id' => 'string',
        'state_tax_id' => 'string',
        'sales_tax_id' => 'string',
        'ownership_type' => 'string',
        'time_zone_offset' => 'string',
        'is_test_merchant' => 'string',
        'underwriting_status' => 'string',
        'merchant_status' => 'string',
        'correlation_id' => 'string',
        'configuration' => '\DCarbone\ParagonSolutionsPHPSDK\Model\MerchantConfigModel',
        'contact' => '\DCarbone\ParagonSolutionsPHPSDK\Model\ContactModel',
        'payment_methods' => '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodsXmlModel',
        'virtual_terminal' => '\DCarbone\ParagonSolutionsPHPSDK\Model\VirtualTerminalModel',
        'fraud_control_suite_configuration' => '\DCarbone\ParagonSolutionsPHPSDK\Model\CardVerificationModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reseller_key' => null,
        'username' => null,
        'password' => 'password',
        'primary_merchant_id' => null,
        'merchant_id' => null,
        'annual_sales' => null,
        'business_start_date' => null,
        'company_name' => null,
        'soft_descriptor' => null,
        'doing_business_as' => null,
        'url' => null,
        'federal_tax_id' => null,
        'state_tax_id' => null,
        'sales_tax_id' => null,
        'ownership_type' => null,
        'time_zone_offset' => null,
        'is_test_merchant' => null,
        'underwriting_status' => null,
        'merchant_status' => null,
        'correlation_id' => null,
        'configuration' => null,
        'contact' => null,
        'payment_methods' => null,
        'virtual_terminal' => null,
        'fraud_control_suite_configuration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reseller_key' => 'reseller_key',
        'username' => 'username',
        'password' => 'password',
        'primary_merchant_id' => 'primary_merchant_id',
        'merchant_id' => 'merchant_id',
        'annual_sales' => 'annual_sales',
        'business_start_date' => 'business_start_date',
        'company_name' => 'company_name',
        'soft_descriptor' => 'soft_descriptor',
        'doing_business_as' => 'doing_business_as',
        'url' => 'url',
        'federal_tax_id' => 'federal_tax_id',
        'state_tax_id' => 'state_tax_id',
        'sales_tax_id' => 'sales_tax_id',
        'ownership_type' => 'ownership_type',
        'time_zone_offset' => 'time_zone_offset',
        'is_test_merchant' => 'is_test_merchant',
        'underwriting_status' => 'underwriting_status',
        'merchant_status' => 'merchant_status',
        'correlation_id' => 'correlation_id',
        'configuration' => 'configuration',
        'contact' => 'contact',
        'payment_methods' => 'payment_methods',
        'virtual_terminal' => 'virtual_terminal',
        'fraud_control_suite_configuration' => 'fraud_control_suite_configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reseller_key' => 'setResellerKey',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'primary_merchant_id' => 'setPrimaryMerchantId',
        'merchant_id' => 'setMerchantId',
        'annual_sales' => 'setAnnualSales',
        'business_start_date' => 'setBusinessStartDate',
        'company_name' => 'setCompanyName',
        'soft_descriptor' => 'setSoftDescriptor',
        'doing_business_as' => 'setDoingBusinessAs',
        'url' => 'setUrl',
        'federal_tax_id' => 'setFederalTaxId',
        'state_tax_id' => 'setStateTaxId',
        'sales_tax_id' => 'setSalesTaxId',
        'ownership_type' => 'setOwnershipType',
        'time_zone_offset' => 'setTimeZoneOffset',
        'is_test_merchant' => 'setIsTestMerchant',
        'underwriting_status' => 'setUnderwritingStatus',
        'merchant_status' => 'setMerchantStatus',
        'correlation_id' => 'setCorrelationId',
        'configuration' => 'setConfiguration',
        'contact' => 'setContact',
        'payment_methods' => 'setPaymentMethods',
        'virtual_terminal' => 'setVirtualTerminal',
        'fraud_control_suite_configuration' => 'setFraudControlSuiteConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reseller_key' => 'getResellerKey',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'primary_merchant_id' => 'getPrimaryMerchantId',
        'merchant_id' => 'getMerchantId',
        'annual_sales' => 'getAnnualSales',
        'business_start_date' => 'getBusinessStartDate',
        'company_name' => 'getCompanyName',
        'soft_descriptor' => 'getSoftDescriptor',
        'doing_business_as' => 'getDoingBusinessAs',
        'url' => 'getUrl',
        'federal_tax_id' => 'getFederalTaxId',
        'state_tax_id' => 'getStateTaxId',
        'sales_tax_id' => 'getSalesTaxId',
        'ownership_type' => 'getOwnershipType',
        'time_zone_offset' => 'getTimeZoneOffset',
        'is_test_merchant' => 'getIsTestMerchant',
        'underwriting_status' => 'getUnderwritingStatus',
        'merchant_status' => 'getMerchantStatus',
        'correlation_id' => 'getCorrelationId',
        'configuration' => 'getConfiguration',
        'contact' => 'getContact',
        'payment_methods' => 'getPaymentMethods',
        'virtual_terminal' => 'getVirtualTerminal',
        'fraud_control_suite_configuration' => 'getFraudControlSuiteConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNDERWRITING_STATUS_APPROVED = 'approved';
    public const UNDERWRITING_STATUS_PROVISIONALLY_APPROVED = 'provisionally_approved';
    public const MERCHANT_STATUS_ACTIVE = 'active';
    public const MERCHANT_STATUS_INACTIVE = 'inactive';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnderwritingStatusAllowableValues()
    {
        return [
            self::UNDERWRITING_STATUS_APPROVED,
            self::UNDERWRITING_STATUS_PROVISIONALLY_APPROVED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMerchantStatusAllowableValues()
    {
        return [
            self::MERCHANT_STATUS_ACTIVE,
            self::MERCHANT_STATUS_INACTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reseller_key'] = $data['reseller_key'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['primary_merchant_id'] = $data['primary_merchant_id'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['annual_sales'] = $data['annual_sales'] ?? null;
        $this->container['business_start_date'] = $data['business_start_date'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['soft_descriptor'] = $data['soft_descriptor'] ?? null;
        $this->container['doing_business_as'] = $data['doing_business_as'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['federal_tax_id'] = $data['federal_tax_id'] ?? null;
        $this->container['state_tax_id'] = $data['state_tax_id'] ?? null;
        $this->container['sales_tax_id'] = $data['sales_tax_id'] ?? null;
        $this->container['ownership_type'] = $data['ownership_type'] ?? null;
        $this->container['time_zone_offset'] = $data['time_zone_offset'] ?? null;
        $this->container['is_test_merchant'] = $data['is_test_merchant'] ?? null;
        $this->container['underwriting_status'] = $data['underwriting_status'] ?? null;
        $this->container['merchant_status'] = $data['merchant_status'] ?? null;
        $this->container['correlation_id'] = $data['correlation_id'] ?? null;
        $this->container['configuration'] = $data['configuration'] ?? null;
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['payment_methods'] = $data['payment_methods'] ?? null;
        $this->container['virtual_terminal'] = $data['virtual_terminal'] ?? null;
        $this->container['fraud_control_suite_configuration'] = $data['fraud_control_suite_configuration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reseller_key'] === null) {
            $invalidProperties[] = "'reseller_key' can't be null";
        }
        if ((mb_strlen($this->container['reseller_key']) > 10)) {
            $invalidProperties[] = "invalid value for 'reseller_key', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) > 25)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['primary_merchant_id']) && (mb_strlen($this->container['primary_merchant_id']) > 30)) {
            $invalidProperties[] = "invalid value for 'primary_merchant_id', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['annual_sales']) && (mb_strlen($this->container['annual_sales']) > 18)) {
            $invalidProperties[] = "invalid value for 'annual_sales', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['business_start_date']) && (mb_strlen($this->container['business_start_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_start_date', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((mb_strlen($this->container['company_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['doing_business_as']) && (mb_strlen($this->container['doing_business_as']) > 50)) {
            $invalidProperties[] = "invalid value for 'doing_business_as', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 50)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['federal_tax_id']) && (mb_strlen($this->container['federal_tax_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'federal_tax_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['state_tax_id']) && (mb_strlen($this->container['state_tax_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'state_tax_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['sales_tax_id']) && (mb_strlen($this->container['sales_tax_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'sales_tax_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['ownership_type']) && (mb_strlen($this->container['ownership_type']) > 25)) {
            $invalidProperties[] = "invalid value for 'ownership_type', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['time_zone_offset'] === null) {
            $invalidProperties[] = "'time_zone_offset' can't be null";
        }
        if ((mb_strlen($this->container['time_zone_offset']) > 6)) {
            $invalidProperties[] = "invalid value for 'time_zone_offset', the character length must be smaller than or equal to 6.";
        }

        $allowedValues = $this->getUnderwritingStatusAllowableValues();
        if (!is_null($this->container['underwriting_status']) && !in_array($this->container['underwriting_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'underwriting_status', must be one of '%s'",
                $this->container['underwriting_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMerchantStatusAllowableValues();
        if (!is_null($this->container['merchant_status']) && !in_array($this->container['merchant_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merchant_status', must be one of '%s'",
                $this->container['merchant_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reseller_key
     *
     * @return string
     */
    public function getResellerKey()
    {
        return $this->container['reseller_key'];
    }

    /**
     * Sets reseller_key
     *
     * @param string $reseller_key Unique identifier for Paragon platform reseller.
     *
     * @return self
     */
    public function setResellerKey($reseller_key)
    {
        if ((mb_strlen($reseller_key) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reseller_key when calling AddMerchantRequestModel., must be smaller than or equal to 10.');
        }

        $this->container['reseller_key'] = $reseller_key;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username User Name of Primary User for Merchant in Paragon platform.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if ((mb_strlen($username) > 25)) {
            throw new \InvalidArgumentException('invalid length for $username when calling AddMerchantRequestModel., must be smaller than or equal to 25.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password for Primary User for Merchant in Paragon Platform.  Optional: if no password is submitted, activation url will be returned.  Password must be a minimum of 8 characters and include at least one digit (0-9), one lower case letter (a-z) and one upper case letter (A-Z). Your password must not contain any special characters
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets primary_merchant_id
     *
     * @return string|null
     */
    public function getPrimaryMerchantId()
    {
        return $this->container['primary_merchant_id'];
    }

    /**
     * Sets primary_merchant_id
     *
     * @param string|null $primary_merchant_id Primary MID for a Merchant in Paragon platform assigned by the Processor.
     *
     * @return self
     */
    public function setPrimaryMerchantId($primary_merchant_id)
    {
        if (!is_null($primary_merchant_id) && (mb_strlen($primary_merchant_id) > 30)) {
            throw new \InvalidArgumentException('invalid length for $primary_merchant_id when calling AddMerchantRequestModel., must be smaller than or equal to 30.');
        }

        $this->container['primary_merchant_id'] = $primary_merchant_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Unique identifier for a Merchant in Paragon platform.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling AddMerchantRequestModel., must be smaller than or equal to 50.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets annual_sales
     *
     * @return string|null
     */
    public function getAnnualSales()
    {
        return $this->container['annual_sales'];
    }

    /**
     * Sets annual_sales
     *
     * @param string|null $annual_sales Annual Sales for a Merchant, in US or CAN Dollars
     *
     * @return self
     */
    public function setAnnualSales($annual_sales)
    {
        if (!is_null($annual_sales) && (mb_strlen($annual_sales) > 18)) {
            throw new \InvalidArgumentException('invalid length for $annual_sales when calling AddMerchantRequestModel., must be smaller than or equal to 18.');
        }

        $this->container['annual_sales'] = $annual_sales;

        return $this;
    }

    /**
     * Gets business_start_date
     *
     * @return string|null
     */
    public function getBusinessStartDate()
    {
        return $this->container['business_start_date'];
    }

    /**
     * Sets business_start_date
     *
     * @param string|null $business_start_date Merchant's first day in business
     *
     * @return self
     */
    public function setBusinessStartDate($business_start_date)
    {
        if (!is_null($business_start_date) && (mb_strlen($business_start_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_start_date when calling AddMerchantRequestModel., must be smaller than or equal to 10.');
        }

        $this->container['business_start_date'] = $business_start_date;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company Name of Merchant Account Holder.
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if ((mb_strlen($company_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling AddMerchantRequestModel., must be smaller than or equal to 50.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets soft_descriptor
     *
     * @return string|null
     */
    public function getSoftDescriptor()
    {
        return $this->container['soft_descriptor'];
    }

    /**
     * Sets soft_descriptor
     *
     * @param string|null $soft_descriptor PureFac Alternate name.
     *
     * @return self
     */
    public function setSoftDescriptor($soft_descriptor)
    {
        $this->container['soft_descriptor'] = $soft_descriptor;

        return $this;
    }

    /**
     * Gets doing_business_as
     *
     * @return string|null
     */
    public function getDoingBusinessAs()
    {
        return $this->container['doing_business_as'];
    }

    /**
     * Sets doing_business_as
     *
     * @param string|null $doing_business_as Trade name for a Merchant
     *
     * @return self
     */
    public function setDoingBusinessAs($doing_business_as)
    {
        if (!is_null($doing_business_as) && (mb_strlen($doing_business_as) > 50)) {
            throw new \InvalidArgumentException('invalid length for $doing_business_as when calling AddMerchantRequestModel., must be smaller than or equal to 50.');
        }

        $this->container['doing_business_as'] = $doing_business_as;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Universal Resource Locator (for Merchant website).
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 50)) {
            throw new \InvalidArgumentException('invalid length for $url when calling AddMerchantRequestModel., must be smaller than or equal to 50.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets federal_tax_id
     *
     * @return string|null
     */
    public function getFederalTaxId()
    {
        return $this->container['federal_tax_id'];
    }

    /**
     * Sets federal_tax_id
     *
     * @param string|null $federal_tax_id Unique identifier for a business entity issued by the Internal Revenue Service (IRS), also known as an Employer Identification Number(EIN).
     *
     * @return self
     */
    public function setFederalTaxId($federal_tax_id)
    {
        if (!is_null($federal_tax_id) && (mb_strlen($federal_tax_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $federal_tax_id when calling AddMerchantRequestModel., must be smaller than or equal to 25.');
        }

        $this->container['federal_tax_id'] = $federal_tax_id;

        return $this;
    }

    /**
     * Gets state_tax_id
     *
     * @return string|null
     */
    public function getStateTaxId()
    {
        return $this->container['state_tax_id'];
    }

    /**
     * Sets state_tax_id
     *
     * @param string|null $state_tax_id Unique identifier for a Merchant assigned by a State in the United States.
     *
     * @return self
     */
    public function setStateTaxId($state_tax_id)
    {
        if (!is_null($state_tax_id) && (mb_strlen($state_tax_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $state_tax_id when calling AddMerchantRequestModel., must be smaller than or equal to 25.');
        }

        $this->container['state_tax_id'] = $state_tax_id;

        return $this;
    }

    /**
     * Gets sales_tax_id
     *
     * @return string|null
     */
    public function getSalesTaxId()
    {
        return $this->container['sales_tax_id'];
    }

    /**
     * Sets sales_tax_id
     *
     * @param string|null $sales_tax_id Sales Tax identifier of a Merchant in Paragon platform
     *
     * @return self
     */
    public function setSalesTaxId($sales_tax_id)
    {
        if (!is_null($sales_tax_id) && (mb_strlen($sales_tax_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $sales_tax_id when calling AddMerchantRequestModel., must be smaller than or equal to 25.');
        }

        $this->container['sales_tax_id'] = $sales_tax_id;

        return $this;
    }

    /**
     * Gets ownership_type
     *
     * @return string|null
     */
    public function getOwnershipType()
    {
        return $this->container['ownership_type'];
    }

    /**
     * Sets ownership_type
     *
     * @param string|null $ownership_type Structure of ownership for Merchant Business
     *
     * @return self
     */
    public function setOwnershipType($ownership_type)
    {
        if (!is_null($ownership_type) && (mb_strlen($ownership_type) > 25)) {
            throw new \InvalidArgumentException('invalid length for $ownership_type when calling AddMerchantRequestModel., must be smaller than or equal to 25.');
        }

        $this->container['ownership_type'] = $ownership_type;

        return $this;
    }

    /**
     * Gets time_zone_offset
     *
     * @return string
     */
    public function getTimeZoneOffset()
    {
        return $this->container['time_zone_offset'];
    }

    /**
     * Sets time_zone_offset
     *
     * @param string $time_zone_offset Offset from Coordinated Universal Time(in minutes).
     *
     * @return self
     */
    public function setTimeZoneOffset($time_zone_offset)
    {
        if ((mb_strlen($time_zone_offset) > 6)) {
            throw new \InvalidArgumentException('invalid length for $time_zone_offset when calling AddMerchantRequestModel., must be smaller than or equal to 6.');
        }

        $this->container['time_zone_offset'] = $time_zone_offset;

        return $this;
    }

    /**
     * Gets is_test_merchant
     *
     * @return string|null
     */
    public function getIsTestMerchant()
    {
        return $this->container['is_test_merchant'];
    }

    /**
     * Sets is_test_merchant
     *
     * @param string|null $is_test_merchant Set to \"T\" for test merchant otherwise \"F\"
     *
     * @return self
     */
    public function setIsTestMerchant($is_test_merchant)
    {
        $this->container['is_test_merchant'] = $is_test_merchant;

        return $this;
    }

    /**
     * Gets underwriting_status
     *
     * @return string|null
     */
    public function getUnderwritingStatus()
    {
        return $this->container['underwriting_status'];
    }

    /**
     * Sets underwriting_status
     *
     * @param string|null $underwriting_status Merchant Underwriting Status
     *
     * @return self
     */
    public function setUnderwritingStatus($underwriting_status)
    {
        $allowedValues = $this->getUnderwritingStatusAllowableValues();
        if (!is_null($underwriting_status) && !in_array($underwriting_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'underwriting_status', must be one of '%s'",
                    $underwriting_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['underwriting_status'] = $underwriting_status;

        return $this;
    }

    /**
     * Gets merchant_status
     *
     * @return string|null
     */
    public function getMerchantStatus()
    {
        return $this->container['merchant_status'];
    }

    /**
     * Sets merchant_status
     *
     * @param string|null $merchant_status Merchant Status
     *
     * @return self
     */
    public function setMerchantStatus($merchant_status)
    {
        $allowedValues = $this->getMerchantStatusAllowableValues();
        if (!is_null($merchant_status) && !in_array($merchant_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merchant_status', must be one of '%s'",
                    $merchant_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merchant_status'] = $merchant_status;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id Guid Correlation Identifier. EX: \"de80889a-da5c-4d94-82b1-6d63209c7455\"
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\MerchantConfigModel|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\MerchantConfigModel|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\ContactModel|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\ContactModel|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodsXmlModel|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodsXmlModel|null $payment_methods payment_methods
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets virtual_terminal
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\VirtualTerminalModel|null
     */
    public function getVirtualTerminal()
    {
        return $this->container['virtual_terminal'];
    }

    /**
     * Sets virtual_terminal
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\VirtualTerminalModel|null $virtual_terminal virtual_terminal
     *
     * @return self
     */
    public function setVirtualTerminal($virtual_terminal)
    {
        $this->container['virtual_terminal'] = $virtual_terminal;

        return $this;
    }

    /**
     * Gets fraud_control_suite_configuration
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\CardVerificationModel|null
     */
    public function getFraudControlSuiteConfiguration()
    {
        return $this->container['fraud_control_suite_configuration'];
    }

    /**
     * Sets fraud_control_suite_configuration
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\CardVerificationModel|null $fraud_control_suite_configuration fraud_control_suite_configuration
     *
     * @return self
     */
    public function setFraudControlSuiteConfiguration($fraud_control_suite_configuration)
    {
        $this->container['fraud_control_suite_configuration'] = $fraud_control_suite_configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


