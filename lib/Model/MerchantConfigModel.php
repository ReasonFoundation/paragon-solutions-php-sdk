<?php
/**
 * MerchantConfigModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * MerchantConfigModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantConfigModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantConfigModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enable_auto_settlement' => 'string',
        'enable_auto_settlement_email' => 'string',
        'auto_settlement_time' => 'string',
        'allow_duplicate_invoice_number' => 'string',
        'enable_duplicate_check' => 'string',
        'require_pnref_for_refunds' => 'string',
        'enable_daily_transaction_summary_report_email' => 'string',
        'require_invoice_number' => 'string',
        'require_level_2_data' => 'string',
        'collect_level_3_data' => 'string',
        'enable_hosted_payment_page' => 'string',
        'allow_avs_cvv_filter_bypass_per_transaction' => 'string',
        'enable_fraud_control_suite' => 'string',
        'enable_card_account_updater' => 'string',
        'enable_image_capture_and_retrieval' => 'string',
        'enable_receipt_capture_and_retrieval' => 'string',
        'enable_offline_batch_tool' => 'string',
        'enable_transactions_via_internet' => 'string',
        'enable_transactions_via_dial_in' => 'string',
        'enable_bin_management_api' => 'string',
        'enable_override_of_recurring_billing_settings' => 'string',
        'enable_expired_card_validation_bypass' => 'string',
        'has_email_receipts_access' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enable_auto_settlement' => null,
        'enable_auto_settlement_email' => null,
        'auto_settlement_time' => null,
        'allow_duplicate_invoice_number' => null,
        'enable_duplicate_check' => null,
        'require_pnref_for_refunds' => null,
        'enable_daily_transaction_summary_report_email' => null,
        'require_invoice_number' => null,
        'require_level_2_data' => null,
        'collect_level_3_data' => null,
        'enable_hosted_payment_page' => null,
        'allow_avs_cvv_filter_bypass_per_transaction' => null,
        'enable_fraud_control_suite' => null,
        'enable_card_account_updater' => null,
        'enable_image_capture_and_retrieval' => null,
        'enable_receipt_capture_and_retrieval' => null,
        'enable_offline_batch_tool' => null,
        'enable_transactions_via_internet' => null,
        'enable_transactions_via_dial_in' => null,
        'enable_bin_management_api' => null,
        'enable_override_of_recurring_billing_settings' => null,
        'enable_expired_card_validation_bypass' => null,
        'has_email_receipts_access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_auto_settlement' => 'enable_auto_settlement',
        'enable_auto_settlement_email' => 'enable_auto_settlement_email',
        'auto_settlement_time' => 'auto_settlement_time',
        'allow_duplicate_invoice_number' => 'allow_duplicate_invoice_number',
        'enable_duplicate_check' => 'enable_duplicate_check',
        'require_pnref_for_refunds' => 'require_pnref_for_refunds',
        'enable_daily_transaction_summary_report_email' => 'enable_daily_transaction_summary_report_email',
        'require_invoice_number' => 'require_invoice_number',
        'require_level_2_data' => 'require_level_2_data',
        'collect_level_3_data' => 'collect_level_3_data',
        'enable_hosted_payment_page' => 'enable_hosted_payment_page',
        'allow_avs_cvv_filter_bypass_per_transaction' => 'allow_avs_cvv_filter_bypass_per_transaction',
        'enable_fraud_control_suite' => 'enable_fraud_control_suite',
        'enable_card_account_updater' => 'enable_card_account_updater',
        'enable_image_capture_and_retrieval' => 'enable_image_capture_and_retrieval',
        'enable_receipt_capture_and_retrieval' => 'enable_receipt_capture_and_retrieval',
        'enable_offline_batch_tool' => 'enable_offline_batch_tool',
        'enable_transactions_via_internet' => 'enable_transactions_via_internet',
        'enable_transactions_via_dial_in' => 'enable_transactions_via_dial_in',
        'enable_bin_management_api' => 'enable_bin_management_api',
        'enable_override_of_recurring_billing_settings' => 'enable_override_of_recurring_billing_settings',
        'enable_expired_card_validation_bypass' => 'enable_expired_card_validation_bypass',
        'has_email_receipts_access' => 'has_email_receipts_access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_auto_settlement' => 'setEnableAutoSettlement',
        'enable_auto_settlement_email' => 'setEnableAutoSettlementEmail',
        'auto_settlement_time' => 'setAutoSettlementTime',
        'allow_duplicate_invoice_number' => 'setAllowDuplicateInvoiceNumber',
        'enable_duplicate_check' => 'setEnableDuplicateCheck',
        'require_pnref_for_refunds' => 'setRequirePnrefForRefunds',
        'enable_daily_transaction_summary_report_email' => 'setEnableDailyTransactionSummaryReportEmail',
        'require_invoice_number' => 'setRequireInvoiceNumber',
        'require_level_2_data' => 'setRequireLevel2Data',
        'collect_level_3_data' => 'setCollectLevel3Data',
        'enable_hosted_payment_page' => 'setEnableHostedPaymentPage',
        'allow_avs_cvv_filter_bypass_per_transaction' => 'setAllowAvsCvvFilterBypassPerTransaction',
        'enable_fraud_control_suite' => 'setEnableFraudControlSuite',
        'enable_card_account_updater' => 'setEnableCardAccountUpdater',
        'enable_image_capture_and_retrieval' => 'setEnableImageCaptureAndRetrieval',
        'enable_receipt_capture_and_retrieval' => 'setEnableReceiptCaptureAndRetrieval',
        'enable_offline_batch_tool' => 'setEnableOfflineBatchTool',
        'enable_transactions_via_internet' => 'setEnableTransactionsViaInternet',
        'enable_transactions_via_dial_in' => 'setEnableTransactionsViaDialIn',
        'enable_bin_management_api' => 'setEnableBinManagementApi',
        'enable_override_of_recurring_billing_settings' => 'setEnableOverrideOfRecurringBillingSettings',
        'enable_expired_card_validation_bypass' => 'setEnableExpiredCardValidationBypass',
        'has_email_receipts_access' => 'setHasEmailReceiptsAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_auto_settlement' => 'getEnableAutoSettlement',
        'enable_auto_settlement_email' => 'getEnableAutoSettlementEmail',
        'auto_settlement_time' => 'getAutoSettlementTime',
        'allow_duplicate_invoice_number' => 'getAllowDuplicateInvoiceNumber',
        'enable_duplicate_check' => 'getEnableDuplicateCheck',
        'require_pnref_for_refunds' => 'getRequirePnrefForRefunds',
        'enable_daily_transaction_summary_report_email' => 'getEnableDailyTransactionSummaryReportEmail',
        'require_invoice_number' => 'getRequireInvoiceNumber',
        'require_level_2_data' => 'getRequireLevel2Data',
        'collect_level_3_data' => 'getCollectLevel3Data',
        'enable_hosted_payment_page' => 'getEnableHostedPaymentPage',
        'allow_avs_cvv_filter_bypass_per_transaction' => 'getAllowAvsCvvFilterBypassPerTransaction',
        'enable_fraud_control_suite' => 'getEnableFraudControlSuite',
        'enable_card_account_updater' => 'getEnableCardAccountUpdater',
        'enable_image_capture_and_retrieval' => 'getEnableImageCaptureAndRetrieval',
        'enable_receipt_capture_and_retrieval' => 'getEnableReceiptCaptureAndRetrieval',
        'enable_offline_batch_tool' => 'getEnableOfflineBatchTool',
        'enable_transactions_via_internet' => 'getEnableTransactionsViaInternet',
        'enable_transactions_via_dial_in' => 'getEnableTransactionsViaDialIn',
        'enable_bin_management_api' => 'getEnableBinManagementApi',
        'enable_override_of_recurring_billing_settings' => 'getEnableOverrideOfRecurringBillingSettings',
        'enable_expired_card_validation_bypass' => 'getEnableExpiredCardValidationBypass',
        'has_email_receipts_access' => 'getHasEmailReceiptsAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_auto_settlement'] = $data['enable_auto_settlement'] ?? null;
        $this->container['enable_auto_settlement_email'] = $data['enable_auto_settlement_email'] ?? null;
        $this->container['auto_settlement_time'] = $data['auto_settlement_time'] ?? null;
        $this->container['allow_duplicate_invoice_number'] = $data['allow_duplicate_invoice_number'] ?? null;
        $this->container['enable_duplicate_check'] = $data['enable_duplicate_check'] ?? null;
        $this->container['require_pnref_for_refunds'] = $data['require_pnref_for_refunds'] ?? null;
        $this->container['enable_daily_transaction_summary_report_email'] = $data['enable_daily_transaction_summary_report_email'] ?? null;
        $this->container['require_invoice_number'] = $data['require_invoice_number'] ?? null;
        $this->container['require_level_2_data'] = $data['require_level_2_data'] ?? null;
        $this->container['collect_level_3_data'] = $data['collect_level_3_data'] ?? null;
        $this->container['enable_hosted_payment_page'] = $data['enable_hosted_payment_page'] ?? null;
        $this->container['allow_avs_cvv_filter_bypass_per_transaction'] = $data['allow_avs_cvv_filter_bypass_per_transaction'] ?? null;
        $this->container['enable_fraud_control_suite'] = $data['enable_fraud_control_suite'] ?? null;
        $this->container['enable_card_account_updater'] = $data['enable_card_account_updater'] ?? null;
        $this->container['enable_image_capture_and_retrieval'] = $data['enable_image_capture_and_retrieval'] ?? null;
        $this->container['enable_receipt_capture_and_retrieval'] = $data['enable_receipt_capture_and_retrieval'] ?? null;
        $this->container['enable_offline_batch_tool'] = $data['enable_offline_batch_tool'] ?? null;
        $this->container['enable_transactions_via_internet'] = $data['enable_transactions_via_internet'] ?? null;
        $this->container['enable_transactions_via_dial_in'] = $data['enable_transactions_via_dial_in'] ?? null;
        $this->container['enable_bin_management_api'] = $data['enable_bin_management_api'] ?? null;
        $this->container['enable_override_of_recurring_billing_settings'] = $data['enable_override_of_recurring_billing_settings'] ?? null;
        $this->container['enable_expired_card_validation_bypass'] = $data['enable_expired_card_validation_bypass'] ?? null;
        $this->container['has_email_receipts_access'] = $data['has_email_receipts_access'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['enable_duplicate_check']) && (mb_strlen($this->container['enable_duplicate_check']) > 1)) {
            $invalidProperties[] = "invalid value for 'enable_duplicate_check', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['require_pnref_for_refunds']) && (mb_strlen($this->container['require_pnref_for_refunds']) > 1)) {
            $invalidProperties[] = "invalid value for 'require_pnref_for_refunds', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_auto_settlement
     *
     * @return string|null
     */
    public function getEnableAutoSettlement()
    {
        return $this->container['enable_auto_settlement'];
    }

    /**
     * Sets enable_auto_settlement
     *
     * @param string|null $enable_auto_settlement Valid Values \"T\" or \"F\"
     *
     * @return self
     */
    public function setEnableAutoSettlement($enable_auto_settlement)
    {
        $this->container['enable_auto_settlement'] = $enable_auto_settlement;

        return $this;
    }

    /**
     * Gets enable_auto_settlement_email
     *
     * @return string|null
     */
    public function getEnableAutoSettlementEmail()
    {
        return $this->container['enable_auto_settlement_email'];
    }

    /**
     * Sets enable_auto_settlement_email
     *
     * @param string|null $enable_auto_settlement_email Valid Values \"T\" or \"F\". Enable (T) Paragon platform to send message to merchant when batch settled automatically is complete.
     *
     * @return self
     */
    public function setEnableAutoSettlementEmail($enable_auto_settlement_email)
    {
        $this->container['enable_auto_settlement_email'] = $enable_auto_settlement_email;

        return $this;
    }

    /**
     * Gets auto_settlement_time
     *
     * @return string|null
     */
    public function getAutoSettlementTime()
    {
        return $this->container['auto_settlement_time'];
    }

    /**
     * Sets auto_settlement_time
     *
     * @param string|null $auto_settlement_time Time in which automatic settlement should run. 24 Hour Format, Ex: 17 = 5:00 PM
     *
     * @return self
     */
    public function setAutoSettlementTime($auto_settlement_time)
    {
        $this->container['auto_settlement_time'] = $auto_settlement_time;

        return $this;
    }

    /**
     * Gets allow_duplicate_invoice_number
     *
     * @return string|null
     */
    public function getAllowDuplicateInvoiceNumber()
    {
        return $this->container['allow_duplicate_invoice_number'];
    }

    /**
     * Sets allow_duplicate_invoice_number
     *
     * @param string|null $allow_duplicate_invoice_number Valid Values \"T\" or \"F\". Enable (T) new invoice number to be required when multiple transactions with same payment method and amount are processed for the same time period.
     *
     * @return self
     */
    public function setAllowDuplicateInvoiceNumber($allow_duplicate_invoice_number)
    {
        $this->container['allow_duplicate_invoice_number'] = $allow_duplicate_invoice_number;

        return $this;
    }

    /**
     * Gets enable_duplicate_check
     *
     * @return string|null
     */
    public function getEnableDuplicateCheck()
    {
        return $this->container['enable_duplicate_check'];
    }

    /**
     * Sets enable_duplicate_check
     *
     * @param string|null $enable_duplicate_check Valid Values \"T\" or \"F\",  Set Enable duplicate check to 'T' if you want duplicate transactions to be flagged as duplicates.
     *
     * @return self
     */
    public function setEnableDuplicateCheck($enable_duplicate_check)
    {
        if (!is_null($enable_duplicate_check) && (mb_strlen($enable_duplicate_check) > 1)) {
            throw new \InvalidArgumentException('invalid length for $enable_duplicate_check when calling MerchantConfigModel., must be smaller than or equal to 1.');
        }

        $this->container['enable_duplicate_check'] = $enable_duplicate_check;

        return $this;
    }

    /**
     * Gets require_pnref_for_refunds
     *
     * @return string|null
     */
    public function getRequirePnrefForRefunds()
    {
        return $this->container['require_pnref_for_refunds'];
    }

    /**
     * Sets require_pnref_for_refunds
     *
     * @param string|null $require_pnref_for_refunds Valid Values \"T\" or \"F\". Paragon platform requires(T) unique identifier for original transaction to allow refunds or credits
     *
     * @return self
     */
    public function setRequirePnrefForRefunds($require_pnref_for_refunds)
    {
        if (!is_null($require_pnref_for_refunds) && (mb_strlen($require_pnref_for_refunds) > 1)) {
            throw new \InvalidArgumentException('invalid length for $require_pnref_for_refunds when calling MerchantConfigModel., must be smaller than or equal to 1.');
        }

        $this->container['require_pnref_for_refunds'] = $require_pnref_for_refunds;

        return $this;
    }

    /**
     * Gets enable_daily_transaction_summary_report_email
     *
     * @return string|null
     */
    public function getEnableDailyTransactionSummaryReportEmail()
    {
        return $this->container['enable_daily_transaction_summary_report_email'];
    }

    /**
     * Sets enable_daily_transaction_summary_report_email
     *
     * @param string|null $enable_daily_transaction_summary_report_email Enable daily transaction summary report: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setEnableDailyTransactionSummaryReportEmail($enable_daily_transaction_summary_report_email)
    {
        $this->container['enable_daily_transaction_summary_report_email'] = $enable_daily_transaction_summary_report_email;

        return $this;
    }

    /**
     * Gets require_invoice_number
     *
     * @return string|null
     */
    public function getRequireInvoiceNumber()
    {
        return $this->container['require_invoice_number'];
    }

    /**
     * Sets require_invoice_number
     *
     * @param string|null $require_invoice_number Require Invoice: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setRequireInvoiceNumber($require_invoice_number)
    {
        $this->container['require_invoice_number'] = $require_invoice_number;

        return $this;
    }

    /**
     * Gets require_level_2_data
     *
     * @return string|null
     */
    public function getRequireLevel2Data()
    {
        return $this->container['require_level_2_data'];
    }

    /**
     * Sets require_level_2_data
     *
     * @param string|null $require_level_2_data Require Level 2 data: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setRequireLevel2Data($require_level_2_data)
    {
        $this->container['require_level_2_data'] = $require_level_2_data;

        return $this;
    }

    /**
     * Gets collect_level_3_data
     *
     * @return string|null
     */
    public function getCollectLevel3Data()
    {
        return $this->container['collect_level_3_data'];
    }

    /**
     * Sets collect_level_3_data
     *
     * @param string|null $collect_level_3_data Collect Level 3 data: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setCollectLevel3Data($collect_level_3_data)
    {
        $this->container['collect_level_3_data'] = $collect_level_3_data;

        return $this;
    }

    /**
     * Gets enable_hosted_payment_page
     *
     * @return string|null
     */
    public function getEnableHostedPaymentPage()
    {
        return $this->container['enable_hosted_payment_page'];
    }

    /**
     * Sets enable_hosted_payment_page
     *
     * @param string|null $enable_hosted_payment_page Enable Hosted Payments Page: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setEnableHostedPaymentPage($enable_hosted_payment_page)
    {
        $this->container['enable_hosted_payment_page'] = $enable_hosted_payment_page;

        return $this;
    }

    /**
     * Gets allow_avs_cvv_filter_bypass_per_transaction
     *
     * @return string|null
     */
    public function getAllowAvsCvvFilterBypassPerTransaction()
    {
        return $this->container['allow_avs_cvv_filter_bypass_per_transaction'];
    }

    /**
     * Sets allow_avs_cvv_filter_bypass_per_transaction
     *
     * @param string|null $allow_avs_cvv_filter_bypass_per_transaction Bypass (True) AVS/CVV verification on a per transaction basis
     *
     * @return self
     */
    public function setAllowAvsCvvFilterBypassPerTransaction($allow_avs_cvv_filter_bypass_per_transaction)
    {
        $this->container['allow_avs_cvv_filter_bypass_per_transaction'] = $allow_avs_cvv_filter_bypass_per_transaction;

        return $this;
    }

    /**
     * Gets enable_fraud_control_suite
     *
     * @return string|null
     */
    public function getEnableFraudControlSuite()
    {
        return $this->container['enable_fraud_control_suite'];
    }

    /**
     * Sets enable_fraud_control_suite
     *
     * @param string|null $enable_fraud_control_suite Enable Fraud Control Suite: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setEnableFraudControlSuite($enable_fraud_control_suite)
    {
        $this->container['enable_fraud_control_suite'] = $enable_fraud_control_suite;

        return $this;
    }

    /**
     * Gets enable_card_account_updater
     *
     * @return string|null
     */
    public function getEnableCardAccountUpdater()
    {
        return $this->container['enable_card_account_updater'];
    }

    /**
     * Sets enable_card_account_updater
     *
     * @param string|null $enable_card_account_updater Enable Card Account Updater: Valid Values: \"T\" or \"F\"
     *
     * @return self
     */
    public function setEnableCardAccountUpdater($enable_card_account_updater)
    {
        $this->container['enable_card_account_updater'] = $enable_card_account_updater;

        return $this;
    }

    /**
     * Gets enable_image_capture_and_retrieval
     *
     * @return string|null
     */
    public function getEnableImageCaptureAndRetrieval()
    {
        return $this->container['enable_image_capture_and_retrieval'];
    }

    /**
     * Sets enable_image_capture_and_retrieval
     *
     * @param string|null $enable_image_capture_and_retrieval Valid Values \"T\" or \"F\". Enable (T) merchant to store store signatures.
     *
     * @return self
     */
    public function setEnableImageCaptureAndRetrieval($enable_image_capture_and_retrieval)
    {
        $this->container['enable_image_capture_and_retrieval'] = $enable_image_capture_and_retrieval;

        return $this;
    }

    /**
     * Gets enable_receipt_capture_and_retrieval
     *
     * @return string|null
     */
    public function getEnableReceiptCaptureAndRetrieval()
    {
        return $this->container['enable_receipt_capture_and_retrieval'];
    }

    /**
     * Sets enable_receipt_capture_and_retrieval
     *
     * @param string|null $enable_receipt_capture_and_retrieval Valid Values \"T\" or \"F\". Enable (T) merchant to store receipt images.
     *
     * @return self
     */
    public function setEnableReceiptCaptureAndRetrieval($enable_receipt_capture_and_retrieval)
    {
        $this->container['enable_receipt_capture_and_retrieval'] = $enable_receipt_capture_and_retrieval;

        return $this;
    }

    /**
     * Gets enable_offline_batch_tool
     *
     * @return string|null
     */
    public function getEnableOfflineBatchTool()
    {
        return $this->container['enable_offline_batch_tool'];
    }

    /**
     * Sets enable_offline_batch_tool
     *
     * @param string|null $enable_offline_batch_tool Valid Values \"T\" or \"F\". Enable (T), allows the merchant to upload a flat file of transaction data for offline processing.
     *
     * @return self
     */
    public function setEnableOfflineBatchTool($enable_offline_batch_tool)
    {
        $this->container['enable_offline_batch_tool'] = $enable_offline_batch_tool;

        return $this;
    }

    /**
     * Gets enable_transactions_via_internet
     *
     * @return string|null
     */
    public function getEnableTransactionsViaInternet()
    {
        return $this->container['enable_transactions_via_internet'];
    }

    /**
     * Sets enable_transactions_via_internet
     *
     * @param string|null $enable_transactions_via_internet enable_transactions_via_internet
     *
     * @return self
     */
    public function setEnableTransactionsViaInternet($enable_transactions_via_internet)
    {
        $this->container['enable_transactions_via_internet'] = $enable_transactions_via_internet;

        return $this;
    }

    /**
     * Gets enable_transactions_via_dial_in
     *
     * @return string|null
     */
    public function getEnableTransactionsViaDialIn()
    {
        return $this->container['enable_transactions_via_dial_in'];
    }

    /**
     * Sets enable_transactions_via_dial_in
     *
     * @param string|null $enable_transactions_via_dial_in enable_transactions_via_dial_in
     *
     * @return self
     */
    public function setEnableTransactionsViaDialIn($enable_transactions_via_dial_in)
    {
        $this->container['enable_transactions_via_dial_in'] = $enable_transactions_via_dial_in;

        return $this;
    }

    /**
     * Gets enable_bin_management_api
     *
     * @return string|null
     */
    public function getEnableBinManagementApi()
    {
        return $this->container['enable_bin_management_api'];
    }

    /**
     * Sets enable_bin_management_api
     *
     * @param string|null $enable_bin_management_api enable_bin_management_api
     *
     * @return self
     */
    public function setEnableBinManagementApi($enable_bin_management_api)
    {
        $this->container['enable_bin_management_api'] = $enable_bin_management_api;

        return $this;
    }

    /**
     * Gets enable_override_of_recurring_billing_settings
     *
     * @return string|null
     */
    public function getEnableOverrideOfRecurringBillingSettings()
    {
        return $this->container['enable_override_of_recurring_billing_settings'];
    }

    /**
     * Sets enable_override_of_recurring_billing_settings
     *
     * @param string|null $enable_override_of_recurring_billing_settings Valid Values \"T\" or \"F\". Override (T) values provided by Merchant or API User for MaxFailure, FailureInterval, FailureResultCode and MaxBillingCycleRetry.
     *
     * @return self
     */
    public function setEnableOverrideOfRecurringBillingSettings($enable_override_of_recurring_billing_settings)
    {
        $this->container['enable_override_of_recurring_billing_settings'] = $enable_override_of_recurring_billing_settings;

        return $this;
    }

    /**
     * Gets enable_expired_card_validation_bypass
     *
     * @return string|null
     */
    public function getEnableExpiredCardValidationBypass()
    {
        return $this->container['enable_expired_card_validation_bypass'];
    }

    /**
     * Sets enable_expired_card_validation_bypass
     *
     * @param string|null $enable_expired_card_validation_bypass Valid Values \"T\" or \"F\". Enable (T) Paragon platform to bypass validation of credit card expiration date.
     *
     * @return self
     */
    public function setEnableExpiredCardValidationBypass($enable_expired_card_validation_bypass)
    {
        $this->container['enable_expired_card_validation_bypass'] = $enable_expired_card_validation_bypass;

        return $this;
    }

    /**
     * Gets has_email_receipts_access
     *
     * @return string|null
     */
    public function getHasEmailReceiptsAccess()
    {
        return $this->container['has_email_receipts_access'];
    }

    /**
     * Sets has_email_receipts_access
     *
     * @param string|null $has_email_receipts_access Has access to email receipts: Valid Values \"T\" or \"F\"
     *
     * @return self
     */
    public function setHasEmailReceiptsAccess($has_email_receipts_access)
    {
        $this->container['has_email_receipts_access'] = $has_email_receipts_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


