<?php
/**
 * CreateTokenizedCardTransactionsModelV2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CreateTokenizedCardTransactionsModelV2 Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateTokenizedCardTransactionsModelV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateTokenizedCardTransactionsModelV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'string',
        'card_info_key' => 'string',
        'hp_plus_key' => 'string',
        'amount' => 'string',
        'invoice_number' => 'string',
        'payment_reference_number' => 'string',
        'tip_amount' => 'string',
        'customer_code' => 'string',
        'purchase_order_number' => 'string',
        'tax_amount' => 'string',
        'custom_fields' => 'array<string,string>',
        'authorization_code' => 'string',
        'bill_payment' => 'string',
        'bypass_address_verification_and_card_value_verification' => 'string',
        'health_care' => '\DCarbone\ParagonSolutionsPHPSDK\Model\HealthcareDetailsModel',
        'merchant_soft_descriptor' => '\DCarbone\ParagonSolutionsPHPSDK\Model\MerchantSoftDescriptorModel',
        'force' => 'string',
        'card_verification_number' => 'string',
        'cv_presence' => 'string',
        'entry_mode' => 'string',
        'external_ip' => 'string',
        'level3_details' => '\DCarbone\ParagonSolutionsPHPSDK\Model\Level3DetailsModel',
        'register_number' => 'string',
        'sequence_count' => 'string',
        'sequence_number' => 'string',
        'server_id' => 'string',
        'transaction_id' => 'string',
        'street1' => 'string',
        'zip_code' => 'string',
        'card_number_last_four_digits' => 'string',
        'currency_code' => 'string',
        'bypass_amount_format' => 'string',
        'shipping_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'card_info_key' => null,
        'hp_plus_key' => null,
        'amount' => null,
        'invoice_number' => null,
        'payment_reference_number' => null,
        'tip_amount' => null,
        'customer_code' => null,
        'purchase_order_number' => null,
        'tax_amount' => null,
        'custom_fields' => null,
        'authorization_code' => null,
        'bill_payment' => null,
        'bypass_address_verification_and_card_value_verification' => null,
        'health_care' => null,
        'merchant_soft_descriptor' => null,
        'force' => null,
        'card_verification_number' => null,
        'cv_presence' => null,
        'entry_mode' => null,
        'external_ip' => null,
        'level3_details' => null,
        'register_number' => null,
        'sequence_count' => null,
        'sequence_number' => null,
        'server_id' => null,
        'transaction_id' => null,
        'street1' => null,
        'zip_code' => null,
        'card_number_last_four_digits' => null,
        'currency_code' => null,
        'bypass_amount_format' => null,
        'shipping_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'card_info_key' => 'card_info_key',
        'hp_plus_key' => 'hp_plus_key',
        'amount' => 'amount',
        'invoice_number' => 'invoice_number',
        'payment_reference_number' => 'payment_reference_number',
        'tip_amount' => 'tip_amount',
        'customer_code' => 'customer_code',
        'purchase_order_number' => 'purchase_order_number',
        'tax_amount' => 'tax_amount',
        'custom_fields' => 'custom_fields',
        'authorization_code' => 'authorization_code',
        'bill_payment' => 'bill_payment',
        'bypass_address_verification_and_card_value_verification' => 'bypass_address_verification_and_card_value_verification',
        'health_care' => 'health_care',
        'merchant_soft_descriptor' => 'merchant_soft_descriptor',
        'force' => 'force',
        'card_verification_number' => 'card_verification_number',
        'cv_presence' => 'cv_presence',
        'entry_mode' => 'entry_mode',
        'external_ip' => 'external_ip',
        'level3_details' => 'level3_details',
        'register_number' => 'register_number',
        'sequence_count' => 'sequence_count',
        'sequence_number' => 'sequence_number',
        'server_id' => 'server_id',
        'transaction_id' => 'transaction_id',
        'street1' => 'street1',
        'zip_code' => 'zip_code',
        'card_number_last_four_digits' => 'card_number_last_four_digits',
        'currency_code' => 'currency_code',
        'bypass_amount_format' => 'bypass_amount_format',
        'shipping_amount' => 'shipping_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'card_info_key' => 'setCardInfoKey',
        'hp_plus_key' => 'setHpPlusKey',
        'amount' => 'setAmount',
        'invoice_number' => 'setInvoiceNumber',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'tip_amount' => 'setTipAmount',
        'customer_code' => 'setCustomerCode',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'tax_amount' => 'setTaxAmount',
        'custom_fields' => 'setCustomFields',
        'authorization_code' => 'setAuthorizationCode',
        'bill_payment' => 'setBillPayment',
        'bypass_address_verification_and_card_value_verification' => 'setBypassAddressVerificationAndCardValueVerification',
        'health_care' => 'setHealthCare',
        'merchant_soft_descriptor' => 'setMerchantSoftDescriptor',
        'force' => 'setForce',
        'card_verification_number' => 'setCardVerificationNumber',
        'cv_presence' => 'setCvPresence',
        'entry_mode' => 'setEntryMode',
        'external_ip' => 'setExternalIp',
        'level3_details' => 'setLevel3Details',
        'register_number' => 'setRegisterNumber',
        'sequence_count' => 'setSequenceCount',
        'sequence_number' => 'setSequenceNumber',
        'server_id' => 'setServerId',
        'transaction_id' => 'setTransactionId',
        'street1' => 'setStreet1',
        'zip_code' => 'setZipCode',
        'card_number_last_four_digits' => 'setCardNumberLastFourDigits',
        'currency_code' => 'setCurrencyCode',
        'bypass_amount_format' => 'setBypassAmountFormat',
        'shipping_amount' => 'setShippingAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'card_info_key' => 'getCardInfoKey',
        'hp_plus_key' => 'getHpPlusKey',
        'amount' => 'getAmount',
        'invoice_number' => 'getInvoiceNumber',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'tip_amount' => 'getTipAmount',
        'customer_code' => 'getCustomerCode',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'tax_amount' => 'getTaxAmount',
        'custom_fields' => 'getCustomFields',
        'authorization_code' => 'getAuthorizationCode',
        'bill_payment' => 'getBillPayment',
        'bypass_address_verification_and_card_value_verification' => 'getBypassAddressVerificationAndCardValueVerification',
        'health_care' => 'getHealthCare',
        'merchant_soft_descriptor' => 'getMerchantSoftDescriptor',
        'force' => 'getForce',
        'card_verification_number' => 'getCardVerificationNumber',
        'cv_presence' => 'getCvPresence',
        'entry_mode' => 'getEntryMode',
        'external_ip' => 'getExternalIp',
        'level3_details' => 'getLevel3Details',
        'register_number' => 'getRegisterNumber',
        'sequence_count' => 'getSequenceCount',
        'sequence_number' => 'getSequenceNumber',
        'server_id' => 'getServerId',
        'transaction_id' => 'getTransactionId',
        'street1' => 'getStreet1',
        'zip_code' => 'getZipCode',
        'card_number_last_four_digits' => 'getCardNumberLastFourDigits',
        'currency_code' => 'getCurrencyCode',
        'bypass_amount_format' => 'getBypassAmountFormat',
        'shipping_amount' => 'getShippingAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_AUTH = 'auth';
    public const TRANSACTION_TYPE_SALE = 'sale';
    public const TRANSACTION_TYPE_ADJUSTMENT = 'adjustment';
    public const TRANSACTION_TYPE_REPEATSALE = 'repeatsale';
    public const TRANSACTION_TYPE_FORCE = 'force';
    public const TRANSACTION_TYPE__RETURN = 'return';
    public const TRANSACTION_TYPE_REVERSAL = 'reversal';
    public const TRANSACTION_TYPE_VOID = 'void';
    public const TRANSACTION_TYPE_CAPTURE = 'capture';
    public const TRANSACTION_TYPE_CAPTUREALL = 'captureall';
    public const BILL_PAYMENT_TRUE = 'true';
    public const BILL_PAYMENT_FALSE = 'false';
    public const BYPASS_ADDRESS_VERIFICATION_AND_CARD_VALUE_VERIFICATION_TRUE = 'true';
    public const BYPASS_ADDRESS_VERIFICATION_AND_CARD_VALUE_VERIFICATION_FALSE = 'false';
    public const FORCE_TRUE = 'true';
    public const FORCE_FALSE = 'false';
    public const CV_PRESENCE_NO_CV_PROVIDED = 'no_cv_provided';
    public const CV_PRESENCE_CV_NOT_SUBMITTED = 'cv_not_submitted';
    public const CV_PRESENCE_CV_SUBMITTED = 'cv_submitted';
    public const CV_PRESENCE_CV_IS_ILLEGIBLE = 'cv_is_illegible';
    public const CV_PRESENCE_CV_NOT_PRESENT_ON_CARD = 'cv_not_present_on_card';
    public const ENTRY_MODE_UNKNOWN = 'UNKNOWN';
    public const ENTRY_MODE_MANUAL = 'MANUAL';
    public const ENTRY_MODE_MAGNETIC_STRIPE = 'MagneticStripe';
    public const ENTRY_MODE_ICC = 'ICC';
    public const ENTRY_MODE_PROXIMITY = 'PROXIMITY';
    public const ENTRY_MODE_FALLBACK = 'FALLBACK';
    public const ENTRY_MODE_NOAIDFALLBACK = 'NOAIDFALLBACK';
    public const BYPASS_AMOUNT_FORMAT_TRUE = 'true';
    public const BYPASS_AMOUNT_FORMAT_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_AUTH,
            self::TRANSACTION_TYPE_SALE,
            self::TRANSACTION_TYPE_ADJUSTMENT,
            self::TRANSACTION_TYPE_REPEATSALE,
            self::TRANSACTION_TYPE_FORCE,
            self::TRANSACTION_TYPE__RETURN,
            self::TRANSACTION_TYPE_REVERSAL,
            self::TRANSACTION_TYPE_VOID,
            self::TRANSACTION_TYPE_CAPTURE,
            self::TRANSACTION_TYPE_CAPTUREALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillPaymentAllowableValues()
    {
        return [
            self::BILL_PAYMENT_TRUE,
            self::BILL_PAYMENT_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBypassAddressVerificationAndCardValueVerificationAllowableValues()
    {
        return [
            self::BYPASS_ADDRESS_VERIFICATION_AND_CARD_VALUE_VERIFICATION_TRUE,
            self::BYPASS_ADDRESS_VERIFICATION_AND_CARD_VALUE_VERIFICATION_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForceAllowableValues()
    {
        return [
            self::FORCE_TRUE,
            self::FORCE_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCvPresenceAllowableValues()
    {
        return [
            self::CV_PRESENCE_NO_CV_PROVIDED,
            self::CV_PRESENCE_CV_NOT_SUBMITTED,
            self::CV_PRESENCE_CV_SUBMITTED,
            self::CV_PRESENCE_CV_IS_ILLEGIBLE,
            self::CV_PRESENCE_CV_NOT_PRESENT_ON_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryModeAllowableValues()
    {
        return [
            self::ENTRY_MODE_UNKNOWN,
            self::ENTRY_MODE_MANUAL,
            self::ENTRY_MODE_MAGNETIC_STRIPE,
            self::ENTRY_MODE_ICC,
            self::ENTRY_MODE_PROXIMITY,
            self::ENTRY_MODE_FALLBACK,
            self::ENTRY_MODE_NOAIDFALLBACK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBypassAmountFormatAllowableValues()
    {
        return [
            self::BYPASS_AMOUNT_FORMAT_TRUE,
            self::BYPASS_AMOUNT_FORMAT_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['card_info_key'] = $data['card_info_key'] ?? null;
        $this->container['hp_plus_key'] = $data['hp_plus_key'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['invoice_number'] = $data['invoice_number'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['tip_amount'] = $data['tip_amount'] ?? null;
        $this->container['customer_code'] = $data['customer_code'] ?? null;
        $this->container['purchase_order_number'] = $data['purchase_order_number'] ?? null;
        $this->container['tax_amount'] = $data['tax_amount'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['authorization_code'] = $data['authorization_code'] ?? null;
        $this->container['bill_payment'] = $data['bill_payment'] ?? null;
        $this->container['bypass_address_verification_and_card_value_verification'] = $data['bypass_address_verification_and_card_value_verification'] ?? null;
        $this->container['health_care'] = $data['health_care'] ?? null;
        $this->container['merchant_soft_descriptor'] = $data['merchant_soft_descriptor'] ?? null;
        $this->container['force'] = $data['force'] ?? null;
        $this->container['card_verification_number'] = $data['card_verification_number'] ?? null;
        $this->container['cv_presence'] = $data['cv_presence'] ?? null;
        $this->container['entry_mode'] = $data['entry_mode'] ?? null;
        $this->container['external_ip'] = $data['external_ip'] ?? null;
        $this->container['level3_details'] = $data['level3_details'] ?? null;
        $this->container['register_number'] = $data['register_number'] ?? null;
        $this->container['sequence_count'] = $data['sequence_count'] ?? null;
        $this->container['sequence_number'] = $data['sequence_number'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['street1'] = $data['street1'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['card_number_last_four_digits'] = $data['card_number_last_four_digits'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['bypass_amount_format'] = $data['bypass_amount_format'] ?? null;
        $this->container['shipping_amount'] = $data['shipping_amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillPaymentAllowableValues();
        if (!is_null($this->container['bill_payment']) && !in_array($this->container['bill_payment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bill_payment', must be one of '%s'",
                $this->container['bill_payment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBypassAddressVerificationAndCardValueVerificationAllowableValues();
        if (!is_null($this->container['bypass_address_verification_and_card_value_verification']) && !in_array($this->container['bypass_address_verification_and_card_value_verification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bypass_address_verification_and_card_value_verification', must be one of '%s'",
                $this->container['bypass_address_verification_and_card_value_verification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($this->container['force']) && !in_array($this->container['force'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'force', must be one of '%s'",
                $this->container['force'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCvPresenceAllowableValues();
        if (!is_null($this->container['cv_presence']) && !in_array($this->container['cv_presence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cv_presence', must be one of '%s'",
                $this->container['cv_presence'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntryModeAllowableValues();
        if (!is_null($this->container['entry_mode']) && !in_array($this->container['entry_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_mode', must be one of '%s'",
                $this->container['entry_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBypassAmountFormatAllowableValues();
        if (!is_null($this->container['bypass_amount_format']) && !in_array($this->container['bypass_amount_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bypass_amount_format', must be one of '%s'",
                $this->container['bypass_amount_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type The type of transaction you wish to create. Valid values are Auth, Sale, Force, RepeatSale, Return, Reversal, Void, Capture and CaptureAll  This field is Mandatory
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets card_info_key
     *
     * @return string|null
     */
    public function getCardInfoKey()
    {
        return $this->container['card_info_key'];
    }

    /**
     * Sets card_info_key
     *
     * @param string|null $card_info_key Unique reference to a Payment Method stored in Paragon platform Card Safe.
     *
     * @return self
     */
    public function setCardInfoKey($card_info_key)
    {
        $this->container['card_info_key'] = $card_info_key;

        return $this;
    }

    /**
     * Gets hp_plus_key
     *
     * @return string|null
     */
    public function getHpPlusKey()
    {
        return $this->container['hp_plus_key'];
    }

    /**
     * Sets hp_plus_key
     *
     * @param string|null $hp_plus_key Hosted Payment Plus Key used to process transaction
     *
     * @return self
     */
    public function setHpPlusKey($hp_plus_key)
    {
        $this->container['hp_plus_key'] = $hp_plus_key;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount $0.00 gt; Amount lt; $1,000,000.00 (DDDDD.CC).
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Identifier assigned by the merchant to locate a specific transaction or multiple transactions (grouped by a single invoice).
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Unique identifier of a transaction, assigned by Paragon platform.   Required for TransType = Force; Return; Reversal; Void; Capture;  Optional for TransType = Auth; Sale; RepeatSale; CaptureAll.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return string|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param string|null $tip_amount Fee (included in Amount) specified by consumer as gratuity for service performed (DDDDD.CC).
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string|null
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string|null $customer_code Identifier assigned by merchant to allow payment processed by Global Payments to be traced to purchase order number.
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string|null $purchase_order_number Identifier assigned by merchant to allow payment processed (by processor other than Global Payments) to be traced to purchase order number.
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return string|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param string|null $tax_amount Fee (added to Amount) to cover cost of sales tax (DDDDD.CC).
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,string>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,string>|null $custom_fields User defined Custom fields for Merchant in Paragon platform.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Authorization/approval code assigned to original transaction by processor.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets bill_payment
     *
     * @return string|null
     */
    public function getBillPayment()
    {
        return $this->container['bill_payment'];
    }

    /**
     * Sets bill_payment
     *
     * @param string|null $bill_payment Indicate (T) transaction accepted for payment on Utility Bill.
     *
     * @return self
     */
    public function setBillPayment($bill_payment)
    {
        $allowedValues = $this->getBillPaymentAllowableValues();
        if (!is_null($bill_payment) && !in_array($bill_payment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bill_payment', must be one of '%s'",
                    $bill_payment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bill_payment'] = $bill_payment;

        return $this;
    }

    /**
     * Gets bypass_address_verification_and_card_value_verification
     *
     * @return string|null
     */
    public function getBypassAddressVerificationAndCardValueVerification()
    {
        return $this->container['bypass_address_verification_and_card_value_verification'];
    }

    /**
     * Sets bypass_address_verification_and_card_value_verification
     *
     * @param string|null $bypass_address_verification_and_card_value_verification Flag used to indicate if the Paragon platform should bypass AVS and CVV validation.
     *
     * @return self
     */
    public function setBypassAddressVerificationAndCardValueVerification($bypass_address_verification_and_card_value_verification)
    {
        $allowedValues = $this->getBypassAddressVerificationAndCardValueVerificationAllowableValues();
        if (!is_null($bypass_address_verification_and_card_value_verification) && !in_array($bypass_address_verification_and_card_value_verification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bypass_address_verification_and_card_value_verification', must be one of '%s'",
                    $bypass_address_verification_and_card_value_verification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bypass_address_verification_and_card_value_verification'] = $bypass_address_verification_and_card_value_verification;

        return $this;
    }

    /**
     * Gets health_care
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\HealthcareDetailsModel|null
     */
    public function getHealthCare()
    {
        return $this->container['health_care'];
    }

    /**
     * Sets health_care
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\HealthcareDetailsModel|null $health_care health_care
     *
     * @return self
     */
    public function setHealthCare($health_care)
    {
        $this->container['health_care'] = $health_care;

        return $this;
    }

    /**
     * Gets merchant_soft_descriptor
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\MerchantSoftDescriptorModel|null
     */
    public function getMerchantSoftDescriptor()
    {
        return $this->container['merchant_soft_descriptor'];
    }

    /**
     * Sets merchant_soft_descriptor
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\MerchantSoftDescriptorModel|null $merchant_soft_descriptor merchant_soft_descriptor
     *
     * @return self
     */
    public function setMerchantSoftDescriptor($merchant_soft_descriptor)
    {
        $this->container['merchant_soft_descriptor'] = $merchant_soft_descriptor;

        return $this;
    }

    /**
     * Gets force
     *
     * @return string|null
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param string|null $force Force (T) Paragon platform to accept duplicate transaction into current batch (ignored by Concord EFS processor).
     *
     * @return self
     */
    public function setForce($force)
    {
        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($force) && !in_array($force, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'force', must be one of '%s'",
                    $force,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['force'] = $force;

        return $this;
    }

    /**
     * Gets card_verification_number
     *
     * @return string|null
     */
    public function getCardVerificationNumber()
    {
        return $this->container['card_verification_number'];
    }

    /**
     * Sets card_verification_number
     *
     * @param string|null $card_verification_number Credit card verification number.
     *
     * @return self
     */
    public function setCardVerificationNumber($card_verification_number)
    {
        $this->container['card_verification_number'] = $card_verification_number;

        return $this;
    }

    /**
     * Gets cv_presence
     *
     * @return string|null
     */
    public function getCvPresence()
    {
        return $this->container['cv_presence'];
    }

    /**
     * Sets cv_presence
     *
     * @param string|null $cv_presence Card verification provided for transaction.
     *
     * @return self
     */
    public function setCvPresence($cv_presence)
    {
        $allowedValues = $this->getCvPresenceAllowableValues();
        if (!is_null($cv_presence) && !in_array($cv_presence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cv_presence', must be one of '%s'",
                    $cv_presence,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cv_presence'] = $cv_presence;

        return $this;
    }

    /**
     * Gets entry_mode
     *
     * @return string|null
     */
    public function getEntryMode()
    {
        return $this->container['entry_mode'];
    }

    /**
     * Sets entry_mode
     *
     * @param string|null $entry_mode Indicate how merchant obtained values from credit card, as follows:   UNKNOWN; MANUAL MagneticStripe; ICC; PROXIMITY.  Required when MagData or EMVData fields are populated.
     *
     * @return self
     */
    public function setEntryMode($entry_mode)
    {
        $allowedValues = $this->getEntryModeAllowableValues();
        if (!is_null($entry_mode) && !in_array($entry_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_mode', must be one of '%s'",
                    $entry_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_mode'] = $entry_mode;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string|null $external_ip Originating IP address to use for logging and IP filtering.
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets level3_details
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\Level3DetailsModel|null
     */
    public function getLevel3Details()
    {
        return $this->container['level3_details'];
    }

    /**
     * Sets level3_details
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\Level3DetailsModel|null $level3_details level3_details
     *
     * @return self
     */
    public function setLevel3Details($level3_details)
    {
        $this->container['level3_details'] = $level3_details;

        return $this;
    }

    /**
     * Gets register_number
     *
     * @return string|null
     */
    public function getRegisterNumber()
    {
        return $this->container['register_number'];
    }

    /**
     * Sets register_number
     *
     * @param string|null $register_number A string that uniquely identifies the register, terminal, or computer on which transaction was performed.
     *
     * @return self
     */
    public function setRegisterNumber($register_number)
    {
        $this->container['register_number'] = $register_number;

        return $this;
    }

    /**
     * Gets sequence_count
     *
     * @return string|null
     */
    public function getSequenceCount()
    {
        return $this->container['sequence_count'];
    }

    /**
     * Sets sequence_count
     *
     * @param string|null $sequence_count Total number of payments to be processed on a repeat sale or Recurring Payment Agreement.
     *
     * @return self
     */
    public function setSequenceCount($sequence_count)
    {
        $this->container['sequence_count'] = $sequence_count;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return string|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string|null $sequence_number The order in which a payment was processed on a repeat sale or Recurring Payment Agreement.
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id Unique identifier of Paragon platform used to process transaction.
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Numeric value assigned by Merchant to identify a transaction (for use as alternative to Paragon platform-assigned PNRef).
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 House number and Street name of a cardholder's billing address.
     *
     * @return self
     */
    public function setStreet1($street1)
    {
        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code ZIP or Postal Code of cardholder's billing address.
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets card_number_last_four_digits
     *
     * @return string|null
     */
    public function getCardNumberLastFourDigits()
    {
        return $this->container['card_number_last_four_digits'];
    }

    /**
     * Sets card_number_last_four_digits
     *
     * @param string|null $card_number_last_four_digits Last 4 digits of card number.
     *
     * @return self
     */
    public function setCardNumberLastFourDigits($card_number_last_four_digits)
    {
        $this->container['card_number_last_four_digits'] = $card_number_last_four_digits;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The three-letter ISO currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets bypass_amount_format
     *
     * @return string|null
     */
    public function getBypassAmountFormat()
    {
        return $this->container['bypass_amount_format'];
    }

    /**
     * Sets bypass_amount_format
     *
     * @param string|null $bypass_amount_format Flag used to indicate if the Paragon platform should bypass amount format validation
     *
     * @return self
     */
    public function setBypassAmountFormat($bypass_amount_format)
    {
        $allowedValues = $this->getBypassAmountFormatAllowableValues();
        if (!is_null($bypass_amount_format) && !in_array($bypass_amount_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bypass_amount_format', must be one of '%s'",
                    $bypass_amount_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bypass_amount_format'] = $bypass_amount_format;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return string|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param string|null $shipping_amount Fee (added to Amount) to cover cost of shipping (DDDDD.CC).
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


