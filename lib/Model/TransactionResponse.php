<?php
/**
 * TransactionResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'string',
        'account_type' => 'string',
        'approval_code' => 'string',
        'authorization_code' => 'string',
        'authorized_amount' => 'string',
        'authorized_date' => 'string',
        'avs_result_code' => 'string',
        'avs_result_message' => 'string',
        'balance_amount' => 'string',
        'batch_id' => 'string',
        'batch_number' => 'string',
        'batch_sequence_number' => 'string',
        'card_info_key' => 'string',
        'card_key' => 'string',
        'card_number_masked' => 'string',
        'cash_back_amount' => 'string',
        'check_key' => 'string',
        'check_number' => 'string',
        'check_type' => 'string',
        'commercial_card' => 'string',
        'contract_key' => 'string',
        'customer_id' => 'string',
        'customer_key' => 'string',
        'customer_reference' => 'string',
        'cv_result_code' => 'string',
        'cv_result_message' => 'string',
        'date' => 'string',
        'date_of_birth' => 'string',
        'driver_license' => 'string',
        'email' => 'string',
        'expiration_date' => 'string',
        'gateway_id' => 'string',
        'host_date' => 'string',
        'host_reference_number' => 'string',
        'host_time' => 'string',
        'invoice_number' => 'string',
        'ip_address' => 'string',
        'last_update_date' => 'string',
        'level3_amount' => 'string',
        'list_of_responses' => '\DCarbone\ParagonSolutionsPHPSDK\Model\TransactionResponse[]',
        'magnetic_ink_check_reader' => 'string',
        'manual' => 'string',
        'name_on_card' => 'string',
        'name_on_check' => 'string',
        'original_payment_reference_number' => 'string',
        'payment_reference_number' => 'string',
        'payment_type' => 'string',
        'phone' => 'string',
        'processor_id' => 'string',
        'raw_magnetic_ink_check_reader' => 'string',
        'receipt_count' => 'string',
        'register_number' => 'string',
        'reseller_id' => 'string',
        'result' => 'string',
        'sub_result' => 'string',
        'result_description' => 'string',
        'result_message' => 'string',
        'result_message_1' => 'string',
        'result_message_2' => 'string',
        'reversal_flag' => 'string',
        'sequence_number' => 'string',
        'settlement_date' => 'string',
        'settlement_flag' => 'string',
        'settlement_key' => 'string',
        'settlement_message' => 'string',
        'social_security_number' => 'string',
        'state_code' => 'string',
        'street1' => 'string',
        'street_match' => 'string',
        'surcharge_amount' => 'string',
        'tip_amount' => 'string',
        'total_amount' => 'string',
        'transaction_id' => 'string',
        'transaction_type' => 'string',
        'transit_number' => 'string',
        'transport_endpoint' => 'string',
        'transport_method' => 'string',
        'type' => 'string',
        'username' => 'string',
        'void_flag' => 'string',
        'zip_code' => 'string',
        'zip_match' => 'string',
        'last_ach_status_update_date' => 'string',
        'card_type' => 'string',
        'partial_reversal_flag' => 'string',
        'requested_amount' => 'string',
        'approved_amount' => 'string',
        'recurring_id' => 'string',
        'merchant_name' => 'string',
        'benefit_expiration_date' => 'string',
        'ewic_balance' => '\DCarbone\ParagonSolutionsPHPSDK\Model\EWICBalanceResponseModel[]',
        'currency_code' => 'string',
        'emv_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'account_type' => null,
        'approval_code' => null,
        'authorization_code' => null,
        'authorized_amount' => null,
        'authorized_date' => null,
        'avs_result_code' => null,
        'avs_result_message' => null,
        'balance_amount' => null,
        'batch_id' => null,
        'batch_number' => null,
        'batch_sequence_number' => null,
        'card_info_key' => null,
        'card_key' => null,
        'card_number_masked' => null,
        'cash_back_amount' => null,
        'check_key' => null,
        'check_number' => null,
        'check_type' => null,
        'commercial_card' => null,
        'contract_key' => null,
        'customer_id' => null,
        'customer_key' => null,
        'customer_reference' => null,
        'cv_result_code' => null,
        'cv_result_message' => null,
        'date' => null,
        'date_of_birth' => null,
        'driver_license' => null,
        'email' => null,
        'expiration_date' => null,
        'gateway_id' => null,
        'host_date' => null,
        'host_reference_number' => null,
        'host_time' => null,
        'invoice_number' => null,
        'ip_address' => null,
        'last_update_date' => null,
        'level3_amount' => null,
        'list_of_responses' => null,
        'magnetic_ink_check_reader' => null,
        'manual' => null,
        'name_on_card' => null,
        'name_on_check' => null,
        'original_payment_reference_number' => null,
        'payment_reference_number' => null,
        'payment_type' => null,
        'phone' => null,
        'processor_id' => null,
        'raw_magnetic_ink_check_reader' => null,
        'receipt_count' => null,
        'register_number' => null,
        'reseller_id' => null,
        'result' => null,
        'sub_result' => null,
        'result_description' => null,
        'result_message' => null,
        'result_message_1' => null,
        'result_message_2' => null,
        'reversal_flag' => null,
        'sequence_number' => null,
        'settlement_date' => null,
        'settlement_flag' => null,
        'settlement_key' => null,
        'settlement_message' => null,
        'social_security_number' => null,
        'state_code' => null,
        'street1' => null,
        'street_match' => null,
        'surcharge_amount' => null,
        'tip_amount' => null,
        'total_amount' => null,
        'transaction_id' => null,
        'transaction_type' => null,
        'transit_number' => null,
        'transport_endpoint' => null,
        'transport_method' => null,
        'type' => null,
        'username' => null,
        'void_flag' => null,
        'zip_code' => null,
        'zip_match' => null,
        'last_ach_status_update_date' => null,
        'card_type' => null,
        'partial_reversal_flag' => null,
        'requested_amount' => null,
        'approved_amount' => null,
        'recurring_id' => null,
        'merchant_name' => null,
        'benefit_expiration_date' => null,
        'ewic_balance' => null,
        'currency_code' => null,
        'emv_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'account_number',
        'account_type' => 'account_type',
        'approval_code' => 'approval_code',
        'authorization_code' => 'authorization_code',
        'authorized_amount' => 'authorized_amount',
        'authorized_date' => 'authorized_date',
        'avs_result_code' => 'avs_result_code',
        'avs_result_message' => 'avs_result_message',
        'balance_amount' => 'balance_amount',
        'batch_id' => 'batch_id',
        'batch_number' => 'batch_number',
        'batch_sequence_number' => 'batch_sequence_number',
        'card_info_key' => 'card_info_key',
        'card_key' => 'card_key',
        'card_number_masked' => 'card_number_masked',
        'cash_back_amount' => 'cash_back_amount',
        'check_key' => 'check_key',
        'check_number' => 'check_number',
        'check_type' => 'check_type',
        'commercial_card' => 'commercial_card',
        'contract_key' => 'contract_key',
        'customer_id' => 'customer_id',
        'customer_key' => 'customer_key',
        'customer_reference' => 'customer_reference',
        'cv_result_code' => 'cv_result_code',
        'cv_result_message' => 'cv_result_message',
        'date' => 'date',
        'date_of_birth' => 'date_of_birth',
        'driver_license' => 'driver_license',
        'email' => 'email',
        'expiration_date' => 'expiration_date',
        'gateway_id' => 'gateway_id',
        'host_date' => 'host_date',
        'host_reference_number' => 'host_reference_number',
        'host_time' => 'host_time',
        'invoice_number' => 'invoice_number',
        'ip_address' => 'ip_address',
        'last_update_date' => 'last_update_date',
        'level3_amount' => 'level3_amount',
        'list_of_responses' => 'list_of_responses',
        'magnetic_ink_check_reader' => 'magnetic_ink_check_reader',
        'manual' => 'manual',
        'name_on_card' => 'name_on_card',
        'name_on_check' => 'name_on_check',
        'original_payment_reference_number' => 'original_payment_reference_number',
        'payment_reference_number' => 'payment_reference_number',
        'payment_type' => 'payment_type',
        'phone' => 'phone',
        'processor_id' => 'processor_id',
        'raw_magnetic_ink_check_reader' => 'raw_magnetic_ink_check_reader',
        'receipt_count' => 'receipt_count',
        'register_number' => 'register_number',
        'reseller_id' => 'reseller_id',
        'result' => 'result',
        'sub_result' => 'sub_result',
        'result_description' => 'result_description',
        'result_message' => 'result_message',
        'result_message_1' => 'result_message_1',
        'result_message_2' => 'result_message_2',
        'reversal_flag' => 'reversal_flag',
        'sequence_number' => 'sequence_number',
        'settlement_date' => 'settlement_date',
        'settlement_flag' => 'settlement_flag',
        'settlement_key' => 'settlement_key',
        'settlement_message' => 'settlement_message',
        'social_security_number' => 'social_security_number',
        'state_code' => 'state_code',
        'street1' => 'street1',
        'street_match' => 'street_match',
        'surcharge_amount' => 'surcharge_amount',
        'tip_amount' => 'tip_amount',
        'total_amount' => 'total_amount',
        'transaction_id' => 'transaction_id',
        'transaction_type' => 'transaction_type',
        'transit_number' => 'transit_number',
        'transport_endpoint' => 'transport_endpoint',
        'transport_method' => 'transport_method',
        'type' => 'type',
        'username' => 'username',
        'void_flag' => 'void_flag',
        'zip_code' => 'zip_code',
        'zip_match' => 'zip_match',
        'last_ach_status_update_date' => 'last_ach_status_update_date',
        'card_type' => 'card_type',
        'partial_reversal_flag' => 'partial_reversal_flag',
        'requested_amount' => 'requested_amount',
        'approved_amount' => 'approved_amount',
        'recurring_id' => 'recurring_id',
        'merchant_name' => 'merchant_name',
        'benefit_expiration_date' => 'benefit_expiration_date',
        'ewic_balance' => 'ewic_balance',
        'currency_code' => 'currency_code',
        'emv_data' => 'emv_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'account_type' => 'setAccountType',
        'approval_code' => 'setApprovalCode',
        'authorization_code' => 'setAuthorizationCode',
        'authorized_amount' => 'setAuthorizedAmount',
        'authorized_date' => 'setAuthorizedDate',
        'avs_result_code' => 'setAvsResultCode',
        'avs_result_message' => 'setAvsResultMessage',
        'balance_amount' => 'setBalanceAmount',
        'batch_id' => 'setBatchId',
        'batch_number' => 'setBatchNumber',
        'batch_sequence_number' => 'setBatchSequenceNumber',
        'card_info_key' => 'setCardInfoKey',
        'card_key' => 'setCardKey',
        'card_number_masked' => 'setCardNumberMasked',
        'cash_back_amount' => 'setCashBackAmount',
        'check_key' => 'setCheckKey',
        'check_number' => 'setCheckNumber',
        'check_type' => 'setCheckType',
        'commercial_card' => 'setCommercialCard',
        'contract_key' => 'setContractKey',
        'customer_id' => 'setCustomerId',
        'customer_key' => 'setCustomerKey',
        'customer_reference' => 'setCustomerReference',
        'cv_result_code' => 'setCvResultCode',
        'cv_result_message' => 'setCvResultMessage',
        'date' => 'setDate',
        'date_of_birth' => 'setDateOfBirth',
        'driver_license' => 'setDriverLicense',
        'email' => 'setEmail',
        'expiration_date' => 'setExpirationDate',
        'gateway_id' => 'setGatewayId',
        'host_date' => 'setHostDate',
        'host_reference_number' => 'setHostReferenceNumber',
        'host_time' => 'setHostTime',
        'invoice_number' => 'setInvoiceNumber',
        'ip_address' => 'setIpAddress',
        'last_update_date' => 'setLastUpdateDate',
        'level3_amount' => 'setLevel3Amount',
        'list_of_responses' => 'setListOfResponses',
        'magnetic_ink_check_reader' => 'setMagneticInkCheckReader',
        'manual' => 'setManual',
        'name_on_card' => 'setNameOnCard',
        'name_on_check' => 'setNameOnCheck',
        'original_payment_reference_number' => 'setOriginalPaymentReferenceNumber',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'payment_type' => 'setPaymentType',
        'phone' => 'setPhone',
        'processor_id' => 'setProcessorId',
        'raw_magnetic_ink_check_reader' => 'setRawMagneticInkCheckReader',
        'receipt_count' => 'setReceiptCount',
        'register_number' => 'setRegisterNumber',
        'reseller_id' => 'setResellerId',
        'result' => 'setResult',
        'sub_result' => 'setSubResult',
        'result_description' => 'setResultDescription',
        'result_message' => 'setResultMessage',
        'result_message_1' => 'setResultMessage1',
        'result_message_2' => 'setResultMessage2',
        'reversal_flag' => 'setReversalFlag',
        'sequence_number' => 'setSequenceNumber',
        'settlement_date' => 'setSettlementDate',
        'settlement_flag' => 'setSettlementFlag',
        'settlement_key' => 'setSettlementKey',
        'settlement_message' => 'setSettlementMessage',
        'social_security_number' => 'setSocialSecurityNumber',
        'state_code' => 'setStateCode',
        'street1' => 'setStreet1',
        'street_match' => 'setStreetMatch',
        'surcharge_amount' => 'setSurchargeAmount',
        'tip_amount' => 'setTipAmount',
        'total_amount' => 'setTotalAmount',
        'transaction_id' => 'setTransactionId',
        'transaction_type' => 'setTransactionType',
        'transit_number' => 'setTransitNumber',
        'transport_endpoint' => 'setTransportEndpoint',
        'transport_method' => 'setTransportMethod',
        'type' => 'setType',
        'username' => 'setUsername',
        'void_flag' => 'setVoidFlag',
        'zip_code' => 'setZipCode',
        'zip_match' => 'setZipMatch',
        'last_ach_status_update_date' => 'setLastAchStatusUpdateDate',
        'card_type' => 'setCardType',
        'partial_reversal_flag' => 'setPartialReversalFlag',
        'requested_amount' => 'setRequestedAmount',
        'approved_amount' => 'setApprovedAmount',
        'recurring_id' => 'setRecurringId',
        'merchant_name' => 'setMerchantName',
        'benefit_expiration_date' => 'setBenefitExpirationDate',
        'ewic_balance' => 'setEwicBalance',
        'currency_code' => 'setCurrencyCode',
        'emv_data' => 'setEmvData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'account_type' => 'getAccountType',
        'approval_code' => 'getApprovalCode',
        'authorization_code' => 'getAuthorizationCode',
        'authorized_amount' => 'getAuthorizedAmount',
        'authorized_date' => 'getAuthorizedDate',
        'avs_result_code' => 'getAvsResultCode',
        'avs_result_message' => 'getAvsResultMessage',
        'balance_amount' => 'getBalanceAmount',
        'batch_id' => 'getBatchId',
        'batch_number' => 'getBatchNumber',
        'batch_sequence_number' => 'getBatchSequenceNumber',
        'card_info_key' => 'getCardInfoKey',
        'card_key' => 'getCardKey',
        'card_number_masked' => 'getCardNumberMasked',
        'cash_back_amount' => 'getCashBackAmount',
        'check_key' => 'getCheckKey',
        'check_number' => 'getCheckNumber',
        'check_type' => 'getCheckType',
        'commercial_card' => 'getCommercialCard',
        'contract_key' => 'getContractKey',
        'customer_id' => 'getCustomerId',
        'customer_key' => 'getCustomerKey',
        'customer_reference' => 'getCustomerReference',
        'cv_result_code' => 'getCvResultCode',
        'cv_result_message' => 'getCvResultMessage',
        'date' => 'getDate',
        'date_of_birth' => 'getDateOfBirth',
        'driver_license' => 'getDriverLicense',
        'email' => 'getEmail',
        'expiration_date' => 'getExpirationDate',
        'gateway_id' => 'getGatewayId',
        'host_date' => 'getHostDate',
        'host_reference_number' => 'getHostReferenceNumber',
        'host_time' => 'getHostTime',
        'invoice_number' => 'getInvoiceNumber',
        'ip_address' => 'getIpAddress',
        'last_update_date' => 'getLastUpdateDate',
        'level3_amount' => 'getLevel3Amount',
        'list_of_responses' => 'getListOfResponses',
        'magnetic_ink_check_reader' => 'getMagneticInkCheckReader',
        'manual' => 'getManual',
        'name_on_card' => 'getNameOnCard',
        'name_on_check' => 'getNameOnCheck',
        'original_payment_reference_number' => 'getOriginalPaymentReferenceNumber',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'payment_type' => 'getPaymentType',
        'phone' => 'getPhone',
        'processor_id' => 'getProcessorId',
        'raw_magnetic_ink_check_reader' => 'getRawMagneticInkCheckReader',
        'receipt_count' => 'getReceiptCount',
        'register_number' => 'getRegisterNumber',
        'reseller_id' => 'getResellerId',
        'result' => 'getResult',
        'sub_result' => 'getSubResult',
        'result_description' => 'getResultDescription',
        'result_message' => 'getResultMessage',
        'result_message_1' => 'getResultMessage1',
        'result_message_2' => 'getResultMessage2',
        'reversal_flag' => 'getReversalFlag',
        'sequence_number' => 'getSequenceNumber',
        'settlement_date' => 'getSettlementDate',
        'settlement_flag' => 'getSettlementFlag',
        'settlement_key' => 'getSettlementKey',
        'settlement_message' => 'getSettlementMessage',
        'social_security_number' => 'getSocialSecurityNumber',
        'state_code' => 'getStateCode',
        'street1' => 'getStreet1',
        'street_match' => 'getStreetMatch',
        'surcharge_amount' => 'getSurchargeAmount',
        'tip_amount' => 'getTipAmount',
        'total_amount' => 'getTotalAmount',
        'transaction_id' => 'getTransactionId',
        'transaction_type' => 'getTransactionType',
        'transit_number' => 'getTransitNumber',
        'transport_endpoint' => 'getTransportEndpoint',
        'transport_method' => 'getTransportMethod',
        'type' => 'getType',
        'username' => 'getUsername',
        'void_flag' => 'getVoidFlag',
        'zip_code' => 'getZipCode',
        'zip_match' => 'getZipMatch',
        'last_ach_status_update_date' => 'getLastAchStatusUpdateDate',
        'card_type' => 'getCardType',
        'partial_reversal_flag' => 'getPartialReversalFlag',
        'requested_amount' => 'getRequestedAmount',
        'approved_amount' => 'getApprovedAmount',
        'recurring_id' => 'getRecurringId',
        'merchant_name' => 'getMerchantName',
        'benefit_expiration_date' => 'getBenefitExpirationDate',
        'ewic_balance' => 'getEwicBalance',
        'currency_code' => 'getCurrencyCode',
        'emv_data' => 'getEmvData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['approval_code'] = $data['approval_code'] ?? null;
        $this->container['authorization_code'] = $data['authorization_code'] ?? null;
        $this->container['authorized_amount'] = $data['authorized_amount'] ?? null;
        $this->container['authorized_date'] = $data['authorized_date'] ?? null;
        $this->container['avs_result_code'] = $data['avs_result_code'] ?? null;
        $this->container['avs_result_message'] = $data['avs_result_message'] ?? null;
        $this->container['balance_amount'] = $data['balance_amount'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['batch_number'] = $data['batch_number'] ?? null;
        $this->container['batch_sequence_number'] = $data['batch_sequence_number'] ?? null;
        $this->container['card_info_key'] = $data['card_info_key'] ?? null;
        $this->container['card_key'] = $data['card_key'] ?? null;
        $this->container['card_number_masked'] = $data['card_number_masked'] ?? null;
        $this->container['cash_back_amount'] = $data['cash_back_amount'] ?? null;
        $this->container['check_key'] = $data['check_key'] ?? null;
        $this->container['check_number'] = $data['check_number'] ?? null;
        $this->container['check_type'] = $data['check_type'] ?? null;
        $this->container['commercial_card'] = $data['commercial_card'] ?? null;
        $this->container['contract_key'] = $data['contract_key'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_key'] = $data['customer_key'] ?? null;
        $this->container['customer_reference'] = $data['customer_reference'] ?? null;
        $this->container['cv_result_code'] = $data['cv_result_code'] ?? null;
        $this->container['cv_result_message'] = $data['cv_result_message'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['date_of_birth'] = $data['date_of_birth'] ?? null;
        $this->container['driver_license'] = $data['driver_license'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['gateway_id'] = $data['gateway_id'] ?? null;
        $this->container['host_date'] = $data['host_date'] ?? null;
        $this->container['host_reference_number'] = $data['host_reference_number'] ?? null;
        $this->container['host_time'] = $data['host_time'] ?? null;
        $this->container['invoice_number'] = $data['invoice_number'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['last_update_date'] = $data['last_update_date'] ?? null;
        $this->container['level3_amount'] = $data['level3_amount'] ?? null;
        $this->container['list_of_responses'] = $data['list_of_responses'] ?? null;
        $this->container['magnetic_ink_check_reader'] = $data['magnetic_ink_check_reader'] ?? null;
        $this->container['manual'] = $data['manual'] ?? null;
        $this->container['name_on_card'] = $data['name_on_card'] ?? null;
        $this->container['name_on_check'] = $data['name_on_check'] ?? null;
        $this->container['original_payment_reference_number'] = $data['original_payment_reference_number'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['payment_type'] = $data['payment_type'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['processor_id'] = $data['processor_id'] ?? null;
        $this->container['raw_magnetic_ink_check_reader'] = $data['raw_magnetic_ink_check_reader'] ?? null;
        $this->container['receipt_count'] = $data['receipt_count'] ?? null;
        $this->container['register_number'] = $data['register_number'] ?? null;
        $this->container['reseller_id'] = $data['reseller_id'] ?? null;
        $this->container['result'] = $data['result'] ?? null;
        $this->container['sub_result'] = $data['sub_result'] ?? null;
        $this->container['result_description'] = $data['result_description'] ?? null;
        $this->container['result_message'] = $data['result_message'] ?? null;
        $this->container['result_message_1'] = $data['result_message_1'] ?? null;
        $this->container['result_message_2'] = $data['result_message_2'] ?? null;
        $this->container['reversal_flag'] = $data['reversal_flag'] ?? null;
        $this->container['sequence_number'] = $data['sequence_number'] ?? null;
        $this->container['settlement_date'] = $data['settlement_date'] ?? null;
        $this->container['settlement_flag'] = $data['settlement_flag'] ?? null;
        $this->container['settlement_key'] = $data['settlement_key'] ?? null;
        $this->container['settlement_message'] = $data['settlement_message'] ?? null;
        $this->container['social_security_number'] = $data['social_security_number'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['street1'] = $data['street1'] ?? null;
        $this->container['street_match'] = $data['street_match'] ?? null;
        $this->container['surcharge_amount'] = $data['surcharge_amount'] ?? null;
        $this->container['tip_amount'] = $data['tip_amount'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['transit_number'] = $data['transit_number'] ?? null;
        $this->container['transport_endpoint'] = $data['transport_endpoint'] ?? null;
        $this->container['transport_method'] = $data['transport_method'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['void_flag'] = $data['void_flag'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['zip_match'] = $data['zip_match'] ?? null;
        $this->container['last_ach_status_update_date'] = $data['last_ach_status_update_date'] ?? null;
        $this->container['card_type'] = $data['card_type'] ?? null;
        $this->container['partial_reversal_flag'] = $data['partial_reversal_flag'] ?? null;
        $this->container['requested_amount'] = $data['requested_amount'] ?? null;
        $this->container['approved_amount'] = $data['approved_amount'] ?? null;
        $this->container['recurring_id'] = $data['recurring_id'] ?? null;
        $this->container['merchant_name'] = $data['merchant_name'] ?? null;
        $this->container['benefit_expiration_date'] = $data['benefit_expiration_date'] ?? null;
        $this->container['ewic_balance'] = $data['ewic_balance'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['emv_data'] = $data['emv_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number For check transactions:Check account number used to process transaction.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type For Card transaction it will denote brand of card used. For check transactions: Valid Account Type values are Checking or Savings.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code Result code returned from the payment processor.
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Authorization/approval code assigned to original transaction by processor.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets authorized_amount
     *
     * @return string|null
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorized_amount'];
    }

    /**
     * Sets authorized_amount
     *
     * @param string|null $authorized_amount Authorized amount for a card transaction.
     *
     * @return self
     */
    public function setAuthorizedAmount($authorized_amount)
    {
        $this->container['authorized_amount'] = $authorized_amount;

        return $this;
    }

    /**
     * Gets authorized_date
     *
     * @return string|null
     */
    public function getAuthorizedDate()
    {
        return $this->container['authorized_date'];
    }

    /**
     * Sets authorized_date
     *
     * @param string|null $authorized_date Date of Authorization
     *
     * @return self
     */
    public function setAuthorizedDate($authorized_date)
    {
        $this->container['authorized_date'] = $authorized_date;

        return $this;
    }

    /**
     * Gets avs_result_code
     *
     * @return string|null
     */
    public function getAvsResultCode()
    {
        return $this->container['avs_result_code'];
    }

    /**
     * Sets avs_result_code
     *
     * @param string|null $avs_result_code Response code returned from Address Verification Service for card used to process transaction.
     *
     * @return self
     */
    public function setAvsResultCode($avs_result_code)
    {
        $this->container['avs_result_code'] = $avs_result_code;

        return $this;
    }

    /**
     * Gets avs_result_message
     *
     * @return string|null
     */
    public function getAvsResultMessage()
    {
        return $this->container['avs_result_message'];
    }

    /**
     * Sets avs_result_message
     *
     * @param string|null $avs_result_message Response text returned from Address Verification Service for card used to process transaction.
     *
     * @return self
     */
    public function setAvsResultMessage($avs_result_message)
    {
        $this->container['avs_result_message'] = $avs_result_message;

        return $this;
    }

    /**
     * Gets balance_amount
     *
     * @return string|null
     */
    public function getBalanceAmount()
    {
        return $this->container['balance_amount'];
    }

    /**
     * Sets balance_amount
     *
     * @param string|null $balance_amount Balance remaining on method used to process transaction.
     *
     * @return self
     */
    public function setBalanceAmount($balance_amount)
    {
        $this->container['balance_amount'] = $balance_amount;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string|null $batch_id Batch number for the transaction created by the gateway.
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number Batch number for  the transaction (returned by the payment processor).
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets batch_sequence_number
     *
     * @return string|null
     */
    public function getBatchSequenceNumber()
    {
        return $this->container['batch_sequence_number'];
    }

    /**
     * Sets batch_sequence_number
     *
     * @param string|null $batch_sequence_number A sequential batch number created by the gateway for the transaction.
     *
     * @return self
     */
    public function setBatchSequenceNumber($batch_sequence_number)
    {
        $this->container['batch_sequence_number'] = $batch_sequence_number;

        return $this;
    }

    /**
     * Gets card_info_key
     *
     * @return string|null
     */
    public function getCardInfoKey()
    {
        return $this->container['card_info_key'];
    }

    /**
     * Sets card_info_key
     *
     * @param string|null $card_info_key Unique identifier assigned by Paragon platform to card used to process transaction.
     *
     * @return self
     */
    public function setCardInfoKey($card_info_key)
    {
        $this->container['card_info_key'] = $card_info_key;

        return $this;
    }

    /**
     * Gets card_key
     *
     * @return string|null
     */
    public function getCardKey()
    {
        return $this->container['card_key'];
    }

    /**
     * Sets card_key
     *
     * @param string|null $card_key Unique identifier assigned by Paragon platform to card used to process transaction.
     *
     * @return self
     */
    public function setCardKey($card_key)
    {
        $this->container['card_key'] = $card_key;

        return $this;
    }

    /**
     * Gets card_number_masked
     *
     * @return string|null
     */
    public function getCardNumberMasked()
    {
        return $this->container['card_number_masked'];
    }

    /**
     * Sets card_number_masked
     *
     * @param string|null $card_number_masked Masked card number submitted during card transaction.
     *
     * @return self
     */
    public function setCardNumberMasked($card_number_masked)
    {
        $this->container['card_number_masked'] = $card_number_masked;

        return $this;
    }

    /**
     * Gets cash_back_amount
     *
     * @return string|null
     */
    public function getCashBackAmount()
    {
        return $this->container['cash_back_amount'];
    }

    /**
     * Sets cash_back_amount
     *
     * @param string|null $cash_back_amount Amount of cash returned for a debit or EBT card transaction.
     *
     * @return self
     */
    public function setCashBackAmount($cash_back_amount)
    {
        $this->container['cash_back_amount'] = $cash_back_amount;

        return $this;
    }

    /**
     * Gets check_key
     *
     * @return string|null
     */
    public function getCheckKey()
    {
        return $this->container['check_key'];
    }

    /**
     * Sets check_key
     *
     * @param string|null $check_key Unique identifier assigned by Paragon platform to check used to process transaction.
     *
     * @return self
     */
    public function setCheckKey($check_key)
    {
        $this->container['check_key'] = $check_key;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number Unique identifier of Check written or drafted on Checking account.
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return string|null
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param string|null $check_type For check transactions: Checking Account Type values are Personal or Business.
     *
     * @return self
     */
    public function setCheckType($check_type)
    {
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets commercial_card
     *
     * @return string|null
     */
    public function getCommercialCard()
    {
        return $this->container['commercial_card'];
    }

    /**
     * Sets commercial_card
     *
     * @param string|null $commercial_card Commercial card indicator (from the Payment Processor) - True, False.
     *
     * @return self
     */
    public function setCommercialCard($commercial_card)
    {
        $this->container['commercial_card'] = $commercial_card;

        return $this;
    }

    /**
     * Gets contract_key
     *
     * @return string|null
     */
    public function getContractKey()
    {
        return $this->container['contract_key'];
    }

    /**
     * Sets contract_key
     *
     * @param string|null $contract_key Unique identifier assigned by Paragon platform to contract used to process transaction.
     *
     * @return self
     */
    public function setContractKey($contract_key)
    {
        $this->container['contract_key'] = $contract_key;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Identifier assigned to a Customer by a Merchant.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_key
     *
     * @return string|null
     */
    public function getCustomerKey()
    {
        return $this->container['customer_key'];
    }

    /**
     * Sets customer_key
     *
     * @param string|null $customer_key Unique identifier assigned by Paragon platform to a customer associated with the processed transaction.
     *
     * @return self
     */
    public function setCustomerKey($customer_key)
    {
        $this->container['customer_key'] = $customer_key;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string|null
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string|null $customer_reference A reference number associated with the transaction.
     *
     * @return self
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets cv_result_code
     *
     * @return string|null
     */
    public function getCvResultCode()
    {
        return $this->container['cv_result_code'];
    }

    /**
     * Sets cv_result_code
     *
     * @param string|null $cv_result_code Response code returned by Card Validation (from payment processor).
     *
     * @return self
     */
    public function setCvResultCode($cv_result_code)
    {
        $this->container['cv_result_code'] = $cv_result_code;

        return $this;
    }

    /**
     * Gets cv_result_message
     *
     * @return string|null
     */
    public function getCvResultMessage()
    {
        return $this->container['cv_result_message'];
    }

    /**
     * Sets cv_result_message
     *
     * @param string|null $cv_result_message Response text returned by Card Validation (from payment processor).
     *
     * @return self
     */
    public function setCvResultMessage($cv_result_message)
    {
        $this->container['cv_result_message'] = $cv_result_message;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date and time on which transaction processed by Paragon platform
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth Date of birth of the account holder
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets driver_license
     *
     * @return string|null
     */
    public function getDriverLicense()
    {
        return $this->container['driver_license'];
    }

    /**
     * Sets driver_license
     *
     * @param string|null $driver_license Driver license number of the account holder
     *
     * @return self
     */
    public function setDriverLicense($driver_license)
    {
        $this->container['driver_license'] = $driver_license;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email id of the account holder
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Card expiration date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets gateway_id
     *
     * @return string|null
     */
    public function getGatewayId()
    {
        return $this->container['gateway_id'];
    }

    /**
     * Sets gateway_id
     *
     * @param string|null $gateway_id Gateway ID for the processing merchant.
     *
     * @return self
     */
    public function setGatewayId($gateway_id)
    {
        $this->container['gateway_id'] = $gateway_id;

        return $this;
    }

    /**
     * Gets host_date
     *
     * @return string|null
     */
    public function getHostDate()
    {
        return $this->container['host_date'];
    }

    /**
     * Sets host_date
     *
     * @param string|null $host_date Date on which transaction processed by payment processor.
     *
     * @return self
     */
    public function setHostDate($host_date)
    {
        $this->container['host_date'] = $host_date;

        return $this;
    }

    /**
     * Gets host_reference_number
     *
     * @return string|null
     */
    public function getHostReferenceNumber()
    {
        return $this->container['host_reference_number'];
    }

    /**
     * Sets host_reference_number
     *
     * @param string|null $host_reference_number Unique identifier for transaction (assigned by payment processor).
     *
     * @return self
     */
    public function setHostReferenceNumber($host_reference_number)
    {
        $this->container['host_reference_number'] = $host_reference_number;

        return $this;
    }

    /**
     * Gets host_time
     *
     * @return string|null
     */
    public function getHostTime()
    {
        return $this->container['host_time'];
    }

    /**
     * Sets host_time
     *
     * @param string|null $host_time Time at which transaction processed by payment processor.
     *
     * @return self
     */
    public function setHostTime($host_time)
    {
        $this->container['host_time'] = $host_time;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Reference to the invoice associated by Merchant with a processed transaction.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address IP address of originator for transaction processing request.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return string|null
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param string|null $last_update_date Date and time on which record of transaction most recently updated.
     *
     * @return self
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets level3_amount
     *
     * @return string|null
     */
    public function getLevel3Amount()
    {
        return $this->container['level3_amount'];
    }

    /**
     * Sets level3_amount
     *
     * @param string|null $level3_amount Amount submitted as Level3 transaction
     *
     * @return self
     */
    public function setLevel3Amount($level3_amount)
    {
        $this->container['level3_amount'] = $level3_amount;

        return $this;
    }

    /**
     * Gets list_of_responses
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\TransactionResponse[]|null
     */
    public function getListOfResponses()
    {
        return $this->container['list_of_responses'];
    }

    /**
     * Sets list_of_responses
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\TransactionResponse[]|null $list_of_responses A list of responses returned back from multiple force capture transactions
     *
     * @return self
     */
    public function setListOfResponses($list_of_responses)
    {
        $this->container['list_of_responses'] = $list_of_responses;

        return $this;
    }

    /**
     * Gets magnetic_ink_check_reader
     *
     * @return string|null
     */
    public function getMagneticInkCheckReader()
    {
        return $this->container['magnetic_ink_check_reader'];
    }

    /**
     * Sets magnetic_ink_check_reader
     *
     * @param string|null $magnetic_ink_check_reader Masked Magnetic Ink Check Reader (MICR) data line, including routing number of Bank and Account number of owner.
     *
     * @return self
     */
    public function setMagneticInkCheckReader($magnetic_ink_check_reader)
    {
        $this->container['magnetic_ink_check_reader'] = $magnetic_ink_check_reader;

        return $this;
    }

    /**
     * Gets manual
     *
     * @return string|null
     */
    public function getManual()
    {
        return $this->container['manual'];
    }

    /**
     * Sets manual
     *
     * @param string|null $manual Indicator that card information entered by an operator.
     *
     * @return self
     */
    public function setManual($manual)
    {
        $this->container['manual'] = $manual;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Name of card holder.
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets name_on_check
     *
     * @return string|null
     */
    public function getNameOnCheck()
    {
        return $this->container['name_on_check'];
    }

    /**
     * Sets name_on_check
     *
     * @param string|null $name_on_check Name of check holder.
     *
     * @return self
     */
    public function setNameOnCheck($name_on_check)
    {
        $this->container['name_on_check'] = $name_on_check;

        return $this;
    }

    /**
     * Gets original_payment_reference_number
     *
     * @return string|null
     */
    public function getOriginalPaymentReferenceNumber()
    {
        return $this->container['original_payment_reference_number'];
    }

    /**
     * Sets original_payment_reference_number
     *
     * @param string|null $original_payment_reference_number Identifier of original transaction (with which transaction is associated).
     *
     * @return self
     */
    public function setOriginalPaymentReferenceNumber($original_payment_reference_number)
    {
        $this->container['original_payment_reference_number'] = $original_payment_reference_number;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Identifier of current transaction.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type Payment Type.
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number associated with the account
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets processor_id
     *
     * @return string|null
     */
    public function getProcessorId()
    {
        return $this->container['processor_id'];
    }

    /**
     * Sets processor_id
     *
     * @param string|null $processor_id Identifier used by Paragon platform to reference payment processor.
     *
     * @return self
     */
    public function setProcessorId($processor_id)
    {
        $this->container['processor_id'] = $processor_id;

        return $this;
    }

    /**
     * Gets raw_magnetic_ink_check_reader
     *
     * @return string|null
     */
    public function getRawMagneticInkCheckReader()
    {
        return $this->container['raw_magnetic_ink_check_reader'];
    }

    /**
     * Sets raw_magnetic_ink_check_reader
     *
     * @param string|null $raw_magnetic_ink_check_reader Raw Magnetic Ink Check Reader (MICR) data line, including routing number of Bank and Account number of owner.
     *
     * @return self
     */
    public function setRawMagneticInkCheckReader($raw_magnetic_ink_check_reader)
    {
        $this->container['raw_magnetic_ink_check_reader'] = $raw_magnetic_ink_check_reader;

        return $this;
    }

    /**
     * Gets receipt_count
     *
     * @return string|null
     */
    public function getReceiptCount()
    {
        return $this->container['receipt_count'];
    }

    /**
     * Sets receipt_count
     *
     * @param string|null $receipt_count Cunt of receipts associated with the transaction.
     *
     * @return self
     */
    public function setReceiptCount($receipt_count)
    {
        $this->container['receipt_count'] = $receipt_count;

        return $this;
    }

    /**
     * Gets register_number
     *
     * @return string|null
     */
    public function getRegisterNumber()
    {
        return $this->container['register_number'];
    }

    /**
     * Sets register_number
     *
     * @param string|null $register_number Register number for a processed transaction.
     *
     * @return self
     */
    public function setRegisterNumber($register_number)
    {
        $this->container['register_number'] = $register_number;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return string|null
     */
    public function getResellerId()
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param string|null $reseller_id Unique identifier for Paragon platform reseller.
     *
     * @return self
     */
    public function setResellerId($reseller_id)
    {
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Result code returned by Paragon platform for processed transaction.
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets sub_result
     *
     * @return string|null
     */
    public function getSubResult()
    {
        return $this->container['sub_result'];
    }

    /**
     * Sets sub_result
     *
     * @param string|null $sub_result Result code denoting the state of transaction on the processor side. Details of the code can be found <a target=\"_blank\" href=\"https://stage.docs.paragonsolutions.com/restapi/Paragon_Processing_Platform_Property_sub_result.pdf\">HERE</a>
     *
     * @return self
     */
    public function setSubResult($sub_result)
    {
        $this->container['sub_result'] = $sub_result;

        return $this;
    }

    /**
     * Gets result_description
     *
     * @return string|null
     */
    public function getResultDescription()
    {
        return $this->container['result_description'];
    }

    /**
     * Sets result_description
     *
     * @param string|null $result_description Result message returned by Paragon platform for check transaction.
     *
     * @return self
     */
    public function setResultDescription($result_description)
    {
        $this->container['result_description'] = $result_description;

        return $this;
    }

    /**
     * Gets result_message
     *
     * @return string|null
     */
    public function getResultMessage()
    {
        return $this->container['result_message'];
    }

    /**
     * Sets result_message
     *
     * @param string|null $result_message Result message returned by Paragon platform for check transaction.
     *
     * @return self
     */
    public function setResultMessage($result_message)
    {
        $this->container['result_message'] = $result_message;

        return $this;
    }

    /**
     * Gets result_message_1
     *
     * @return string|null
     */
    public function getResultMessage1()
    {
        return $this->container['result_message_1'];
    }

    /**
     * Sets result_message_1
     *
     * @param string|null $result_message_1 Additional text from message returned by Paragon platform for check transaction.
     *
     * @return self
     */
    public function setResultMessage1($result_message_1)
    {
        $this->container['result_message_1'] = $result_message_1;

        return $this;
    }

    /**
     * Gets result_message_2
     *
     * @return string|null
     */
    public function getResultMessage2()
    {
        return $this->container['result_message_2'];
    }

    /**
     * Sets result_message_2
     *
     * @param string|null $result_message_2 Additional text from message returned by Paragon platform for check transaction.
     *
     * @return self
     */
    public function setResultMessage2($result_message_2)
    {
        $this->container['result_message_2'] = $result_message_2;

        return $this;
    }

    /**
     * Gets reversal_flag
     *
     * @return string|null
     */
    public function getReversalFlag()
    {
        return $this->container['reversal_flag'];
    }

    /**
     * Sets reversal_flag
     *
     * @param string|null $reversal_flag Reversal transaction indicator. Value of 1 means it is while 0 means it is not.
     *
     * @return self
     */
    public function setReversalFlag($reversal_flag)
    {
        $this->container['reversal_flag'] = $reversal_flag;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return string|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param string|null $sequence_number A number submitted to the payment processor .
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return string|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param string|null $settlement_date Date of transaction settlement.
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets settlement_flag
     *
     * @return string|null
     */
    public function getSettlementFlag()
    {
        return $this->container['settlement_flag'];
    }

    /**
     * Sets settlement_flag
     *
     * @param string|null $settlement_flag Transaction settlement indicator.
     *
     * @return self
     */
    public function setSettlementFlag($settlement_flag)
    {
        $this->container['settlement_flag'] = $settlement_flag;

        return $this;
    }

    /**
     * Gets settlement_key
     *
     * @return string|null
     */
    public function getSettlementKey()
    {
        return $this->container['settlement_key'];
    }

    /**
     * Sets settlement_key
     *
     * @param string|null $settlement_key Unique identifier for the settlement record of a transaction in Paragon platform database.
     *
     * @return self
     */
    public function setSettlementKey($settlement_key)
    {
        $this->container['settlement_key'] = $settlement_key;

        return $this;
    }

    /**
     * Gets settlement_message
     *
     * @return string|null
     */
    public function getSettlementMessage()
    {
        return $this->container['settlement_message'];
    }

    /**
     * Sets settlement_message
     *
     * @param string|null $settlement_message Settlement message for a processed transaction.
     *
     * @return self
     */
    public function setSettlementMessage($settlement_message)
    {
        $this->container['settlement_message'] = $settlement_message;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number Masked social Security number of the account holder
     *
     * @return self
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code State abbreviation for card with which transaction processed.
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 Billing street address for credit card.
     *
     * @return self
     */
    public function setStreet1($street1)
    {
        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street_match
     *
     * @return string|null
     */
    public function getStreetMatch()
    {
        return $this->container['street_match'];
    }

    /**
     * Sets street_match
     *
     * @param string|null $street_match Address Verification Service evaluation of street line from cardholder address
     *
     * @return self
     */
    public function setStreetMatch($street_match)
    {
        $this->container['street_match'] = $street_match;

        return $this;
    }

    /**
     * Gets surcharge_amount
     *
     * @return string|null
     */
    public function getSurchargeAmount()
    {
        return $this->container['surcharge_amount'];
    }

    /**
     * Sets surcharge_amount
     *
     * @param string|null $surcharge_amount Surcharge amount for a processed transaction.
     *
     * @return self
     */
    public function setSurchargeAmount($surcharge_amount)
    {
        $this->container['surcharge_amount'] = $surcharge_amount;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return string|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param string|null $tip_amount Tip amount for a processed transaction.
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string|null $total_amount Total amount for a processed transaction.
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Unique identifier for the transaction assigned by the merchant.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Transaction Type
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transit_number
     *
     * @return string|null
     */
    public function getTransitNumber()
    {
        return $this->container['transit_number'];
    }

    /**
     * Sets transit_number
     *
     * @param string|null $transit_number Transit code for bank holding checking account.
     *
     * @return self
     */
    public function setTransitNumber($transit_number)
    {
        $this->container['transit_number'] = $transit_number;

        return $this;
    }

    /**
     * Gets transport_endpoint
     *
     * @return string|null
     */
    public function getTransportEndpoint()
    {
        return $this->container['transport_endpoint'];
    }

    /**
     * Sets transport_endpoint
     *
     * @param string|null $transport_endpoint Web service endpoint.
     *
     * @return self
     */
    public function setTransportEndpoint($transport_endpoint)
    {
        $this->container['transport_endpoint'] = $transport_endpoint;

        return $this;
    }

    /**
     * Gets transport_method
     *
     * @return string|null
     */
    public function getTransportMethod()
    {
        return $this->container['transport_method'];
    }

    /**
     * Sets transport_method
     *
     * @param string|null $transport_method Web service transport method.
     *
     * @return self
     */
    public function setTransportMethod($transport_method)
    {
        $this->container['transport_method'] = $transport_method;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Card Type.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Paragon platform User Name used when transaction processed.
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets void_flag
     *
     * @return string|null
     */
    public function getVoidFlag()
    {
        return $this->container['void_flag'];
    }

    /**
     * Sets void_flag
     *
     * @param string|null $void_flag Void transaction indicator.
     *
     * @return self
     */
    public function setVoidFlag($void_flag)
    {
        $this->container['void_flag'] = $void_flag;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code Billing ZIP Code for card.
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets zip_match
     *
     * @return string|null
     */
    public function getZipMatch()
    {
        return $this->container['zip_match'];
    }

    /**
     * Sets zip_match
     *
     * @param string|null $zip_match Address Verification Service evaluation of ZIP Code from card holder address
     *
     * @return self
     */
    public function setZipMatch($zip_match)
    {
        $this->container['zip_match'] = $zip_match;

        return $this;
    }

    /**
     * Gets last_ach_status_update_date
     *
     * @return string|null
     */
    public function getLastAchStatusUpdateDate()
    {
        return $this->container['last_ach_status_update_date'];
    }

    /**
     * Sets last_ach_status_update_date
     *
     * @param string|null $last_ach_status_update_date Date and time of last ACH status update of transaction.
     *
     * @return self
     */
    public function setLastAchStatusUpdateDate($last_ach_status_update_date)
    {
        $this->container['last_ach_status_update_date'] = $last_ach_status_update_date;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type Brand of card used
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets partial_reversal_flag
     *
     * @return string|null
     */
    public function getPartialReversalFlag()
    {
        return $this->container['partial_reversal_flag'];
    }

    /**
     * Sets partial_reversal_flag
     *
     * @param string|null $partial_reversal_flag Indicates if Partial Reversal was done for the transactions. Partial_Reversal_Flag = T or F
     *
     * @return self
     */
    public function setPartialReversalFlag($partial_reversal_flag)
    {
        $this->container['partial_reversal_flag'] = $partial_reversal_flag;

        return $this;
    }

    /**
     * Gets requested_amount
     *
     * @return string|null
     */
    public function getRequestedAmount()
    {
        return $this->container['requested_amount'];
    }

    /**
     * Sets requested_amount
     *
     * @param string|null $requested_amount The original amount submitted for Authorization. Returned only in case of Partial Approvals
     *
     * @return self
     */
    public function setRequestedAmount($requested_amount)
    {
        $this->container['requested_amount'] = $requested_amount;

        return $this;
    }

    /**
     * Gets approved_amount
     *
     * @return string|null
     */
    public function getApprovedAmount()
    {
        return $this->container['approved_amount'];
    }

    /**
     * Sets approved_amount
     *
     * @param string|null $approved_amount Total amount for the transactions. Filled only in case of Partial Approvals
     *
     * @return self
     */
    public function setApprovedAmount($approved_amount)
    {
        $this->container['approved_amount'] = $approved_amount;

        return $this;
    }

    /**
     * Gets recurring_id
     *
     * @return string|null
     */
    public function getRecurringId()
    {
        return $this->container['recurring_id'];
    }

    /**
     * Sets recurring_id
     *
     * @param string|null $recurring_id Only for FirstACH processor; ID returned by the processor when executing a recurring check transaction
     *
     * @return self
     */
    public function setRecurringId($recurring_id)
    {
        $this->container['recurring_id'] = $recurring_id;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name The name of merchant on whom the transaction was executed.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets benefit_expiration_date
     *
     * @return string|null
     */
    public function getBenefitExpirationDate()
    {
        return $this->container['benefit_expiration_date'];
    }

    /**
     * Sets benefit_expiration_date
     *
     * @param string|null $benefit_expiration_date This field identifies the expiration date for the earliest expiring benefit among all the eWIC prescription balance information data returned.  Numeric  Format: YYYYMMDD
     *
     * @return self
     */
    public function setBenefitExpirationDate($benefit_expiration_date)
    {
        $this->container['benefit_expiration_date'] = $benefit_expiration_date;

        return $this;
    }

    /**
     * Gets ewic_balance
     *
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\EWICBalanceResponseModel[]|null
     */
    public function getEwicBalance()
    {
        return $this->container['ewic_balance'];
    }

    /**
     * Sets ewic_balance
     *
     * @param \DCarbone\ParagonSolutionsPHPSDK\Model\EWICBalanceResponseModel[]|null $ewic_balance The fields in this group are used in EBT eWIC transactions.  This is a response only group and this group can be repeated up to 50 times.
     *
     * @return self
     */
    public function setEwicBalance($ewic_balance)
    {
        $this->container['ewic_balance'] = $ewic_balance;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The three-letter ISO currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets emv_data
     *
     * @return string|null
     */
    public function getEmvData()
    {
        return $this->container['emv_data'];
    }

    /**
     * Sets emv_data
     *
     * @param string|null $emv_data EMV response field
     *
     * @return self
     */
    public function setEmvData($emv_data)
    {
        $this->container['emv_data'] = $emv_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


