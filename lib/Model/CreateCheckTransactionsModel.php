<?php
/**
 * CreateCheckTransactionsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CreateCheckTransactionsModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCheckTransactionsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCheckTransactionsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'string',
        'check_number' => 'string',
        'transit_number' => 'string',
        'account_number' => 'string',
        'amount' => 'string',
        'magnetic_ink_check_reader' => 'string',
        'name_on_check' => 'string',
        'driver_license' => 'string',
        'social_security_number' => 'string',
        'date_of_birth' => 'string',
        'state_code' => 'string',
        'check_type' => 'string',
        'account_type' => 'string',
        'alliance_number' => 'string',
        'authorization_option_form' => 'string',
        'authorization_option_voice' => 'string',
        'bill_to_street' => 'string',
        'bill_to_city' => 'string',
        'bill_to_state' => 'string',
        'bill_to_postal_code' => 'string',
        'bill_to_country' => 'string',
        'city_of_account' => 'string',
        'customer_id' => 'string',
        'email' => 'string',
        'external_ip' => 'string',
        'invoice_number' => 'string',
        'phone' => 'string',
        'payment_reference_number' => 'string',
        'raw_magnetic_ink_check_reader' => 'string',
        'standard_entry_class_codes_type' => 'string',
        'check_info_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'check_number' => null,
        'transit_number' => null,
        'account_number' => null,
        'amount' => null,
        'magnetic_ink_check_reader' => null,
        'name_on_check' => null,
        'driver_license' => null,
        'social_security_number' => null,
        'date_of_birth' => null,
        'state_code' => null,
        'check_type' => null,
        'account_type' => null,
        'alliance_number' => null,
        'authorization_option_form' => null,
        'authorization_option_voice' => null,
        'bill_to_street' => null,
        'bill_to_city' => null,
        'bill_to_state' => null,
        'bill_to_postal_code' => null,
        'bill_to_country' => null,
        'city_of_account' => null,
        'customer_id' => null,
        'email' => null,
        'external_ip' => null,
        'invoice_number' => null,
        'phone' => null,
        'payment_reference_number' => null,
        'raw_magnetic_ink_check_reader' => null,
        'standard_entry_class_codes_type' => null,
        'check_info_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'check_number' => 'check_number',
        'transit_number' => 'transit_number',
        'account_number' => 'account_number',
        'amount' => 'amount',
        'magnetic_ink_check_reader' => 'magnetic_ink_check_reader',
        'name_on_check' => 'name_on_check',
        'driver_license' => 'driver_license',
        'social_security_number' => 'social_security_number',
        'date_of_birth' => 'date_of_birth',
        'state_code' => 'state_code',
        'check_type' => 'check_type',
        'account_type' => 'account_type',
        'alliance_number' => 'alliance_number',
        'authorization_option_form' => 'authorization_option_form',
        'authorization_option_voice' => 'authorization_option_voice',
        'bill_to_street' => 'bill_to_street',
        'bill_to_city' => 'bill_to_city',
        'bill_to_state' => 'bill_to_state',
        'bill_to_postal_code' => 'bill_to_postal_code',
        'bill_to_country' => 'bill_to_country',
        'city_of_account' => 'city_of_account',
        'customer_id' => 'customer_id',
        'email' => 'email',
        'external_ip' => 'external_ip',
        'invoice_number' => 'invoice_number',
        'phone' => 'phone',
        'payment_reference_number' => 'payment_reference_number',
        'raw_magnetic_ink_check_reader' => 'raw_magnetic_ink_check_reader',
        'standard_entry_class_codes_type' => 'standard_entry_class_codes_type',
        'check_info_key' => 'check_info_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'check_number' => 'setCheckNumber',
        'transit_number' => 'setTransitNumber',
        'account_number' => 'setAccountNumber',
        'amount' => 'setAmount',
        'magnetic_ink_check_reader' => 'setMagneticInkCheckReader',
        'name_on_check' => 'setNameOnCheck',
        'driver_license' => 'setDriverLicense',
        'social_security_number' => 'setSocialSecurityNumber',
        'date_of_birth' => 'setDateOfBirth',
        'state_code' => 'setStateCode',
        'check_type' => 'setCheckType',
        'account_type' => 'setAccountType',
        'alliance_number' => 'setAllianceNumber',
        'authorization_option_form' => 'setAuthorizationOptionForm',
        'authorization_option_voice' => 'setAuthorizationOptionVoice',
        'bill_to_street' => 'setBillToStreet',
        'bill_to_city' => 'setBillToCity',
        'bill_to_state' => 'setBillToState',
        'bill_to_postal_code' => 'setBillToPostalCode',
        'bill_to_country' => 'setBillToCountry',
        'city_of_account' => 'setCityOfAccount',
        'customer_id' => 'setCustomerId',
        'email' => 'setEmail',
        'external_ip' => 'setExternalIp',
        'invoice_number' => 'setInvoiceNumber',
        'phone' => 'setPhone',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'raw_magnetic_ink_check_reader' => 'setRawMagneticInkCheckReader',
        'standard_entry_class_codes_type' => 'setStandardEntryClassCodesType',
        'check_info_key' => 'setCheckInfoKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'check_number' => 'getCheckNumber',
        'transit_number' => 'getTransitNumber',
        'account_number' => 'getAccountNumber',
        'amount' => 'getAmount',
        'magnetic_ink_check_reader' => 'getMagneticInkCheckReader',
        'name_on_check' => 'getNameOnCheck',
        'driver_license' => 'getDriverLicense',
        'social_security_number' => 'getSocialSecurityNumber',
        'date_of_birth' => 'getDateOfBirth',
        'state_code' => 'getStateCode',
        'check_type' => 'getCheckType',
        'account_type' => 'getAccountType',
        'alliance_number' => 'getAllianceNumber',
        'authorization_option_form' => 'getAuthorizationOptionForm',
        'authorization_option_voice' => 'getAuthorizationOptionVoice',
        'bill_to_street' => 'getBillToStreet',
        'bill_to_city' => 'getBillToCity',
        'bill_to_state' => 'getBillToState',
        'bill_to_postal_code' => 'getBillToPostalCode',
        'bill_to_country' => 'getBillToCountry',
        'city_of_account' => 'getCityOfAccount',
        'customer_id' => 'getCustomerId',
        'email' => 'getEmail',
        'external_ip' => 'getExternalIp',
        'invoice_number' => 'getInvoiceNumber',
        'phone' => 'getPhone',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'raw_magnetic_ink_check_reader' => 'getRawMagneticInkCheckReader',
        'standard_entry_class_codes_type' => 'getStandardEntryClassCodesType',
        'check_info_key' => 'getCheckInfoKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_AUTH = 'auth';
    public const TRANSACTION_TYPE_SALE = 'sale';
    public const TRANSACTION_TYPE_FORCE = 'force';
    public const TRANSACTION_TYPE__RETURN = 'return';
    public const TRANSACTION_TYPE_VOID = 'void';
    public const TRANSACTION_TYPE_CAPTURE = 'capture';
    public const TRANSACTION_TYPE_CAPTUREALL = 'captureall';
    public const TRANSACTION_TYPE_REVERSAL = 'reversal';
    public const TRANSACTION_TYPE_CREDIT = 'credit';
    public const CHECK_TYPE_PERSONAL = 'Personal';
    public const CHECK_TYPE_BUSINESS = 'Business';
    public const ACCOUNT_TYPE_CHECKING = 'Checking';
    public const ACCOUNT_TYPE_SAVINGS = 'Savings';
    public const AUTHORIZATION_OPTION_FORM_SINGLE_PAYMENT_SERIES = 'SinglePaymentSeries';
    public const AUTHORIZATION_OPTION_FORM_UNTIL_REVOKED = 'UntilRevoked';
    public const AUTHORIZATION_OPTION_VOICE_CONSUMER_INITIATED_CALL = 'ConsumerInitiatedCall';
    public const AUTHORIZATION_OPTION_VOICE_EXISTING_RELATIONSHIP = 'ExistingRelationship';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_CCD = 'CCD';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_PPD = 'PPD';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_ARC = 'ARC';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_RCK = 'RCK';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_TEL = 'TEL';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_WEB = 'WEB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_AUTH,
            self::TRANSACTION_TYPE_SALE,
            self::TRANSACTION_TYPE_FORCE,
            self::TRANSACTION_TYPE__RETURN,
            self::TRANSACTION_TYPE_VOID,
            self::TRANSACTION_TYPE_CAPTURE,
            self::TRANSACTION_TYPE_CAPTUREALL,
            self::TRANSACTION_TYPE_REVERSAL,
            self::TRANSACTION_TYPE_CREDIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckTypeAllowableValues()
    {
        return [
            self::CHECK_TYPE_PERSONAL,
            self::CHECK_TYPE_BUSINESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CHECKING,
            self::ACCOUNT_TYPE_SAVINGS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationOptionFormAllowableValues()
    {
        return [
            self::AUTHORIZATION_OPTION_FORM_SINGLE_PAYMENT_SERIES,
            self::AUTHORIZATION_OPTION_FORM_UNTIL_REVOKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationOptionVoiceAllowableValues()
    {
        return [
            self::AUTHORIZATION_OPTION_VOICE_CONSUMER_INITIATED_CALL,
            self::AUTHORIZATION_OPTION_VOICE_EXISTING_RELATIONSHIP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandardEntryClassCodesTypeAllowableValues()
    {
        return [
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_CCD,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_PPD,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_ARC,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_RCK,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_TEL,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_WEB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['check_number'] = $data['check_number'] ?? null;
        $this->container['transit_number'] = $data['transit_number'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['magnetic_ink_check_reader'] = $data['magnetic_ink_check_reader'] ?? null;
        $this->container['name_on_check'] = $data['name_on_check'] ?? null;
        $this->container['driver_license'] = $data['driver_license'] ?? null;
        $this->container['social_security_number'] = $data['social_security_number'] ?? null;
        $this->container['date_of_birth'] = $data['date_of_birth'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['check_type'] = $data['check_type'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['alliance_number'] = $data['alliance_number'] ?? null;
        $this->container['authorization_option_form'] = $data['authorization_option_form'] ?? null;
        $this->container['authorization_option_voice'] = $data['authorization_option_voice'] ?? null;
        $this->container['bill_to_street'] = $data['bill_to_street'] ?? null;
        $this->container['bill_to_city'] = $data['bill_to_city'] ?? null;
        $this->container['bill_to_state'] = $data['bill_to_state'] ?? null;
        $this->container['bill_to_postal_code'] = $data['bill_to_postal_code'] ?? null;
        $this->container['bill_to_country'] = $data['bill_to_country'] ?? null;
        $this->container['city_of_account'] = $data['city_of_account'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['external_ip'] = $data['external_ip'] ?? null;
        $this->container['invoice_number'] = $data['invoice_number'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['payment_reference_number'] = $data['payment_reference_number'] ?? null;
        $this->container['raw_magnetic_ink_check_reader'] = $data['raw_magnetic_ink_check_reader'] ?? null;
        $this->container['standard_entry_class_codes_type'] = $data['standard_entry_class_codes_type'] ?? null;
        $this->container['check_info_key'] = $data['check_info_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckTypeAllowableValues();
        if (!is_null($this->container['check_type']) && !in_array($this->container['check_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'check_type', must be one of '%s'",
                $this->container['check_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthorizationOptionFormAllowableValues();
        if (!is_null($this->container['authorization_option_form']) && !in_array($this->container['authorization_option_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization_option_form', must be one of '%s'",
                $this->container['authorization_option_form'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthorizationOptionVoiceAllowableValues();
        if (!is_null($this->container['authorization_option_voice']) && !in_array($this->container['authorization_option_voice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization_option_voice', must be one of '%s'",
                $this->container['authorization_option_voice'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStandardEntryClassCodesTypeAllowableValues();
        if (!is_null($this->container['standard_entry_class_codes_type']) && !in_array($this->container['standard_entry_class_codes_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'standard_entry_class_codes_type', must be one of '%s'",
                $this->container['standard_entry_class_codes_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type Transaction type for processing a check payment. Valid TransType values: Sale; Return; Void;.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number Unique identifier for an original check (on a Checking Account).
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets transit_number
     *
     * @return string|null
     */
    public function getTransitNumber()
    {
        return $this->container['transit_number'];
    }

    /**
     * Sets transit_number
     *
     * @param string|null $transit_number A Nine-digit code, used in the United States to identify the financial institution on which a check is drawn.
     *
     * @return self
     */
    public function setTransitNumber($transit_number)
    {
        $this->container['transit_number'] = $transit_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Unique identifier of the check owner's bank account.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount $0.00 &gt; Amount &lt; $1,000,000.00 (DDDDDD.CC).
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets magnetic_ink_check_reader
     *
     * @return string|null
     */
    public function getMagneticInkCheckReader()
    {
        return $this->container['magnetic_ink_check_reader'];
    }

    /**
     * Sets magnetic_ink_check_reader
     *
     * @param string|null $magnetic_ink_check_reader Magnetic Ink Check Reader (MICR) data line, including routing number of Bank and Account number of owner.
     *
     * @return self
     */
    public function setMagneticInkCheckReader($magnetic_ink_check_reader)
    {
        $this->container['magnetic_ink_check_reader'] = $magnetic_ink_check_reader;

        return $this;
    }

    /**
     * Gets name_on_check
     *
     * @return string|null
     */
    public function getNameOnCheck()
    {
        return $this->container['name_on_check'];
    }

    /**
     * Sets name_on_check
     *
     * @param string|null $name_on_check Check owner's name as it appears on the check.
     *
     * @return self
     */
    public function setNameOnCheck($name_on_check)
    {
        $this->container['name_on_check'] = $name_on_check;

        return $this;
    }

    /**
     * Gets driver_license
     *
     * @return string|null
     */
    public function getDriverLicense()
    {
        return $this->container['driver_license'];
    }

    /**
     * Sets driver_license
     *
     * @param string|null $driver_license Identifier on Driver's License of Check owner.
     *
     * @return self
     */
    public function setDriverLicense($driver_license)
    {
        $this->container['driver_license'] = $driver_license;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number Nine-digit number issued to citizens, permanent residents and temporary workers by the Social Security Administration in the United States.
     *
     * @return self
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth Date of Birth (MM/DD/YYYY or YYYY-MM-DD).
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code United States Postal Service abbreviation for a state, district, possession or territory. Required for TransType = Sale; Return; Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return string|null
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param string|null $check_type Checking Account Type: Personal, Business. Required for TransType = Sale; Return;  Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setCheckType($check_type)
    {
        $allowedValues = $this->getCheckTypeAllowableValues();
        if (!is_null($check_type) && !in_array($check_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'check_type', must be one of '%s'",
                    $check_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Valid Account Type: Checking, Savings. Required for TransType = Sale; Return; Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets alliance_number
     *
     * @return string|null
     */
    public function getAllianceNumber()
    {
        return $this->container['alliance_number'];
    }

    /**
     * Sets alliance_number
     *
     * @param string|null $alliance_number Alliance number associated with checking account.
     *
     * @return self
     */
    public function setAllianceNumber($alliance_number)
    {
        $this->container['alliance_number'] = $alliance_number;

        return $this;
    }

    /**
     * Gets authorization_option_form
     *
     * @return string|null
     */
    public function getAuthorizationOptionForm()
    {
        return $this->container['authorization_option_form'];
    }

    /**
     * Sets authorization_option_form
     *
     * @param string|null $authorization_option_form authorization_option_form
     *
     * @return self
     */
    public function setAuthorizationOptionForm($authorization_option_form)
    {
        $allowedValues = $this->getAuthorizationOptionFormAllowableValues();
        if (!is_null($authorization_option_form) && !in_array($authorization_option_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization_option_form', must be one of '%s'",
                    $authorization_option_form,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization_option_form'] = $authorization_option_form;

        return $this;
    }

    /**
     * Gets authorization_option_voice
     *
     * @return string|null
     */
    public function getAuthorizationOptionVoice()
    {
        return $this->container['authorization_option_voice'];
    }

    /**
     * Sets authorization_option_voice
     *
     * @param string|null $authorization_option_voice authorization_option_voice
     *
     * @return self
     */
    public function setAuthorizationOptionVoice($authorization_option_voice)
    {
        $allowedValues = $this->getAuthorizationOptionVoiceAllowableValues();
        if (!is_null($authorization_option_voice) && !in_array($authorization_option_voice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization_option_voice', must be one of '%s'",
                    $authorization_option_voice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization_option_voice'] = $authorization_option_voice;

        return $this;
    }

    /**
     * Gets bill_to_street
     *
     * @return string|null
     */
    public function getBillToStreet()
    {
        return $this->container['bill_to_street'];
    }

    /**
     * Sets bill_to_street
     *
     * @param string|null $bill_to_street Address of Customer.Required for TransType = Sale; Return; Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setBillToStreet($bill_to_street)
    {
        $this->container['bill_to_street'] = $bill_to_street;

        return $this;
    }

    /**
     * Gets bill_to_city
     *
     * @return string|null
     */
    public function getBillToCity()
    {
        return $this->container['bill_to_city'];
    }

    /**
     * Sets bill_to_city
     *
     * @param string|null $bill_to_city City of Customer. Required for TransType = Sale; Return;Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setBillToCity($bill_to_city)
    {
        $this->container['bill_to_city'] = $bill_to_city;

        return $this;
    }

    /**
     * Gets bill_to_state
     *
     * @return string|null
     */
    public function getBillToState()
    {
        return $this->container['bill_to_state'];
    }

    /**
     * Sets bill_to_state
     *
     * @param string|null $bill_to_state United States Postal Service abbreviation for a state, district, possession or territory. Required for TransType = Sale; Return;Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setBillToState($bill_to_state)
    {
        $this->container['bill_to_state'] = $bill_to_state;

        return $this;
    }

    /**
     * Gets bill_to_postal_code
     *
     * @return string|null
     */
    public function getBillToPostalCode()
    {
        return $this->container['bill_to_postal_code'];
    }

    /**
     * Sets bill_to_postal_code
     *
     * @param string|null $bill_to_postal_code Zip code of Customer. Required for TransType = Sale; Return; Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setBillToPostalCode($bill_to_postal_code)
    {
        $this->container['bill_to_postal_code'] = $bill_to_postal_code;

        return $this;
    }

    /**
     * Gets bill_to_country
     *
     * @return string|null
     */
    public function getBillToCountry()
    {
        return $this->container['bill_to_country'];
    }

    /**
     * Sets bill_to_country
     *
     * @param string|null $bill_to_country Country of Customer.
     *
     * @return self
     */
    public function setBillToCountry($bill_to_country)
    {
        $this->container['bill_to_country'] = $bill_to_country;

        return $this;
    }

    /**
     * Gets city_of_account
     *
     * @return string|null
     */
    public function getCityOfAccount()
    {
        return $this->container['city_of_account'];
    }

    /**
     * Sets city_of_account
     *
     * @param string|null $city_of_account City of Account.
     *
     * @return self
     */
    public function setCityOfAccount($city_of_account)
    {
        $this->container['city_of_account'] = $city_of_account;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Identifier assigned by merchant to cardholder.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Electronic Mail Address of checking account owner.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string|null $external_ip Originating IP address to use for logging and IP filtering.
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Identifier assigned by merchant to locate a specific transaction or multiple transactions (grouped by a single invoice).
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number of Customer: xxx-xxx-xxxx.Required for TransType = Sale; Return;Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string|null
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string|null $payment_reference_number Unique identifier of a transaction, assigned by Paragon platform.Required for TransType = Return; Void; Capture;Optional for TransType = Auth; Sale; Force; CaptureAll.
     *
     * @return self
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets raw_magnetic_ink_check_reader
     *
     * @return string|null
     */
    public function getRawMagneticInkCheckReader()
    {
        return $this->container['raw_magnetic_ink_check_reader'];
    }

    /**
     * Sets raw_magnetic_ink_check_reader
     *
     * @param string|null $raw_magnetic_ink_check_reader Magnetic Ink Check Reader (MICR) received from a check reader composed of a transit number, the letter “T”, an account number, the letter “O” and the check number.
     *
     * @return self
     */
    public function setRawMagneticInkCheckReader($raw_magnetic_ink_check_reader)
    {
        $this->container['raw_magnetic_ink_check_reader'] = $raw_magnetic_ink_check_reader;

        return $this;
    }

    /**
     * Gets standard_entry_class_codes_type
     *
     * @return string|null
     */
    public function getStandardEntryClassCodesType()
    {
        return $this->container['standard_entry_class_codes_type'];
    }

    /**
     * Sets standard_entry_class_codes_type
     *
     * @param string|null $standard_entry_class_codes_type Standard Entry Class codes. Required for First ACH transactions.
     *
     * @return self
     */
    public function setStandardEntryClassCodesType($standard_entry_class_codes_type)
    {
        $allowedValues = $this->getStandardEntryClassCodesTypeAllowableValues();
        if (!is_null($standard_entry_class_codes_type) && !in_array($standard_entry_class_codes_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'standard_entry_class_codes_type', must be one of '%s'",
                    $standard_entry_class_codes_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['standard_entry_class_codes_type'] = $standard_entry_class_codes_type;

        return $this;
    }

    /**
     * Gets check_info_key
     *
     * @return string|null
     */
    public function getCheckInfoKey()
    {
        return $this->container['check_info_key'];
    }

    /**
     * Sets check_info_key
     *
     * @param string|null $check_info_key Check Info Key. Can be used for First ACH Reversals using token.
     *
     * @return self
     */
    public function setCheckInfoKey($check_info_key)
    {
        $this->container['check_info_key'] = $check_info_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


