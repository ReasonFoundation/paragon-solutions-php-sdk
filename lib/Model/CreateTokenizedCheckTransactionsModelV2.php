<?php
/**
 * CreateTokenizedCheckTransactionsModelV2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * CreateTokenizedCheckTransactionsModelV2 Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateTokenizedCheckTransactionsModelV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateTokenizedCheckTransactionsModelV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'check_info_key' => 'string',
        'hp_plus_key' => 'string',
        'amount' => 'string',
        'invoice_number' => 'string',
        'force' => 'string',
        'billing_frequency' => 'string',
        'number_of_payments' => 'string',
        'recurring_id' => 'string',
        'effective_date' => 'string',
        'transaction_type' => 'string',
        'standard_entry_class_codes_type' => 'string',
        'checking_account_type' => 'string',
        'auth_option_form' => 'string',
        'auth_option_voice' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'check_info_key' => null,
        'hp_plus_key' => null,
        'amount' => null,
        'invoice_number' => null,
        'force' => null,
        'billing_frequency' => null,
        'number_of_payments' => null,
        'recurring_id' => null,
        'effective_date' => null,
        'transaction_type' => null,
        'standard_entry_class_codes_type' => null,
        'checking_account_type' => null,
        'auth_option_form' => null,
        'auth_option_voice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'check_info_key' => 'check_info_key',
        'hp_plus_key' => 'hp_plus_key',
        'amount' => 'amount',
        'invoice_number' => 'invoice_number',
        'force' => 'force',
        'billing_frequency' => 'billing_frequency',
        'number_of_payments' => 'number_of_payments',
        'recurring_id' => 'recurring_id',
        'effective_date' => 'effective_date',
        'transaction_type' => 'transaction_type',
        'standard_entry_class_codes_type' => 'standard_entry_class_codes_type',
        'checking_account_type' => 'checking_account_type',
        'auth_option_form' => 'auth_option_form',
        'auth_option_voice' => 'auth_option_voice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'check_info_key' => 'setCheckInfoKey',
        'hp_plus_key' => 'setHpPlusKey',
        'amount' => 'setAmount',
        'invoice_number' => 'setInvoiceNumber',
        'force' => 'setForce',
        'billing_frequency' => 'setBillingFrequency',
        'number_of_payments' => 'setNumberOfPayments',
        'recurring_id' => 'setRecurringId',
        'effective_date' => 'setEffectiveDate',
        'transaction_type' => 'setTransactionType',
        'standard_entry_class_codes_type' => 'setStandardEntryClassCodesType',
        'checking_account_type' => 'setCheckingAccountType',
        'auth_option_form' => 'setAuthOptionForm',
        'auth_option_voice' => 'setAuthOptionVoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'check_info_key' => 'getCheckInfoKey',
        'hp_plus_key' => 'getHpPlusKey',
        'amount' => 'getAmount',
        'invoice_number' => 'getInvoiceNumber',
        'force' => 'getForce',
        'billing_frequency' => 'getBillingFrequency',
        'number_of_payments' => 'getNumberOfPayments',
        'recurring_id' => 'getRecurringId',
        'effective_date' => 'getEffectiveDate',
        'transaction_type' => 'getTransactionType',
        'standard_entry_class_codes_type' => 'getStandardEntryClassCodesType',
        'checking_account_type' => 'getCheckingAccountType',
        'auth_option_form' => 'getAuthOptionForm',
        'auth_option_voice' => 'getAuthOptionVoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORCE_TRUE = 'true';
    public const FORCE_FALSE = 'false';
    public const BILLING_FREQUENCY_ONCE = 'ONCE';
    public const BILLING_FREQUENCY_WEEKLY = 'WEEKLY';
    public const BILLING_FREQUENCY_BIWEEKLY = 'BIWEEKLY';
    public const BILLING_FREQUENCY_MONTHLY = 'MONTHLY';
    public const BILLING_FREQUENCY_QUARTERLY = 'QUARTERLY';
    public const BILLING_FREQUENCY_SEMIANNUALLY = 'SEMIANNUALLY';
    public const BILLING_FREQUENCY_ANNUALLY = 'ANNUALLY';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_CCD = 'CCD';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_PPD = 'PPD';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_ARC = 'ARC';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_RCK = 'RCK';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_TEL = 'TEL';
    public const STANDARD_ENTRY_CLASS_CODES_TYPE_WEB = 'WEB';
    public const CHECKING_ACCOUNT_TYPE_CHECKING = 'Checking';
    public const CHECKING_ACCOUNT_TYPE_SAVINGS = 'Savings';
    public const AUTH_OPTION_FORM_SINGLE_PAYMENT_SERIES = 'SinglePaymentSeries';
    public const AUTH_OPTION_FORM_UNTIL_REVOKED = 'UntilRevoked';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForceAllowableValues()
    {
        return [
            self::FORCE_TRUE,
            self::FORCE_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingFrequencyAllowableValues()
    {
        return [
            self::BILLING_FREQUENCY_ONCE,
            self::BILLING_FREQUENCY_WEEKLY,
            self::BILLING_FREQUENCY_BIWEEKLY,
            self::BILLING_FREQUENCY_MONTHLY,
            self::BILLING_FREQUENCY_QUARTERLY,
            self::BILLING_FREQUENCY_SEMIANNUALLY,
            self::BILLING_FREQUENCY_ANNUALLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandardEntryClassCodesTypeAllowableValues()
    {
        return [
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_CCD,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_PPD,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_ARC,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_RCK,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_TEL,
            self::STANDARD_ENTRY_CLASS_CODES_TYPE_WEB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckingAccountTypeAllowableValues()
    {
        return [
            self::CHECKING_ACCOUNT_TYPE_CHECKING,
            self::CHECKING_ACCOUNT_TYPE_SAVINGS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthOptionFormAllowableValues()
    {
        return [
            self::AUTH_OPTION_FORM_SINGLE_PAYMENT_SERIES,
            self::AUTH_OPTION_FORM_UNTIL_REVOKED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['check_info_key'] = $data['check_info_key'] ?? null;
        $this->container['hp_plus_key'] = $data['hp_plus_key'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['invoice_number'] = $data['invoice_number'] ?? null;
        $this->container['force'] = $data['force'] ?? null;
        $this->container['billing_frequency'] = $data['billing_frequency'] ?? null;
        $this->container['number_of_payments'] = $data['number_of_payments'] ?? null;
        $this->container['recurring_id'] = $data['recurring_id'] ?? null;
        $this->container['effective_date'] = $data['effective_date'] ?? null;
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['standard_entry_class_codes_type'] = $data['standard_entry_class_codes_type'] ?? null;
        $this->container['checking_account_type'] = $data['checking_account_type'] ?? null;
        $this->container['auth_option_form'] = $data['auth_option_form'] ?? null;
        $this->container['auth_option_voice'] = $data['auth_option_voice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($this->container['force']) && !in_array($this->container['force'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'force', must be one of '%s'",
                $this->container['force'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillingFrequencyAllowableValues();
        if (!is_null($this->container['billing_frequency']) && !in_array($this->container['billing_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing_frequency', must be one of '%s'",
                $this->container['billing_frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStandardEntryClassCodesTypeAllowableValues();
        if (!is_null($this->container['standard_entry_class_codes_type']) && !in_array($this->container['standard_entry_class_codes_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'standard_entry_class_codes_type', must be one of '%s'",
                $this->container['standard_entry_class_codes_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCheckingAccountTypeAllowableValues();
        if (!is_null($this->container['checking_account_type']) && !in_array($this->container['checking_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'checking_account_type', must be one of '%s'",
                $this->container['checking_account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuthOptionFormAllowableValues();
        if (!is_null($this->container['auth_option_form']) && !in_array($this->container['auth_option_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_option_form', must be one of '%s'",
                $this->container['auth_option_form'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets check_info_key
     *
     * @return string|null
     */
    public function getCheckInfoKey()
    {
        return $this->container['check_info_key'];
    }

    /**
     * Sets check_info_key
     *
     * @param string|null $check_info_key Unique Identifier assigned to a Checking Account
     *
     * @return self
     */
    public function setCheckInfoKey($check_info_key)
    {
        $this->container['check_info_key'] = $check_info_key;

        return $this;
    }

    /**
     * Gets hp_plus_key
     *
     * @return string|null
     */
    public function getHpPlusKey()
    {
        return $this->container['hp_plus_key'];
    }

    /**
     * Sets hp_plus_key
     *
     * @param string|null $hp_plus_key Hosted Payment Plus Key used to process transaction
     *
     * @return self
     */
    public function setHpPlusKey($hp_plus_key)
    {
        $this->container['hp_plus_key'] = $hp_plus_key;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount $0.00 gt; Amount lt; $25,000.00
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Identifier assigned by the merchant to locate a specific transaction or multiple transactions (grouped by a single invoice).
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets force
     *
     * @return string|null
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param string|null $force Force (T) Paragon platform to accept duplicate transaction.
     *
     * @return self
     */
    public function setForce($force)
    {
        $allowedValues = $this->getForceAllowableValues();
        if (!is_null($force) && !in_array($force, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'force', must be one of '%s'",
                    $force,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['force'] = $force;

        return $this;
    }

    /**
     * Gets billing_frequency
     *
     * @return string|null
     */
    public function getBillingFrequency()
    {
        return $this->container['billing_frequency'];
    }

    /**
     * Sets billing_frequency
     *
     * @param string|null $billing_frequency Required for FirstACH processor for first time external recurring payment.  One of: Once, Weekly, Biweekly, Monthly, Quarterly, Semiannually, Annually.
     *
     * @return self
     */
    public function setBillingFrequency($billing_frequency)
    {
        $allowedValues = $this->getBillingFrequencyAllowableValues();
        if (!is_null($billing_frequency) && !in_array($billing_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing_frequency', must be one of '%s'",
                    $billing_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_frequency'] = $billing_frequency;

        return $this;
    }

    /**
     * Gets number_of_payments
     *
     * @return string|null
     */
    public function getNumberOfPayments()
    {
        return $this->container['number_of_payments'];
    }

    /**
     * Sets number_of_payments
     *
     * @param string|null $number_of_payments Required for FirstACH processor for first time external recurring payment.  1‐9998; Use 9999 for Open‐Ended Recurring Customer Payments.
     *
     * @return self
     */
    public function setNumberOfPayments($number_of_payments)
    {
        $this->container['number_of_payments'] = $number_of_payments;

        return $this;
    }

    /**
     * Gets recurring_id
     *
     * @return string|null
     */
    public function getRecurringId()
    {
        return $this->container['recurring_id'];
    }

    /**
     * Sets recurring_id
     *
     * @param string|null $recurring_id Required for FirstACH processor for external recurring payment.  RecurringID of the existing recurring Payment Series.Received in ProcessCheck response.
     *
     * @return self
     */
    public function setRecurringId($recurring_id)
    {
        $this->container['recurring_id'] = $recurring_id;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string|null $effective_date Required for FirstACH processor for external recurring payment.  Date of the next Customer Payment in the recurring.Recurring payments beyond the next chronologically in the series may not be created in advance.Payment series: YYYY-MM-DD.
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Required for FirstACH processor for external recurring payment.  VOID – Void an entire external recurring payment series.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets standard_entry_class_codes_type
     *
     * @return string|null
     */
    public function getStandardEntryClassCodesType()
    {
        return $this->container['standard_entry_class_codes_type'];
    }

    /**
     * Sets standard_entry_class_codes_type
     *
     * @param string|null $standard_entry_class_codes_type Standard Entry Class codes. Required for First ACH transactions.
     *
     * @return self
     */
    public function setStandardEntryClassCodesType($standard_entry_class_codes_type)
    {
        $allowedValues = $this->getStandardEntryClassCodesTypeAllowableValues();
        if (!is_null($standard_entry_class_codes_type) && !in_array($standard_entry_class_codes_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'standard_entry_class_codes_type', must be one of '%s'",
                    $standard_entry_class_codes_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['standard_entry_class_codes_type'] = $standard_entry_class_codes_type;

        return $this;
    }

    /**
     * Gets checking_account_type
     *
     * @return string|null
     */
    public function getCheckingAccountType()
    {
        return $this->container['checking_account_type'];
    }

    /**
     * Sets checking_account_type
     *
     * @param string|null $checking_account_type Valid Account Type: Checking, Savings. Required for TransType = Sale; Return; Optional for TransType = Auth; Force; Void; Capture; CaptureAll.
     *
     * @return self
     */
    public function setCheckingAccountType($checking_account_type)
    {
        $allowedValues = $this->getCheckingAccountTypeAllowableValues();
        if (!is_null($checking_account_type) && !in_array($checking_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'checking_account_type', must be one of '%s'",
                    $checking_account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['checking_account_type'] = $checking_account_type;

        return $this;
    }

    /**
     * Gets auth_option_form
     *
     * @return string|null
     */
    public function getAuthOptionForm()
    {
        return $this->container['auth_option_form'];
    }

    /**
     * Sets auth_option_form
     *
     * @param string|null $auth_option_form Signed Form authorization option.  Required for SECCType = CCD; PPD
     *
     * @return self
     */
    public function setAuthOptionForm($auth_option_form)
    {
        $allowedValues = $this->getAuthOptionFormAllowableValues();
        if (!is_null($auth_option_form) && !in_array($auth_option_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_option_form', must be one of '%s'",
                    $auth_option_form,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_option_form'] = $auth_option_form;

        return $this;
    }

    /**
     * Gets auth_option_voice
     *
     * @return string|null
     */
    public function getAuthOptionVoice()
    {
        return $this->container['auth_option_voice'];
    }

    /**
     * Sets auth_option_voice
     *
     * @param string|null $auth_option_voice Recorded Voice authorization option.  Required for SECCType = TEL.
     *
     * @return self
     */
    public function setAuthOptionVoice($auth_option_voice)
    {
        $this->container['auth_option_voice'] = $auth_option_voice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


