<?php
/**
 * UpdateTerminalRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * UpdateTerminalRequestModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateTerminalRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateTerminalRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'terminal_id' => 'string',
        'terminal_model' => 'string',
        'terminal_service_mode' => 'string',
        'polling_interval_sec' => 'string',
        'polling_frequency_sec' => 'string',
        'maintenance_start_time' => 'string',
        'maintenance_end_time' => 'string',
        'terminal_profile' => 'string',
        'terminal_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'terminal_id' => null,
        'terminal_model' => null,
        'terminal_service_mode' => null,
        'polling_interval_sec' => null,
        'polling_frequency_sec' => null,
        'maintenance_start_time' => null,
        'maintenance_end_time' => null,
        'terminal_profile' => null,
        'terminal_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'terminal_id' => 'terminal_id',
        'terminal_model' => 'terminal_model',
        'terminal_service_mode' => 'terminal_service_mode',
        'polling_interval_sec' => 'polling_interval_sec',
        'polling_frequency_sec' => 'polling_frequency_sec',
        'maintenance_start_time' => 'maintenance_start_time',
        'maintenance_end_time' => 'maintenance_end_time',
        'terminal_profile' => 'terminal_profile',
        'terminal_status' => 'terminal_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'terminal_id' => 'setTerminalId',
        'terminal_model' => 'setTerminalModel',
        'terminal_service_mode' => 'setTerminalServiceMode',
        'polling_interval_sec' => 'setPollingIntervalSec',
        'polling_frequency_sec' => 'setPollingFrequencySec',
        'maintenance_start_time' => 'setMaintenanceStartTime',
        'maintenance_end_time' => 'setMaintenanceEndTime',
        'terminal_profile' => 'setTerminalProfile',
        'terminal_status' => 'setTerminalStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'terminal_id' => 'getTerminalId',
        'terminal_model' => 'getTerminalModel',
        'terminal_service_mode' => 'getTerminalServiceMode',
        'polling_interval_sec' => 'getPollingIntervalSec',
        'polling_frequency_sec' => 'getPollingFrequencySec',
        'maintenance_start_time' => 'getMaintenanceStartTime',
        'maintenance_end_time' => 'getMaintenanceEndTime',
        'terminal_profile' => 'getTerminalProfile',
        'terminal_status' => 'getTerminalStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TERMINAL_STATUS_PENDING = 'PENDING';
    public const TERMINAL_STATUS_ACTIVE = 'ACTIVE';
    public const TERMINAL_STATUS_INACTIVE = 'INACTIVE';
    public const TERMINAL_STATUS_CLOSED = 'CLOSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalStatusAllowableValues()
    {
        return [
            self::TERMINAL_STATUS_PENDING,
            self::TERMINAL_STATUS_ACTIVE,
            self::TERMINAL_STATUS_INACTIVE,
            self::TERMINAL_STATUS_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['terminal_model'] = $data['terminal_model'] ?? null;
        $this->container['terminal_service_mode'] = $data['terminal_service_mode'] ?? null;
        $this->container['polling_interval_sec'] = $data['polling_interval_sec'] ?? null;
        $this->container['polling_frequency_sec'] = $data['polling_frequency_sec'] ?? null;
        $this->container['maintenance_start_time'] = $data['maintenance_start_time'] ?? null;
        $this->container['maintenance_end_time'] = $data['maintenance_end_time'] ?? null;
        $this->container['terminal_profile'] = $data['terminal_profile'] ?? null;
        $this->container['terminal_status'] = $data['terminal_status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['terminal_id']) && (mb_strlen($this->container['terminal_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['terminal_id']) && !preg_match("/[A-Za-z0-9]+/", $this->container['terminal_id'])) {
            $invalidProperties[] = "invalid value for 'terminal_id', must be conform to the pattern /[A-Za-z0-9]+/.";
        }

        if (!is_null($this->container['terminal_service_mode']) && (mb_strlen($this->container['terminal_service_mode']) > 1)) {
            $invalidProperties[] = "invalid value for 'terminal_service_mode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['terminal_service_mode']) && !preg_match("/[0-9]+/", $this->container['terminal_service_mode'])) {
            $invalidProperties[] = "invalid value for 'terminal_service_mode', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['polling_interval_sec']) && (mb_strlen($this->container['polling_interval_sec']) > 12)) {
            $invalidProperties[] = "invalid value for 'polling_interval_sec', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['polling_interval_sec']) && !preg_match("/[0-9]+/", $this->container['polling_interval_sec'])) {
            $invalidProperties[] = "invalid value for 'polling_interval_sec', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['polling_frequency_sec']) && (mb_strlen($this->container['polling_frequency_sec']) > 12)) {
            $invalidProperties[] = "invalid value for 'polling_frequency_sec', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['polling_frequency_sec']) && !preg_match("/[0-9]+/", $this->container['polling_frequency_sec'])) {
            $invalidProperties[] = "invalid value for 'polling_frequency_sec', must be conform to the pattern /[0-9]+/.";
        }

        if (!is_null($this->container['maintenance_start_time']) && (mb_strlen($this->container['maintenance_start_time']) > 12)) {
            $invalidProperties[] = "invalid value for 'maintenance_start_time', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['maintenance_end_time']) && (mb_strlen($this->container['maintenance_end_time']) > 12)) {
            $invalidProperties[] = "invalid value for 'maintenance_end_time', the character length must be smaller than or equal to 12.";
        }

        $allowedValues = $this->getTerminalStatusAllowableValues();
        if (!is_null($this->container['terminal_status']) && !in_array($this->container['terminal_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_status', must be one of '%s'",
                $this->container['terminal_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id Unique terminal identifier for this merchant.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if (!is_null($terminal_id) && (mb_strlen($terminal_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling UpdateTerminalRequestModel., must be smaller than or equal to 20.');
        }
        if (!is_null($terminal_id) && (!preg_match("/[A-Za-z0-9]+/", $terminal_id))) {
            throw new \InvalidArgumentException("invalid value for $terminal_id when calling UpdateTerminalRequestModel., must conform to the pattern /[A-Za-z0-9]+/.");
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets terminal_model
     *
     * @return string|null
     */
    public function getTerminalModel()
    {
        return $this->container['terminal_model'];
    }

    /**
     * Sets terminal_model
     *
     * @param string|null $terminal_model Optional - Terminal Model
     *
     * @return self
     */
    public function setTerminalModel($terminal_model)
    {
        $this->container['terminal_model'] = $terminal_model;

        return $this;
    }

    /**
     * Gets terminal_service_mode
     *
     * @return string|null
     */
    public function getTerminalServiceMode()
    {
        return $this->container['terminal_service_mode'];
    }

    /**
     * Sets terminal_service_mode
     *
     * @param string|null $terminal_service_mode Optional - Terminal Service Mode
     *
     * @return self
     */
    public function setTerminalServiceMode($terminal_service_mode)
    {
        if (!is_null($terminal_service_mode) && (mb_strlen($terminal_service_mode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_service_mode when calling UpdateTerminalRequestModel., must be smaller than or equal to 1.');
        }
        if (!is_null($terminal_service_mode) && (!preg_match("/[0-9]+/", $terminal_service_mode))) {
            throw new \InvalidArgumentException("invalid value for $terminal_service_mode when calling UpdateTerminalRequestModel., must conform to the pattern /[0-9]+/.");
        }

        $this->container['terminal_service_mode'] = $terminal_service_mode;

        return $this;
    }

    /**
     * Gets polling_interval_sec
     *
     * @return string|null
     */
    public function getPollingIntervalSec()
    {
        return $this->container['polling_interval_sec'];
    }

    /**
     * Sets polling_interval_sec
     *
     * @param string|null $polling_interval_sec How many seconds the terminal polls for before going to sleep.
     *
     * @return self
     */
    public function setPollingIntervalSec($polling_interval_sec)
    {
        if (!is_null($polling_interval_sec) && (mb_strlen($polling_interval_sec) > 12)) {
            throw new \InvalidArgumentException('invalid length for $polling_interval_sec when calling UpdateTerminalRequestModel., must be smaller than or equal to 12.');
        }
        if (!is_null($polling_interval_sec) && (!preg_match("/[0-9]+/", $polling_interval_sec))) {
            throw new \InvalidArgumentException("invalid value for $polling_interval_sec when calling UpdateTerminalRequestModel., must conform to the pattern /[0-9]+/.");
        }

        $this->container['polling_interval_sec'] = $polling_interval_sec;

        return $this;
    }

    /**
     * Gets polling_frequency_sec
     *
     * @return string|null
     */
    public function getPollingFrequencySec()
    {
        return $this->container['polling_frequency_sec'];
    }

    /**
     * Sets polling_frequency_sec
     *
     * @param string|null $polling_frequency_sec How many seconds the terminal waits between each call to the gateway to check for a ticket.
     *
     * @return self
     */
    public function setPollingFrequencySec($polling_frequency_sec)
    {
        if (!is_null($polling_frequency_sec) && (mb_strlen($polling_frequency_sec) > 12)) {
            throw new \InvalidArgumentException('invalid length for $polling_frequency_sec when calling UpdateTerminalRequestModel., must be smaller than or equal to 12.');
        }
        if (!is_null($polling_frequency_sec) && (!preg_match("/[0-9]+/", $polling_frequency_sec))) {
            throw new \InvalidArgumentException("invalid value for $polling_frequency_sec when calling UpdateTerminalRequestModel., must conform to the pattern /[0-9]+/.");
        }

        $this->container['polling_frequency_sec'] = $polling_frequency_sec;

        return $this;
    }

    /**
     * Gets maintenance_start_time
     *
     * @return string|null
     */
    public function getMaintenanceStartTime()
    {
        return $this->container['maintenance_start_time'];
    }

    /**
     * Sets maintenance_start_time
     *
     * @param string|null $maintenance_start_time The start time of the terminal maintenance window. (hh:mm)
     *
     * @return self
     */
    public function setMaintenanceStartTime($maintenance_start_time)
    {
        if (!is_null($maintenance_start_time) && (mb_strlen($maintenance_start_time) > 12)) {
            throw new \InvalidArgumentException('invalid length for $maintenance_start_time when calling UpdateTerminalRequestModel., must be smaller than or equal to 12.');
        }

        $this->container['maintenance_start_time'] = $maintenance_start_time;

        return $this;
    }

    /**
     * Gets maintenance_end_time
     *
     * @return string|null
     */
    public function getMaintenanceEndTime()
    {
        return $this->container['maintenance_end_time'];
    }

    /**
     * Sets maintenance_end_time
     *
     * @param string|null $maintenance_end_time The end time of the terminal maintenance window. (hh:mm)
     *
     * @return self
     */
    public function setMaintenanceEndTime($maintenance_end_time)
    {
        if (!is_null($maintenance_end_time) && (mb_strlen($maintenance_end_time) > 12)) {
            throw new \InvalidArgumentException('invalid length for $maintenance_end_time when calling UpdateTerminalRequestModel., must be smaller than or equal to 12.');
        }

        $this->container['maintenance_end_time'] = $maintenance_end_time;

        return $this;
    }

    /**
     * Gets terminal_profile
     *
     * @return string|null
     */
    public function getTerminalProfile()
    {
        return $this->container['terminal_profile'];
    }

    /**
     * Sets terminal_profile
     *
     * @param string|null $terminal_profile Payload describing the terminal profile
     *
     * @return self
     */
    public function setTerminalProfile($terminal_profile)
    {
        $this->container['terminal_profile'] = $terminal_profile;

        return $this;
    }

    /**
     * Gets terminal_status
     *
     * @return string|null
     */
    public function getTerminalStatus()
    {
        return $this->container['terminal_status'];
    }

    /**
     * Sets terminal_status
     *
     * @param string|null $terminal_status Optional - Terminal Status (PENDING, ACTIVE, INACTIVE, CLOSED)
     *
     * @return self
     */
    public function setTerminalStatus($terminal_status)
    {
        $allowedValues = $this->getTerminalStatusAllowableValues();
        if (!is_null($terminal_status) && !in_array($terminal_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_status', must be one of '%s'",
                    $terminal_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminal_status'] = $terminal_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


