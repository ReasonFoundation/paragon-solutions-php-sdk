<?php
/**
 * AvsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Model;

use \ArrayAccess;
use \DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * AvsModel Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AvsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AvsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accept_exact_match' => 'string',
        'accept_zip_only' => 'string',
        'accept_address_only' => 'string',
        'accept_no_match' => 'string',
        'accept_verification_unavailable' => 'string',
        'accept_issuer_unavailable' => 'string',
        'accept_service_unsupported' => 'string',
        'accept_invalid_address_zip' => 'string',
        'accept_address_not_verifiable' => 'string',
        'accept_address_not_verifiable_global' => 'string',
        'accept_unrecognized_code' => 'string',
        'accept_no_data' => 'string',
        'accept_not_requested' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accept_exact_match' => null,
        'accept_zip_only' => null,
        'accept_address_only' => null,
        'accept_no_match' => null,
        'accept_verification_unavailable' => null,
        'accept_issuer_unavailable' => null,
        'accept_service_unsupported' => null,
        'accept_invalid_address_zip' => null,
        'accept_address_not_verifiable' => null,
        'accept_address_not_verifiable_global' => null,
        'accept_unrecognized_code' => null,
        'accept_no_data' => null,
        'accept_not_requested' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_exact_match' => 'accept_exact_match',
        'accept_zip_only' => 'accept_zip_only',
        'accept_address_only' => 'accept_address_only',
        'accept_no_match' => 'accept_no_match',
        'accept_verification_unavailable' => 'accept_verification_unavailable',
        'accept_issuer_unavailable' => 'accept_issuer_unavailable',
        'accept_service_unsupported' => 'accept_service_unsupported',
        'accept_invalid_address_zip' => 'accept_invalid_address_zip',
        'accept_address_not_verifiable' => 'accept_address_not_verifiable',
        'accept_address_not_verifiable_global' => 'accept_address_not_verifiable_global',
        'accept_unrecognized_code' => 'accept_unrecognized_code',
        'accept_no_data' => 'accept_no_data',
        'accept_not_requested' => 'accept_not_requested'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_exact_match' => 'setAcceptExactMatch',
        'accept_zip_only' => 'setAcceptZipOnly',
        'accept_address_only' => 'setAcceptAddressOnly',
        'accept_no_match' => 'setAcceptNoMatch',
        'accept_verification_unavailable' => 'setAcceptVerificationUnavailable',
        'accept_issuer_unavailable' => 'setAcceptIssuerUnavailable',
        'accept_service_unsupported' => 'setAcceptServiceUnsupported',
        'accept_invalid_address_zip' => 'setAcceptInvalidAddressZip',
        'accept_address_not_verifiable' => 'setAcceptAddressNotVerifiable',
        'accept_address_not_verifiable_global' => 'setAcceptAddressNotVerifiableGlobal',
        'accept_unrecognized_code' => 'setAcceptUnrecognizedCode',
        'accept_no_data' => 'setAcceptNoData',
        'accept_not_requested' => 'setAcceptNotRequested'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_exact_match' => 'getAcceptExactMatch',
        'accept_zip_only' => 'getAcceptZipOnly',
        'accept_address_only' => 'getAcceptAddressOnly',
        'accept_no_match' => 'getAcceptNoMatch',
        'accept_verification_unavailable' => 'getAcceptVerificationUnavailable',
        'accept_issuer_unavailable' => 'getAcceptIssuerUnavailable',
        'accept_service_unsupported' => 'getAcceptServiceUnsupported',
        'accept_invalid_address_zip' => 'getAcceptInvalidAddressZip',
        'accept_address_not_verifiable' => 'getAcceptAddressNotVerifiable',
        'accept_address_not_verifiable_global' => 'getAcceptAddressNotVerifiableGlobal',
        'accept_unrecognized_code' => 'getAcceptUnrecognizedCode',
        'accept_no_data' => 'getAcceptNoData',
        'accept_not_requested' => 'getAcceptNotRequested'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_exact_match'] = $data['accept_exact_match'] ?? null;
        $this->container['accept_zip_only'] = $data['accept_zip_only'] ?? null;
        $this->container['accept_address_only'] = $data['accept_address_only'] ?? null;
        $this->container['accept_no_match'] = $data['accept_no_match'] ?? null;
        $this->container['accept_verification_unavailable'] = $data['accept_verification_unavailable'] ?? null;
        $this->container['accept_issuer_unavailable'] = $data['accept_issuer_unavailable'] ?? null;
        $this->container['accept_service_unsupported'] = $data['accept_service_unsupported'] ?? null;
        $this->container['accept_invalid_address_zip'] = $data['accept_invalid_address_zip'] ?? null;
        $this->container['accept_address_not_verifiable'] = $data['accept_address_not_verifiable'] ?? null;
        $this->container['accept_address_not_verifiable_global'] = $data['accept_address_not_verifiable_global'] ?? null;
        $this->container['accept_unrecognized_code'] = $data['accept_unrecognized_code'] ?? null;
        $this->container['accept_no_data'] = $data['accept_no_data'] ?? null;
        $this->container['accept_not_requested'] = $data['accept_not_requested'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_exact_match
     *
     * @return string|null
     */
    public function getAcceptExactMatch()
    {
        return $this->container['accept_exact_match'];
    }

    /**
     * Sets accept_exact_match
     *
     * @param string|null $accept_exact_match Accept (T) transactions for which AV service reports exact match.
     *
     * @return self
     */
    public function setAcceptExactMatch($accept_exact_match)
    {
        $this->container['accept_exact_match'] = $accept_exact_match;

        return $this;
    }

    /**
     * Gets accept_zip_only
     *
     * @return string|null
     */
    public function getAcceptZipOnly()
    {
        return $this->container['accept_zip_only'];
    }

    /**
     * Sets accept_zip_only
     *
     * @param string|null $accept_zip_only Accept (T) transactions for which AV service reports ZIP Code match only.
     *
     * @return self
     */
    public function setAcceptZipOnly($accept_zip_only)
    {
        $this->container['accept_zip_only'] = $accept_zip_only;

        return $this;
    }

    /**
     * Gets accept_address_only
     *
     * @return string|null
     */
    public function getAcceptAddressOnly()
    {
        return $this->container['accept_address_only'];
    }

    /**
     * Sets accept_address_only
     *
     * @param string|null $accept_address_only Accept (T) transactions for which AV service reports only Address line match.
     *
     * @return self
     */
    public function setAcceptAddressOnly($accept_address_only)
    {
        $this->container['accept_address_only'] = $accept_address_only;

        return $this;
    }

    /**
     * Gets accept_no_match
     *
     * @return string|null
     */
    public function getAcceptNoMatch()
    {
        return $this->container['accept_no_match'];
    }

    /**
     * Sets accept_no_match
     *
     * @param string|null $accept_no_match Accept (T) transactions for which AV service reports no Address match.
     *
     * @return self
     */
    public function setAcceptNoMatch($accept_no_match)
    {
        $this->container['accept_no_match'] = $accept_no_match;

        return $this;
    }

    /**
     * Gets accept_verification_unavailable
     *
     * @return string|null
     */
    public function getAcceptVerificationUnavailable()
    {
        return $this->container['accept_verification_unavailable'];
    }

    /**
     * Sets accept_verification_unavailable
     *
     * @param string|null $accept_verification_unavailable Accept (T) transactions for which AV service reports Address verification service not available.
     *
     * @return self
     */
    public function setAcceptVerificationUnavailable($accept_verification_unavailable)
    {
        $this->container['accept_verification_unavailable'] = $accept_verification_unavailable;

        return $this;
    }

    /**
     * Gets accept_issuer_unavailable
     *
     * @return string|null
     */
    public function getAcceptIssuerUnavailable()
    {
        return $this->container['accept_issuer_unavailable'];
    }

    /**
     * Sets accept_issuer_unavailable
     *
     * @param string|null $accept_issuer_unavailable Accept (T) transactions for which AV service reports Address verification service not available.
     *
     * @return self
     */
    public function setAcceptIssuerUnavailable($accept_issuer_unavailable)
    {
        $this->container['accept_issuer_unavailable'] = $accept_issuer_unavailable;

        return $this;
    }

    /**
     * Gets accept_service_unsupported
     *
     * @return string|null
     */
    public function getAcceptServiceUnsupported()
    {
        return $this->container['accept_service_unsupported'];
    }

    /**
     * Sets accept_service_unsupported
     *
     * @param string|null $accept_service_unsupported Accept (T) transactions for which AV service reports Address verification is not supported by process.
     *
     * @return self
     */
    public function setAcceptServiceUnsupported($accept_service_unsupported)
    {
        $this->container['accept_service_unsupported'] = $accept_service_unsupported;

        return $this;
    }

    /**
     * Gets accept_invalid_address_zip
     *
     * @return string|null
     */
    public function getAcceptInvalidAddressZip()
    {
        return $this->container['accept_invalid_address_zip'];
    }

    /**
     * Sets accept_invalid_address_zip
     *
     * @param string|null $accept_invalid_address_zip Accept (T) transactions for which AV service reports formats of address and ZIP code are invalid.
     *
     * @return self
     */
    public function setAcceptInvalidAddressZip($accept_invalid_address_zip)
    {
        $this->container['accept_invalid_address_zip'] = $accept_invalid_address_zip;

        return $this;
    }

    /**
     * Gets accept_address_not_verifiable
     *
     * @return string|null
     */
    public function getAcceptAddressNotVerifiable()
    {
        return $this->container['accept_address_not_verifiable'];
    }

    /**
     * Sets accept_address_not_verifiable
     *
     * @param string|null $accept_address_not_verifiable Accept (T) transactions for which AV service reports Address not verifiable.
     *
     * @return self
     */
    public function setAcceptAddressNotVerifiable($accept_address_not_verifiable)
    {
        $this->container['accept_address_not_verifiable'] = $accept_address_not_verifiable;

        return $this;
    }

    /**
     * Gets accept_address_not_verifiable_global
     *
     * @return string|null
     */
    public function getAcceptAddressNotVerifiableGlobal()
    {
        return $this->container['accept_address_not_verifiable_global'];
    }

    /**
     * Sets accept_address_not_verifiable_global
     *
     * @param string|null $accept_address_not_verifiable_global Accept (T) transactions for which global AV service reports Address is not verifiable.
     *
     * @return self
     */
    public function setAcceptAddressNotVerifiableGlobal($accept_address_not_verifiable_global)
    {
        $this->container['accept_address_not_verifiable_global'] = $accept_address_not_verifiable_global;

        return $this;
    }

    /**
     * Gets accept_unrecognized_code
     *
     * @return string|null
     */
    public function getAcceptUnrecognizedCode()
    {
        return $this->container['accept_unrecognized_code'];
    }

    /**
     * Sets accept_unrecognized_code
     *
     * @param string|null $accept_unrecognized_code Accept (T) transactions for which AV service returns unrecognized result.
     *
     * @return self
     */
    public function setAcceptUnrecognizedCode($accept_unrecognized_code)
    {
        $this->container['accept_unrecognized_code'] = $accept_unrecognized_code;

        return $this;
    }

    /**
     * Gets accept_no_data
     *
     * @return string|null
     */
    public function getAcceptNoData()
    {
        return $this->container['accept_no_data'];
    }

    /**
     * Sets accept_no_data
     *
     * @param string|null $accept_no_data Accept (T) transactions for which AV service returns no result.
     *
     * @return self
     */
    public function setAcceptNoData($accept_no_data)
    {
        $this->container['accept_no_data'] = $accept_no_data;

        return $this;
    }

    /**
     * Gets accept_not_requested
     *
     * @return string|null
     */
    public function getAcceptNotRequested()
    {
        return $this->container['accept_not_requested'];
    }

    /**
     * Sets accept_not_requested
     *
     * @param string|null $accept_not_requested Accept (T) transactions for which AV was not requested.
     *
     * @return self
     */
    public function setAcceptNotRequested($accept_not_requested)
    {
        $this->container['accept_not_requested'] = $accept_not_requested;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


