<?php
/**
 * PaymentSafeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DCarbone\ParagonSolutionsPHPSDK\ApiException;
use DCarbone\ParagonSolutionsPHPSDK\Configuration;
use DCarbone\ParagonSolutionsPHPSDK\HeaderSelector;
use DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * PaymentSafeApi Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentSafeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyDelete
     *
     * Delete secured Credit Card details.
     *
     * @param  string $card_key card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeCardsByCardKeyDelete($card_key, $authorization, $card_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeCardsByCardKeyDeleteWithHttpInfo($card_key, $authorization, $card_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyDeleteWithHttpInfo
     *
     * Delete secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeCardsByCardKeyDeleteWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $request = $this->v2PaymentsafeCardsByCardKeyDeleteRequest($card_key, $authorization, $card_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyDeleteAsync
     *
     * Delete secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyDeleteAsync($card_key, $authorization, $card_token_request_model = null)
    {
        return $this->v2PaymentsafeCardsByCardKeyDeleteAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyDeleteAsyncWithHttpInfo
     *
     * Delete secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyDeleteAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeCardsByCardKeyDeleteRequest($card_key, $authorization, $card_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeCardsByCardKeyDelete'
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeCardsByCardKeyDeleteRequest($card_key, $authorization, $card_token_request_model = null)
    {
        // verify the required parameter 'card_key' is set
        if ($card_key === null || (is_array($card_key) && count($card_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_key when calling v2PaymentsafeCardsByCardKeyDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeCardsByCardKeyDelete'
            );
        }

        $resourcePath = '/v2/paymentsafe/cards/{card_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($card_key !== null) {
            $resourcePath = str_replace(
                '{' . 'card_key' . '}',
                ObjectSerializer::toPathValue($card_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($card_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($card_token_request_model));
            } else {
                $httpBody = $card_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyGet
     *
     * Get details about a PaymentSafe secured Credit Card.
     *
     * @param  string $card_key card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel
     */
    public function v2PaymentsafeCardsByCardKeyGet($card_key, $authorization)
    {
        list($response) = $this->v2PaymentsafeCardsByCardKeyGetWithHttpInfo($card_key, $authorization);
        return $response;
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyGetWithHttpInfo
     *
     * Get details about a PaymentSafe secured Credit Card.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeCardsByCardKeyGetWithHttpInfo($card_key, $authorization)
    {
        $request = $this->v2PaymentsafeCardsByCardKeyGetRequest($card_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyGetAsync
     *
     * Get details about a PaymentSafe secured Credit Card.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyGetAsync($card_key, $authorization)
    {
        return $this->v2PaymentsafeCardsByCardKeyGetAsyncWithHttpInfo($card_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyGetAsyncWithHttpInfo
     *
     * Get details about a PaymentSafe secured Credit Card.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyGetAsyncWithHttpInfo($card_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCardResponseModel';
        $request = $this->v2PaymentsafeCardsByCardKeyGetRequest($card_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeCardsByCardKeyGet'
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeCardsByCardKeyGetRequest($card_key, $authorization)
    {
        // verify the required parameter 'card_key' is set
        if ($card_key === null || (is_array($card_key) && count($card_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_key when calling v2PaymentsafeCardsByCardKeyGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeCardsByCardKeyGet'
            );
        }

        $resourcePath = '/v2/paymentsafe/cards/{card_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($card_key !== null) {
            $resourcePath = str_replace(
                '{' . 'card_key' . '}',
                ObjectSerializer::toPathValue($card_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPatch
     *
     * Partial update of secured Credit Card details.
     *
     * @param  string $card_key card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeCardsByCardKeyPatch($card_key, $authorization, $card_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeCardsByCardKeyPatchWithHttpInfo($card_key, $authorization, $card_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPatchWithHttpInfo
     *
     * Partial update of secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeCardsByCardKeyPatchWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $request = $this->v2PaymentsafeCardsByCardKeyPatchRequest($card_key, $authorization, $card_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPatchAsync
     *
     * Partial update of secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyPatchAsync($card_key, $authorization, $card_token_request_model = null)
    {
        return $this->v2PaymentsafeCardsByCardKeyPatchAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPatchAsyncWithHttpInfo
     *
     * Partial update of secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyPatchAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeCardsByCardKeyPatchRequest($card_key, $authorization, $card_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeCardsByCardKeyPatch'
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeCardsByCardKeyPatchRequest($card_key, $authorization, $card_token_request_model = null)
    {
        // verify the required parameter 'card_key' is set
        if ($card_key === null || (is_array($card_key) && count($card_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_key when calling v2PaymentsafeCardsByCardKeyPatch'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeCardsByCardKeyPatch'
            );
        }

        $resourcePath = '/v2/paymentsafe/cards/{card_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($card_key !== null) {
            $resourcePath = str_replace(
                '{' . 'card_key' . '}',
                ObjectSerializer::toPathValue($card_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($card_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($card_token_request_model));
            } else {
                $httpBody = $card_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPut
     *
     * Update secured Credit Card details.
     *
     * @param  string $card_key card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeCardsByCardKeyPut($card_key, $authorization, $card_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeCardsByCardKeyPutWithHttpInfo($card_key, $authorization, $card_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPutWithHttpInfo
     *
     * Update secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeCardsByCardKeyPutWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $request = $this->v2PaymentsafeCardsByCardKeyPutRequest($card_key, $authorization, $card_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPutAsync
     *
     * Update secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyPutAsync($card_key, $authorization, $card_token_request_model = null)
    {
        return $this->v2PaymentsafeCardsByCardKeyPutAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeCardsByCardKeyPutAsyncWithHttpInfo
     *
     * Update secured Credit Card details.
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsByCardKeyPutAsyncWithHttpInfo($card_key, $authorization, $card_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeCardsByCardKeyPutRequest($card_key, $authorization, $card_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeCardsByCardKeyPut'
     *
     * @param  string $card_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeCardsByCardKeyPutRequest($card_key, $authorization, $card_token_request_model = null)
    {
        // verify the required parameter 'card_key' is set
        if ($card_key === null || (is_array($card_key) && count($card_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_key when calling v2PaymentsafeCardsByCardKeyPut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeCardsByCardKeyPut'
            );
        }

        $resourcePath = '/v2/paymentsafe/cards/{card_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($card_key !== null) {
            $resourcePath = str_replace(
                '{' . 'card_key' . '}',
                ObjectSerializer::toPathValue($card_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($card_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($card_token_request_model));
            } else {
                $httpBody = $card_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeCardsPost
     *
     * Add secured Credit Card details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeCardsPost($authorization, $card_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeCardsPostWithHttpInfo($authorization, $card_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeCardsPostWithHttpInfo
     *
     * Add secured Credit Card details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeCardsPostWithHttpInfo($authorization, $card_token_request_model = null)
    {
        $request = $this->v2PaymentsafeCardsPostRequest($authorization, $card_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeCardsPostAsync
     *
     * Add secured Credit Card details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsPostAsync($authorization, $card_token_request_model = null)
    {
        return $this->v2PaymentsafeCardsPostAsyncWithHttpInfo($authorization, $card_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeCardsPostAsyncWithHttpInfo
     *
     * Add secured Credit Card details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeCardsPostAsyncWithHttpInfo($authorization, $card_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeCardsPostRequest($authorization, $card_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeCardsPost'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CardTokenRequestModel $card_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeCardsPostRequest($authorization, $card_token_request_model = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeCardsPost'
            );
        }

        $resourcePath = '/v2/paymentsafe/cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($card_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($card_token_request_model));
            } else {
                $httpBody = $card_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyDelete
     *
     * Delete secured Check details.
     *
     * @param  string $check_key check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeChecksByCheckKeyDelete($check_key, $authorization, $check_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeChecksByCheckKeyDeleteWithHttpInfo($check_key, $authorization, $check_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyDeleteWithHttpInfo
     *
     * Delete secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeChecksByCheckKeyDeleteWithHttpInfo($check_key, $authorization, $check_token_request_model = null)
    {
        $request = $this->v2PaymentsafeChecksByCheckKeyDeleteRequest($check_key, $authorization, $check_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyDeleteAsync
     *
     * Delete secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyDeleteAsync($check_key, $authorization, $check_token_request_model = null)
    {
        return $this->v2PaymentsafeChecksByCheckKeyDeleteAsyncWithHttpInfo($check_key, $authorization, $check_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyDeleteAsyncWithHttpInfo
     *
     * Delete secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyDeleteAsyncWithHttpInfo($check_key, $authorization, $check_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeChecksByCheckKeyDeleteRequest($check_key, $authorization, $check_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeChecksByCheckKeyDelete'
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeChecksByCheckKeyDeleteRequest($check_key, $authorization, $check_token_request_model = null)
    {
        // verify the required parameter 'check_key' is set
        if ($check_key === null || (is_array($check_key) && count($check_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_key when calling v2PaymentsafeChecksByCheckKeyDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeChecksByCheckKeyDelete'
            );
        }

        $resourcePath = '/v2/paymentsafe/checks/{check_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($check_key !== null) {
            $resourcePath = str_replace(
                '{' . 'check_key' . '}',
                ObjectSerializer::toPathValue($check_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($check_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_token_request_model));
            } else {
                $httpBody = $check_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyGet
     *
     * Get details about a PaymentSafe secured Check.
     *
     * @param  string $check_key check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel
     */
    public function v2PaymentsafeChecksByCheckKeyGet($check_key, $authorization)
    {
        list($response) = $this->v2PaymentsafeChecksByCheckKeyGetWithHttpInfo($check_key, $authorization);
        return $response;
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyGetWithHttpInfo
     *
     * Get details about a PaymentSafe secured Check.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeChecksByCheckKeyGetWithHttpInfo($check_key, $authorization)
    {
        $request = $this->v2PaymentsafeChecksByCheckKeyGetRequest($check_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyGetAsync
     *
     * Get details about a PaymentSafe secured Check.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyGetAsync($check_key, $authorization)
    {
        return $this->v2PaymentsafeChecksByCheckKeyGetAsyncWithHttpInfo($check_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyGetAsyncWithHttpInfo
     *
     * Get details about a PaymentSafe secured Check.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyGetAsyncWithHttpInfo($check_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentSafeCheckResponseModel';
        $request = $this->v2PaymentsafeChecksByCheckKeyGetRequest($check_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeChecksByCheckKeyGet'
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeChecksByCheckKeyGetRequest($check_key, $authorization)
    {
        // verify the required parameter 'check_key' is set
        if ($check_key === null || (is_array($check_key) && count($check_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_key when calling v2PaymentsafeChecksByCheckKeyGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeChecksByCheckKeyGet'
            );
        }

        $resourcePath = '/v2/paymentsafe/checks/{check_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($check_key !== null) {
            $resourcePath = str_replace(
                '{' . 'check_key' . '}',
                ObjectSerializer::toPathValue($check_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyPut
     *
     * Update secured Check details.
     *
     * @param  string $check_key check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeChecksByCheckKeyPut($check_key, $authorization, $check_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeChecksByCheckKeyPutWithHttpInfo($check_key, $authorization, $check_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyPutWithHttpInfo
     *
     * Update secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeChecksByCheckKeyPutWithHttpInfo($check_key, $authorization, $check_token_request_model = null)
    {
        $request = $this->v2PaymentsafeChecksByCheckKeyPutRequest($check_key, $authorization, $check_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyPutAsync
     *
     * Update secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyPutAsync($check_key, $authorization, $check_token_request_model = null)
    {
        return $this->v2PaymentsafeChecksByCheckKeyPutAsyncWithHttpInfo($check_key, $authorization, $check_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeChecksByCheckKeyPutAsyncWithHttpInfo
     *
     * Update secured Check details.
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksByCheckKeyPutAsyncWithHttpInfo($check_key, $authorization, $check_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeChecksByCheckKeyPutRequest($check_key, $authorization, $check_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeChecksByCheckKeyPut'
     *
     * @param  string $check_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeChecksByCheckKeyPutRequest($check_key, $authorization, $check_token_request_model = null)
    {
        // verify the required parameter 'check_key' is set
        if ($check_key === null || (is_array($check_key) && count($check_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_key when calling v2PaymentsafeChecksByCheckKeyPut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeChecksByCheckKeyPut'
            );
        }

        $resourcePath = '/v2/paymentsafe/checks/{check_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($check_key !== null) {
            $resourcePath = str_replace(
                '{' . 'check_key' . '}',
                ObjectSerializer::toPathValue($check_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($check_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_token_request_model));
            } else {
                $httpBody = $check_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2PaymentsafeChecksPost
     *
     * Add secured Check details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse
     */
    public function v2PaymentsafeChecksPost($authorization, $check_token_request_model = null)
    {
        list($response) = $this->v2PaymentsafeChecksPostWithHttpInfo($authorization, $check_token_request_model);
        return $response;
    }

    /**
     * Operation v2PaymentsafeChecksPostWithHttpInfo
     *
     * Add secured Check details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2PaymentsafeChecksPostWithHttpInfo($authorization, $check_token_request_model = null)
    {
        $request = $this->v2PaymentsafeChecksPostRequest($authorization, $check_token_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2PaymentsafeChecksPostAsync
     *
     * Add secured Check details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksPostAsync($authorization, $check_token_request_model = null)
    {
        return $this->v2PaymentsafeChecksPostAsyncWithHttpInfo($authorization, $check_token_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2PaymentsafeChecksPostAsyncWithHttpInfo
     *
     * Add secured Check details.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2PaymentsafeChecksPostAsyncWithHttpInfo($authorization, $check_token_request_model = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\PaymentSafeResponse';
        $request = $this->v2PaymentsafeChecksPostRequest($authorization, $check_token_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2PaymentsafeChecksPost'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CheckTokenRequestModel $check_token_request_model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2PaymentsafeChecksPostRequest($authorization, $check_token_request_model = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2PaymentsafeChecksPost'
            );
        }

        $resourcePath = '/v2/paymentsafe/checks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($check_token_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_token_request_model));
            } else {
                $httpBody = $check_token_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
