<?php
/**
 * TicketApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DCarbone\ParagonSolutionsPHPSDK\ApiException;
use DCarbone\ParagonSolutionsPHPSDK\Configuration;
use DCarbone\ParagonSolutionsPHPSDK\HeaderSelector;
use DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * TicketApi Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TicketApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v2CloudposTicketByTicketIdGet
     *
     * Get a Ticket by ID
     *
     * @param  int $ticket_id Gateway Ticket ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel
     */
    public function v2CloudposTicketByTicketIdGet($ticket_id, $authorization)
    {
        list($response) = $this->v2CloudposTicketByTicketIdGetWithHttpInfo($ticket_id, $authorization);
        return $response;
    }

    /**
     * Operation v2CloudposTicketByTicketIdGetWithHttpInfo
     *
     * Get a Ticket by ID
     *
     * @param  int $ticket_id Gateway Ticket ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketByTicketIdGetWithHttpInfo($ticket_id, $authorization)
    {
        $request = $this->v2CloudposTicketByTicketIdGetRequest($ticket_id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketByTicketIdGetAsync
     *
     * Get a Ticket by ID
     *
     * @param  int $ticket_id Gateway Ticket ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketByTicketIdGetAsync($ticket_id, $authorization)
    {
        return $this->v2CloudposTicketByTicketIdGetAsyncWithHttpInfo($ticket_id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketByTicketIdGetAsyncWithHttpInfo
     *
     * Get a Ticket by ID
     *
     * @param  int $ticket_id Gateway Ticket ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketByTicketIdGetAsyncWithHttpInfo($ticket_id, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
        $request = $this->v2CloudposTicketByTicketIdGetRequest($ticket_id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketByTicketIdGet'
     *
     * @param  int $ticket_id Gateway Ticket ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketByTicketIdGetRequest($ticket_id, $authorization)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling v2CloudposTicketByTicketIdGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketByTicketIdGet'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/{ticket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticket_id' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketOpenGet
     *
     * Get Open Tickets
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket get_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel
     */
    public function v2CloudposTicketOpenGet($authorization, $get_ticket)
    {
        list($response) = $this->v2CloudposTicketOpenGetWithHttpInfo($authorization, $get_ticket);
        return $response;
    }

    /**
     * Operation v2CloudposTicketOpenGetWithHttpInfo
     *
     * Get Open Tickets
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketOpenGetWithHttpInfo($authorization, $get_ticket)
    {
        $request = $this->v2CloudposTicketOpenGetRequest($authorization, $get_ticket);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketOpenGetAsync
     *
     * Get Open Tickets
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketOpenGetAsync($authorization, $get_ticket)
    {
        return $this->v2CloudposTicketOpenGetAsyncWithHttpInfo($authorization, $get_ticket)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketOpenGetAsyncWithHttpInfo
     *
     * Get Open Tickets
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketOpenGetAsyncWithHttpInfo($authorization, $get_ticket)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
        $request = $this->v2CloudposTicketOpenGetRequest($authorization, $get_ticket);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketOpenGet'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketOpenGetRequest($authorization, $get_ticket)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketOpenGet'
            );
        }
        // verify the required parameter 'get_ticket' is set
        if ($get_ticket === null || (is_array($get_ticket) && count($get_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_ticket when calling v2CloudposTicketOpenGet'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml']
            );
        }

        // for model (json/xml)
        if (isset($get_ticket)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($get_ticket));
            } else {
                $httpBody = $get_ticket;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketPost
     *
     * Create a Ticket
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketRequestModel $create_ticket create_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel
     */
    public function v2CloudposTicketPost($authorization, $create_ticket)
    {
        list($response) = $this->v2CloudposTicketPostWithHttpInfo($authorization, $create_ticket);
        return $response;
    }

    /**
     * Operation v2CloudposTicketPostWithHttpInfo
     *
     * Create a Ticket
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketRequestModel $create_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketPostWithHttpInfo($authorization, $create_ticket)
    {
        $request = $this->v2CloudposTicketPostRequest($authorization, $create_ticket);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketPostAsync
     *
     * Create a Ticket
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketRequestModel $create_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketPostAsync($authorization, $create_ticket)
    {
        return $this->v2CloudposTicketPostAsyncWithHttpInfo($authorization, $create_ticket)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketPostAsyncWithHttpInfo
     *
     * Create a Ticket
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketRequestModel $create_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketPostAsyncWithHttpInfo($authorization, $create_ticket)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketResponseModel';
        $request = $this->v2CloudposTicketPostRequest($authorization, $create_ticket);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketPost'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\CreateTicketRequestModel $create_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketPostRequest($authorization, $create_ticket)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketPost'
            );
        }
        // verify the required parameter 'create_ticket' is set
        if ($create_ticket === null || (is_array($create_ticket) && count($create_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_ticket when calling v2CloudposTicketPost'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml']
            );
        }

        // for model (json/xml)
        if (isset($create_ticket)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_ticket));
            } else {
                $httpBody = $create_ticket;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketReceiptByPaymentReferenceNumberGet
     *
     * Get Receipt Data
     *
     * @param  int $payment_reference_number Gateway PNREF (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel
     */
    public function v2CloudposTicketReceiptByPaymentReferenceNumberGet($payment_reference_number, $authorization)
    {
        list($response) = $this->v2CloudposTicketReceiptByPaymentReferenceNumberGetWithHttpInfo($payment_reference_number, $authorization);
        return $response;
    }

    /**
     * Operation v2CloudposTicketReceiptByPaymentReferenceNumberGetWithHttpInfo
     *
     * Get Receipt Data
     *
     * @param  int $payment_reference_number Gateway PNREF (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketReceiptByPaymentReferenceNumberGetWithHttpInfo($payment_reference_number, $authorization)
    {
        $request = $this->v2CloudposTicketReceiptByPaymentReferenceNumberGetRequest($payment_reference_number, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketReceiptByPaymentReferenceNumberGetAsync
     *
     * Get Receipt Data
     *
     * @param  int $payment_reference_number Gateway PNREF (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketReceiptByPaymentReferenceNumberGetAsync($payment_reference_number, $authorization)
    {
        return $this->v2CloudposTicketReceiptByPaymentReferenceNumberGetAsyncWithHttpInfo($payment_reference_number, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketReceiptByPaymentReferenceNumberGetAsyncWithHttpInfo
     *
     * Get Receipt Data
     *
     * @param  int $payment_reference_number Gateway PNREF (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketReceiptByPaymentReferenceNumberGetAsyncWithHttpInfo($payment_reference_number, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetReceiptResponseModel';
        $request = $this->v2CloudposTicketReceiptByPaymentReferenceNumberGetRequest($payment_reference_number, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketReceiptByPaymentReferenceNumberGet'
     *
     * @param  int $payment_reference_number Gateway PNREF (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketReceiptByPaymentReferenceNumberGetRequest($payment_reference_number, $authorization)
    {
        // verify the required parameter 'payment_reference_number' is set
        if ($payment_reference_number === null || (is_array($payment_reference_number) && count($payment_reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_reference_number when calling v2CloudposTicketReceiptByPaymentReferenceNumberGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketReceiptByPaymentReferenceNumberGet'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/receipt/{payment_reference_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($payment_reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'payment_reference_number' . '}',
                ObjectSerializer::toPathValue($payment_reference_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketStatusGet
     *
     * Get Tickets by Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket get_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel
     */
    public function v2CloudposTicketStatusGet($authorization, $get_ticket)
    {
        list($response) = $this->v2CloudposTicketStatusGetWithHttpInfo($authorization, $get_ticket);
        return $response;
    }

    /**
     * Operation v2CloudposTicketStatusGetWithHttpInfo
     *
     * Get Tickets by Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketStatusGetWithHttpInfo($authorization, $get_ticket)
    {
        $request = $this->v2CloudposTicketStatusGetRequest($authorization, $get_ticket);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketStatusGetAsync
     *
     * Get Tickets by Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketStatusGetAsync($authorization, $get_ticket)
    {
        return $this->v2CloudposTicketStatusGetAsyncWithHttpInfo($authorization, $get_ticket)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketStatusGetAsyncWithHttpInfo
     *
     * Get Tickets by Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketStatusGetAsyncWithHttpInfo($authorization, $get_ticket)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketResponseModel';
        $request = $this->v2CloudposTicketStatusGetRequest($authorization, $get_ticket);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketStatusGet'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\GetTicketRequestModel $get_ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketStatusGetRequest($authorization, $get_ticket)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketStatusGet'
            );
        }
        // verify the required parameter 'get_ticket' is set
        if ($get_ticket === null || (is_array($get_ticket) && count($get_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_ticket when calling v2CloudposTicketStatusGet'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($get_ticket)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($get_ticket));
            } else {
                $httpBody = $get_ticket;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketStatusPatch
     *
     * Update a Ticket Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusRequestModel $update_ticketstatus update_ticketstatus (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel
     */
    public function v2CloudposTicketStatusPatch($authorization, $update_ticketstatus)
    {
        list($response) = $this->v2CloudposTicketStatusPatchWithHttpInfo($authorization, $update_ticketstatus);
        return $response;
    }

    /**
     * Operation v2CloudposTicketStatusPatchWithHttpInfo
     *
     * Update a Ticket Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusRequestModel $update_ticketstatus (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketStatusPatchWithHttpInfo($authorization, $update_ticketstatus)
    {
        $request = $this->v2CloudposTicketStatusPatchRequest($authorization, $update_ticketstatus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketStatusPatchAsync
     *
     * Update a Ticket Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusRequestModel $update_ticketstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketStatusPatchAsync($authorization, $update_ticketstatus)
    {
        return $this->v2CloudposTicketStatusPatchAsyncWithHttpInfo($authorization, $update_ticketstatus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketStatusPatchAsyncWithHttpInfo
     *
     * Update a Ticket Status
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusRequestModel $update_ticketstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketStatusPatchAsyncWithHttpInfo($authorization, $update_ticketstatus)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusResponseModel';
        $request = $this->v2CloudposTicketStatusPatchRequest($authorization, $update_ticketstatus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketStatusPatch'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateTicketStatusRequestModel $update_ticketstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketStatusPatchRequest($authorization, $update_ticketstatus)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketStatusPatch'
            );
        }
        // verify the required parameter 'update_ticketstatus' is set
        if ($update_ticketstatus === null || (is_array($update_ticketstatus) && count($update_ticketstatus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_ticketstatus when calling v2CloudposTicketStatusPatch'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml']
            );
        }

        // for model (json/xml)
        if (isset($update_ticketstatus)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_ticketstatus));
            } else {
                $httpBody = $update_ticketstatus;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CloudposTicketTicketreportByMerchantKeyPost
     *
     * Generate Ticket Report
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportRequestModel $filter_by Report filter criteria (required)
     * @param  string $order_by Order by field  Currently supported:       ticket_create_date, payment_reference_number, auth_amount, ticket_id  Note: Add &#39; ASC&#39; or &#39; DESC&#39; after the field to sort ascending or descending. (Ex: ticket_id ASC)  Note: Only one (1) field can be used to sort the results (optional)
     * @param  int $skip Number of records to skip prior to returning result set. (optional)
     * @param  int $top Select from top n number of records (optional)
     * @param  string $merchant_key Gateway merchant key (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel
     */
    public function v2CloudposTicketTicketreportByMerchantKeyPost($authorization, $filter_by, $order_by = null, $skip = null, $top = null, $merchant_key = null)
    {
        list($response) = $this->v2CloudposTicketTicketreportByMerchantKeyPostWithHttpInfo($authorization, $filter_by, $order_by, $skip, $top, $merchant_key);
        return $response;
    }

    /**
     * Operation v2CloudposTicketTicketreportByMerchantKeyPostWithHttpInfo
     *
     * Generate Ticket Report
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportRequestModel $filter_by Report filter criteria (required)
     * @param  string $order_by Order by field  Currently supported:       ticket_create_date, payment_reference_number, auth_amount, ticket_id  Note: Add &#39; ASC&#39; or &#39; DESC&#39; after the field to sort ascending or descending. (Ex: ticket_id ASC)  Note: Only one (1) field can be used to sort the results (optional)
     * @param  int $skip Number of records to skip prior to returning result set. (optional)
     * @param  int $top Select from top n number of records (optional)
     * @param  string $merchant_key Gateway merchant key (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CloudposTicketTicketreportByMerchantKeyPostWithHttpInfo($authorization, $filter_by, $order_by = null, $skip = null, $top = null, $merchant_key = null)
    {
        $request = $this->v2CloudposTicketTicketreportByMerchantKeyPostRequest($authorization, $filter_by, $order_by, $skip, $top, $merchant_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CloudposTicketTicketreportByMerchantKeyPostAsync
     *
     * Generate Ticket Report
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportRequestModel $filter_by Report filter criteria (required)
     * @param  string $order_by Order by field  Currently supported:       ticket_create_date, payment_reference_number, auth_amount, ticket_id  Note: Add &#39; ASC&#39; or &#39; DESC&#39; after the field to sort ascending or descending. (Ex: ticket_id ASC)  Note: Only one (1) field can be used to sort the results (optional)
     * @param  int $skip Number of records to skip prior to returning result set. (optional)
     * @param  int $top Select from top n number of records (optional)
     * @param  string $merchant_key Gateway merchant key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketTicketreportByMerchantKeyPostAsync($authorization, $filter_by, $order_by = null, $skip = null, $top = null, $merchant_key = null)
    {
        return $this->v2CloudposTicketTicketreportByMerchantKeyPostAsyncWithHttpInfo($authorization, $filter_by, $order_by, $skip, $top, $merchant_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CloudposTicketTicketreportByMerchantKeyPostAsyncWithHttpInfo
     *
     * Generate Ticket Report
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportRequestModel $filter_by Report filter criteria (required)
     * @param  string $order_by Order by field  Currently supported:       ticket_create_date, payment_reference_number, auth_amount, ticket_id  Note: Add &#39; ASC&#39; or &#39; DESC&#39; after the field to sort ascending or descending. (Ex: ticket_id ASC)  Note: Only one (1) field can be used to sort the results (optional)
     * @param  int $skip Number of records to skip prior to returning result set. (optional)
     * @param  int $top Select from top n number of records (optional)
     * @param  string $merchant_key Gateway merchant key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CloudposTicketTicketreportByMerchantKeyPostAsyncWithHttpInfo($authorization, $filter_by, $order_by = null, $skip = null, $top = null, $merchant_key = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportResponseModel';
        $request = $this->v2CloudposTicketTicketreportByMerchantKeyPostRequest($authorization, $filter_by, $order_by, $skip, $top, $merchant_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CloudposTicketTicketreportByMerchantKeyPost'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TicketReportRequestModel $filter_by Report filter criteria (required)
     * @param  string $order_by Order by field  Currently supported:       ticket_create_date, payment_reference_number, auth_amount, ticket_id  Note: Add &#39; ASC&#39; or &#39; DESC&#39; after the field to sort ascending or descending. (Ex: ticket_id ASC)  Note: Only one (1) field can be used to sort the results (optional)
     * @param  int $skip Number of records to skip prior to returning result set. (optional)
     * @param  int $top Select from top n number of records (optional)
     * @param  string $merchant_key Gateway merchant key (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2CloudposTicketTicketreportByMerchantKeyPostRequest($authorization, $filter_by, $order_by = null, $skip = null, $top = null, $merchant_key = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2CloudposTicketTicketreportByMerchantKeyPost'
            );
        }
        // verify the required parameter 'filter_by' is set
        if ($filter_by === null || (is_array($filter_by) && count($filter_by) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_by when calling v2CloudposTicketTicketreportByMerchantKeyPost'
            );
        }

        $resourcePath = '/v2/cloudpos/ticket/ticketreport/{merchant_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchant_key,
            'merchant_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($filter_by)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($filter_by));
            } else {
                $httpBody = $filter_by;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
