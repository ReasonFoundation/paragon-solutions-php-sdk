<?php
/**
 * HostedPaymentPlusApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DCarbone\ParagonSolutionsPHPSDK\ApiException;
use DCarbone\ParagonSolutionsPHPSDK\Configuration;
use DCarbone\ParagonSolutionsPHPSDK\HeaderSelector;
use DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * HostedPaymentPlusApi Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HostedPaymentPlusApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v2HpplusCreatetokenPost
     *
     * Creates a one-time use, short-lived, Hosted Payment Plus Token for use in a subsequent transaction.
     *
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TokenGenerationModel $create_token create_token (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse
     */
    public function v2HpplusCreatetokenPost($create_token)
    {
        list($response) = $this->v2HpplusCreatetokenPostWithHttpInfo($create_token);
        return $response;
    }

    /**
     * Operation v2HpplusCreatetokenPostWithHttpInfo
     *
     * Creates a one-time use, short-lived, Hosted Payment Plus Token for use in a subsequent transaction.
     *
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TokenGenerationModel $create_token (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2HpplusCreatetokenPostWithHttpInfo($create_token)
    {
        $request = $this->v2HpplusCreatetokenPostRequest($create_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2HpplusCreatetokenPostAsync
     *
     * Creates a one-time use, short-lived, Hosted Payment Plus Token for use in a subsequent transaction.
     *
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TokenGenerationModel $create_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusCreatetokenPostAsync($create_token)
    {
        return $this->v2HpplusCreatetokenPostAsyncWithHttpInfo($create_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2HpplusCreatetokenPostAsyncWithHttpInfo
     *
     * Creates a one-time use, short-lived, Hosted Payment Plus Token for use in a subsequent transaction.
     *
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TokenGenerationModel $create_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusCreatetokenPostAsyncWithHttpInfo($create_token)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
        $request = $this->v2HpplusCreatetokenPostRequest($create_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2HpplusCreatetokenPost'
     *
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\TokenGenerationModel $create_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2HpplusCreatetokenPostRequest($create_token)
    {
        // verify the required parameter 'create_token' is set
        if ($create_token === null || (is_array($create_token) && count($create_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_token when calling v2HpplusCreatetokenPost'
            );
        }

        $resourcePath = '/v2/hpplus/createtoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($create_token)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_token));
            } else {
                $httpBody = $create_token;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysDelete
     *
     * Deletes the merchant&#39;s Hosted Page Plus API Key
     *
     * @param  string $merchant_key merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse
     */
    public function v2HpplusMerchantsByMerchantKeyKeysDelete($merchant_key, $authorization)
    {
        list($response) = $this->v2HpplusMerchantsByMerchantKeyKeysDeleteWithHttpInfo($merchant_key, $authorization);
        return $response;
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysDeleteWithHttpInfo
     *
     * Deletes the merchant&#39;s Hosted Page Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2HpplusMerchantsByMerchantKeyKeysDeleteWithHttpInfo($merchant_key, $authorization)
    {
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysDeleteRequest($merchant_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysDeleteAsync
     *
     * Deletes the merchant&#39;s Hosted Page Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysDeleteAsync($merchant_key, $authorization)
    {
        return $this->v2HpplusMerchantsByMerchantKeyKeysDeleteAsyncWithHttpInfo($merchant_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysDeleteAsyncWithHttpInfo
     *
     * Deletes the merchant&#39;s Hosted Page Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysDeleteAsyncWithHttpInfo($merchant_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysDeleteRequest($merchant_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2HpplusMerchantsByMerchantKeyKeysDelete'
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2HpplusMerchantsByMerchantKeyKeysDeleteRequest($merchant_key, $authorization)
    {
        // verify the required parameter 'merchant_key' is set
        if ($merchant_key === null || (is_array($merchant_key) && count($merchant_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_key when calling v2HpplusMerchantsByMerchantKeyKeysDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2HpplusMerchantsByMerchantKeyKeysDelete'
            );
        }

        $resourcePath = '/v2/hpplus/merchants/{merchant_key}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchant_key !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_key' . '}',
                ObjectSerializer::toPathValue($merchant_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysGet
     *
     * Fetches the merchant&#39;s Hosted Payment Plus API Key
     *
     * @param  string $merchant_key merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse
     */
    public function v2HpplusMerchantsByMerchantKeyKeysGet($merchant_key, $authorization)
    {
        list($response) = $this->v2HpplusMerchantsByMerchantKeyKeysGetWithHttpInfo($merchant_key, $authorization);
        return $response;
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysGetWithHttpInfo
     *
     * Fetches the merchant&#39;s Hosted Payment Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2HpplusMerchantsByMerchantKeyKeysGetWithHttpInfo($merchant_key, $authorization)
    {
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysGetRequest($merchant_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysGetAsync
     *
     * Fetches the merchant&#39;s Hosted Payment Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysGetAsync($merchant_key, $authorization)
    {
        return $this->v2HpplusMerchantsByMerchantKeyKeysGetAsyncWithHttpInfo($merchant_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysGetAsyncWithHttpInfo
     *
     * Fetches the merchant&#39;s Hosted Payment Plus API Key
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysGetAsyncWithHttpInfo($merchant_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysGetRequest($merchant_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2HpplusMerchantsByMerchantKeyKeysGet'
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2HpplusMerchantsByMerchantKeyKeysGetRequest($merchant_key, $authorization)
    {
        // verify the required parameter 'merchant_key' is set
        if ($merchant_key === null || (is_array($merchant_key) && count($merchant_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_key when calling v2HpplusMerchantsByMerchantKeyKeysGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2HpplusMerchantsByMerchantKeyKeysGet'
            );
        }

        $resourcePath = '/v2/hpplus/merchants/{merchant_key}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchant_key !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_key' . '}',
                ObjectSerializer::toPathValue($merchant_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysPost
     *
     * Creates a new Hosted Payment Plus API Key, if one does not already exist for the merchant
     *
     * @param  string $merchant_key merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse
     */
    public function v2HpplusMerchantsByMerchantKeyKeysPost($merchant_key, $authorization)
    {
        list($response) = $this->v2HpplusMerchantsByMerchantKeyKeysPostWithHttpInfo($merchant_key, $authorization);
        return $response;
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysPostWithHttpInfo
     *
     * Creates a new Hosted Payment Plus API Key, if one does not already exist for the merchant
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2HpplusMerchantsByMerchantKeyKeysPostWithHttpInfo($merchant_key, $authorization)
    {
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysPostRequest($merchant_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysPostAsync
     *
     * Creates a new Hosted Payment Plus API Key, if one does not already exist for the merchant
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysPostAsync($merchant_key, $authorization)
    {
        return $this->v2HpplusMerchantsByMerchantKeyKeysPostAsyncWithHttpInfo($merchant_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2HpplusMerchantsByMerchantKeyKeysPostAsyncWithHttpInfo
     *
     * Creates a new Hosted Payment Plus API Key, if one does not already exist for the merchant
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2HpplusMerchantsByMerchantKeyKeysPostAsyncWithHttpInfo($merchant_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\HPTokenGenerationResponse';
        $request = $this->v2HpplusMerchantsByMerchantKeyKeysPostRequest($merchant_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2HpplusMerchantsByMerchantKeyKeysPost'
     *
     * @param  string $merchant_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2HpplusMerchantsByMerchantKeyKeysPostRequest($merchant_key, $authorization)
    {
        // verify the required parameter 'merchant_key' is set
        if ($merchant_key === null || (is_array($merchant_key) && count($merchant_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_key when calling v2HpplusMerchantsByMerchantKeyKeysPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2HpplusMerchantsByMerchantKeyKeysPost'
            );
        }

        $resourcePath = '/v2/hpplus/merchants/{merchant_key}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchant_key !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_key' . '}',
                ObjectSerializer::toPathValue($merchant_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
