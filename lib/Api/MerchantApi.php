<?php
/**
 * MerchantApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PARAGON PAYMENT SOLUTIONS REST API
 *
 * <h2>Paragon Processing Platform</h2><p>This document is to provide a detailed description of how a developer or software solution provider can integrate with the Paragon Processing Platform (Paragon Platform).  <br>The Paragon Platform is for developers who wish to use Paragon's processing services within their software applications.  The Paragon Platform can stand alone as a web-based storefront with (or without) attached card readers or may be used in combination with point-of-sale (POS) and order entry applications.<br>The Paragon Platform accepts payments in many forms, including check, credit, debit, gift, loyalty and EBT cards. Payments may be taken online, over the telephone, from a mobile phone and at physical store locations. In addition to handling large volumes of payment transactions, the Paragon Platform manages and settles batches, protects sensitive card information, administers billing contracts and produces operational and analytical reports. </p><br><h2>Application Programming Interfaces (APIs)</h2><img src=\"../../Media/Images/Paragon_API_Communication.png\" alt=\"\" width=\"624\" height=\"242\"> <p>With our API, software systems and devices communicate with the Paragon Platform by exchanging messages.  <ol> <li>Client Application formulates a message and transmits the request to the Paragon Platform.</li> <li>The Paragon Platform translates the request and relays it to the Payment Processing Network.</li> <li>The Payment Processing Network processes the request and returns a response to the Paragon Platform.</li> <li>The Paragon Platform translates the response and relays it to the Client Application.</li></ol></p><br><h2>The Path to Integration </h2><img src=\"../../Media/Images/Paragon_Path_To_Integration.png\" alt=\"\" width=\"624\" height=\"258\"> <p><br><h3>Step 1: Open a Test Account </h3><p>Visit https://developer.paragonsolutions.com/testaccount to register for a free test account. Once registered you have instant access to your test account credentials and all the documentation you need to get started.  Head over to the library and make sure to check out all of our API's to learn about the Paragon Processing Platform transaction requests and responses.</p><br><h3>Step 2: Code & Certify</h3><p>Once in the Paragon Development portal, begin your certification or have an experienced Paragon integration specialist guide you through the testing process.  Once coding and testing are completed submit your request for certification.   Our team will then perform a detailed review of your integration to make sure your integration meets all your business requirements for success. </p><br><h3>Step 3: Go Live!</h3><p>After final review and testing your software solution is ready to begin taking live payments!  We know, an integration that is easy sounds too good to be true.  Don't take our word for it, start your integration today! </p><p><h3>Developer Notes</h3><ul><li>Install your development platform according to its product documentation.</li><li>Read through all the steps before you get started. We recommend reviewing the rest of this guide to familiarize yourself with the Paragon Processing Platform's terms, capabilities, web services and operations.</li></ul></p></p>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: isvsupport@paragonsolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DCarbone\ParagonSolutionsPHPSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DCarbone\ParagonSolutionsPHPSDK\ApiException;
use DCarbone\ParagonSolutionsPHPSDK\Configuration;
use DCarbone\ParagonSolutionsPHPSDK\HeaderSelector;
use DCarbone\ParagonSolutionsPHPSDK\ObjectSerializer;

/**
 * MerchantApi Class Doc Comment
 *
 * @category Class
 * @package  DCarbone\ParagonSolutionsPHPSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MerchantApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v2MerchantByMerchantkeyGet
     *
     * Retrieve Merchant details
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel
     */
    public function v2MerchantByMerchantkeyGet($merchantkey, $authorization)
    {
        list($response) = $this->v2MerchantByMerchantkeyGetWithHttpInfo($merchantkey, $authorization);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyGetWithHttpInfo
     *
     * Retrieve Merchant details
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyGetWithHttpInfo($merchantkey, $authorization)
    {
        $request = $this->v2MerchantByMerchantkeyGetRequest($merchantkey, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyGetAsync
     *
     * Retrieve Merchant details
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyGetAsync($merchantkey, $authorization)
    {
        return $this->v2MerchantByMerchantkeyGetAsyncWithHttpInfo($merchantkey, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyGetAsyncWithHttpInfo
     *
     * Retrieve Merchant details
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyGetAsyncWithHttpInfo($merchantkey, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetMerchantDetailsResponseModel';
        $request = $this->v2MerchantByMerchantkeyGetRequest($merchantkey, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyGet'
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyGetRequest($merchantkey, $authorization)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyGet'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPatch
     *
     * Update a merchant.
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantRequestModel $update_merchant update_merchant (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel
     */
    public function v2MerchantByMerchantkeyPatch($merchantkey, $authorization, $update_merchant)
    {
        list($response) = $this->v2MerchantByMerchantkeyPatchWithHttpInfo($merchantkey, $authorization, $update_merchant);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPatchWithHttpInfo
     *
     * Update a merchant.
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantRequestModel $update_merchant (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPatchWithHttpInfo($merchantkey, $authorization, $update_merchant)
    {
        $request = $this->v2MerchantByMerchantkeyPatchRequest($merchantkey, $authorization, $update_merchant);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPatchAsync
     *
     * Update a merchant.
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantRequestModel $update_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPatchAsync($merchantkey, $authorization, $update_merchant)
    {
        return $this->v2MerchantByMerchantkeyPatchAsyncWithHttpInfo($merchantkey, $authorization, $update_merchant)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPatchAsyncWithHttpInfo
     *
     * Update a merchant.
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantRequestModel $update_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPatchAsyncWithHttpInfo($merchantkey, $authorization, $update_merchant)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
        $request = $this->v2MerchantByMerchantkeyPatchRequest($merchantkey, $authorization, $update_merchant);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPatch'
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantRequestModel $update_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPatchRequest($merchantkey, $authorization, $update_merchant)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPatch'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPatch'
            );
        }
        // verify the required parameter 'update_merchant' is set
        if ($update_merchant === null || (is_array($update_merchant) && count($update_merchant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_merchant when calling v2MerchantByMerchantkeyPatch'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($update_merchant)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_merchant));
            } else {
                $httpBody = $update_merchant;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete
     *
     * Delete a merchant&#39;s payment method
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $payment_method_profile_key payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete($merchantkey, $payment_method_profile_key, $authorization)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteWithHttpInfo
     *
     * Delete a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteRequest($merchantkey, $payment_method_profile_key, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteAsync
     *
     * Delete a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteAsync($merchantkey, $payment_method_profile_key, $authorization)
    {
        return $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteAsyncWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteAsyncWithHttpInfo
     *
     * Delete a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteAsyncWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteRequest($merchantkey, $payment_method_profile_key, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete'
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDeleteRequest($merchantkey, $payment_method_profile_key, $authorization)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete'
            );
        }
        // verify the required parameter 'payment_method_profile_key' is set
        if ($payment_method_profile_key === null || (is_array($payment_method_profile_key) && count($payment_method_profile_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_profile_key when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyDelete'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentmethod/{payment_method_profile_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }
        // path params
        if ($payment_method_profile_key !== null) {
            $resourcePath = str_replace(
                '{' . 'payment_method_profile_key' . '}',
                ObjectSerializer::toPathValue($payment_method_profile_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch
     *
     * Update a merchant&#39;s payment method
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $payment_method_profile_key payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods payment_methods (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization, $payment_methods);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchWithHttpInfo
     *
     * Update a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchRequest($merchantkey, $payment_method_profile_key, $authorization, $payment_methods);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchAsync
     *
     * Update a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchAsync($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
    {
        return $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchAsyncWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchAsyncWithHttpInfo
     *
     * Update a merchant&#39;s payment method
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchAsyncWithHttpInfo($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchRequest($merchantkey, $payment_method_profile_key, $authorization, $payment_methods);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch'
     *
     * @param  string $merchantkey (required)
     * @param  string $payment_method_profile_key (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatchRequest($merchantkey, $payment_method_profile_key, $authorization, $payment_methods)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch'
            );
        }
        // verify the required parameter 'payment_method_profile_key' is set
        if ($payment_method_profile_key === null || (is_array($payment_method_profile_key) && count($payment_method_profile_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_profile_key when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch'
            );
        }
        // verify the required parameter 'payment_methods' is set
        if ($payment_methods === null || (is_array($payment_methods) && count($payment_methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_methods when calling v2MerchantByMerchantkeyPaymentmethodByPaymentMethodProfileKeyPatch'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentmethod/{payment_method_profile_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }
        // path params
        if ($payment_method_profile_key !== null) {
            $resourcePath = str_replace(
                '{' . 'payment_method_profile_key' . '}',
                ObjectSerializer::toPathValue($payment_method_profile_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($payment_methods)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payment_methods));
            } else {
                $httpBody = $payment_methods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodGet
     *
     * Get list of merchant&#39;s payment methods
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentmethodGet($merchantkey, $authorization)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentmethodGetWithHttpInfo($merchantkey, $authorization);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodGetWithHttpInfo
     *
     * Get list of merchant&#39;s payment methods
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentmethodGetWithHttpInfo($merchantkey, $authorization)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentmethodGetRequest($merchantkey, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodGetAsync
     *
     * Get list of merchant&#39;s payment methods
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodGetAsync($merchantkey, $authorization)
    {
        return $this->v2MerchantByMerchantkeyPaymentmethodGetAsyncWithHttpInfo($merchantkey, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodGetAsyncWithHttpInfo
     *
     * Get list of merchant&#39;s payment methods
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodGetAsyncWithHttpInfo($merchantkey, $authorization)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentMethodListResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentmethodGetRequest($merchantkey, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentmethodGet'
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentmethodGetRequest($merchantkey, $authorization)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentmethodGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentmethodGet'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentmethod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodPost
     *
     * Add a payment method to a merchant
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods payment_methods (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentmethodPost($merchantkey, $authorization, $payment_methods)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentmethodPostWithHttpInfo($merchantkey, $authorization, $payment_methods);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodPostWithHttpInfo
     *
     * Add a payment method to a merchant
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentmethodPostWithHttpInfo($merchantkey, $authorization, $payment_methods)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentmethodPostRequest($merchantkey, $authorization, $payment_methods);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodPostAsync
     *
     * Add a payment method to a merchant
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodPostAsync($merchantkey, $authorization, $payment_methods)
    {
        return $this->v2MerchantByMerchantkeyPaymentmethodPostAsyncWithHttpInfo($merchantkey, $authorization, $payment_methods)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentmethodPostAsyncWithHttpInfo
     *
     * Add a payment method to a merchant
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentmethodPostAsyncWithHttpInfo($merchantkey, $authorization, $payment_methods)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdateMerchantResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentmethodPostRequest($merchantkey, $authorization, $payment_methods);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentmethodPost'
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\PaymentMethodRequestModel $payment_methods (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentmethodPostRequest($merchantkey, $authorization, $payment_methods)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentmethodPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentmethodPost'
            );
        }
        // verify the required parameter 'payment_methods' is set
        if ($payment_methods === null || (is_array($payment_methods) && count($payment_methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_methods when calling v2MerchantByMerchantkeyPaymentmethodPost'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentmethod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($payment_methods)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payment_methods));
            } else {
                $httpBody = $payment_methods;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileDelete
     *
     * Delete a merchant&#39;s payment method from both active and inactive profiles
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id (Required) Supported Processor ID&#39;s are as follows: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH (optional)
     * @param  string $payment_type_id (Required) Supported Payment Type ID&#39;s are as follows: VISA, MASTERCARD. AMEX, DISCOVER, CARTBLANCH, JCB, JAL, DINERS, NOVUS, DEBIT, EBT, ECHECK (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentprofileDelete($merchantkey, $authorization, $processor_id = null, $payment_type_id = null)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentprofileDeleteWithHttpInfo($merchantkey, $authorization, $processor_id, $payment_type_id);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileDeleteWithHttpInfo
     *
     * Delete a merchant&#39;s payment method from both active and inactive profiles
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id (Required) Supported Processor ID&#39;s are as follows: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH (optional)
     * @param  string $payment_type_id (Required) Supported Payment Type ID&#39;s are as follows: VISA, MASTERCARD. AMEX, DISCOVER, CARTBLANCH, JCB, JAL, DINERS, NOVUS, DEBIT, EBT, ECHECK (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentprofileDeleteWithHttpInfo($merchantkey, $authorization, $processor_id = null, $payment_type_id = null)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentprofileDeleteRequest($merchantkey, $authorization, $processor_id, $payment_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileDeleteAsync
     *
     * Delete a merchant&#39;s payment method from both active and inactive profiles
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id (Required) Supported Processor ID&#39;s are as follows: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH (optional)
     * @param  string $payment_type_id (Required) Supported Payment Type ID&#39;s are as follows: VISA, MASTERCARD. AMEX, DISCOVER, CARTBLANCH, JCB, JAL, DINERS, NOVUS, DEBIT, EBT, ECHECK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofileDeleteAsync($merchantkey, $authorization, $processor_id = null, $payment_type_id = null)
    {
        return $this->v2MerchantByMerchantkeyPaymentprofileDeleteAsyncWithHttpInfo($merchantkey, $authorization, $processor_id, $payment_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileDeleteAsyncWithHttpInfo
     *
     * Delete a merchant&#39;s payment method from both active and inactive profiles
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id (Required) Supported Processor ID&#39;s are as follows: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH (optional)
     * @param  string $payment_type_id (Required) Supported Payment Type ID&#39;s are as follows: VISA, MASTERCARD. AMEX, DISCOVER, CARTBLANCH, JCB, JAL, DINERS, NOVUS, DEBIT, EBT, ECHECK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofileDeleteAsyncWithHttpInfo($merchantkey, $authorization, $processor_id = null, $payment_type_id = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\DeletePaymentProfileMethodResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentprofileDeleteRequest($merchantkey, $authorization, $processor_id, $payment_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentprofileDelete'
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id (Required) Supported Processor ID&#39;s are as follows: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH (optional)
     * @param  string $payment_type_id (Required) Supported Payment Type ID&#39;s are as follows: VISA, MASTERCARD. AMEX, DISCOVER, CARTBLANCH, JCB, JAL, DINERS, NOVUS, DEBIT, EBT, ECHECK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentprofileDeleteRequest($merchantkey, $authorization, $processor_id = null, $payment_type_id = null)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentprofileDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentprofileDelete'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentprofile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $processor_id,
            'processor_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_type_id,
            'payment_type_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileGet
     *
     * Get a merchant&#39;s complete Payment Profile
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id Supported Processor ID&#39;s are: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH.  If nothing specified, all processors returned (optional)
     * @param  string $profile_status Supported profile_status values are: active, inactive.  If nothing specified, active profile is returned (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentprofileGet($merchantkey, $authorization, $processor_id = null, $profile_status = null)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentprofileGetWithHttpInfo($merchantkey, $authorization, $processor_id, $profile_status);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileGetWithHttpInfo
     *
     * Get a merchant&#39;s complete Payment Profile
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id Supported Processor ID&#39;s are: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH.  If nothing specified, all processors returned (optional)
     * @param  string $profile_status Supported profile_status values are: active, inactive.  If nothing specified, active profile is returned (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentprofileGetWithHttpInfo($merchantkey, $authorization, $processor_id = null, $profile_status = null)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentprofileGetRequest($merchantkey, $authorization, $processor_id, $profile_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileGetAsync
     *
     * Get a merchant&#39;s complete Payment Profile
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id Supported Processor ID&#39;s are: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH.  If nothing specified, all processors returned (optional)
     * @param  string $profile_status Supported profile_status values are: active, inactive.  If nothing specified, active profile is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofileGetAsync($merchantkey, $authorization, $processor_id = null, $profile_status = null)
    {
        return $this->v2MerchantByMerchantkeyPaymentprofileGetAsyncWithHttpInfo($merchantkey, $authorization, $processor_id, $profile_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofileGetAsyncWithHttpInfo
     *
     * Get a merchant&#39;s complete Payment Profile
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id Supported Processor ID&#39;s are: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH.  If nothing specified, all processors returned (optional)
     * @param  string $profile_status Supported profile_status values are: active, inactive.  If nothing specified, active profile is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofileGetAsyncWithHttpInfo($merchantkey, $authorization, $processor_id = null, $profile_status = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\GetPaymentProfileResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentprofileGetRequest($merchantkey, $authorization, $processor_id, $profile_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentprofileGet'
     *
     * @param  string $merchantkey Gateway Merchant ID (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  string $processor_id Supported Processor ID&#39;s are: TSYS, TSYSVPN, TSYSPARAGN, FIRSTACH.  If nothing specified, all processors returned (optional)
     * @param  string $profile_status Supported profile_status values are: active, inactive.  If nothing specified, active profile is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentprofileGetRequest($merchantkey, $authorization, $processor_id = null, $profile_status = null)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentprofileGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentprofileGet'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentprofile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $processor_id,
            'processor_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_status,
            'profile_status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofilePut
     *
     * Update a merchant&#39;s payment profile,  This method allows you to send multiple payment methods at one time
     *
     * @param  string $merchantkey merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileRequestModel $payment_profile payment_profile (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel
     */
    public function v2MerchantByMerchantkeyPaymentprofilePut($merchantkey, $authorization, $payment_profile = null)
    {
        list($response) = $this->v2MerchantByMerchantkeyPaymentprofilePutWithHttpInfo($merchantkey, $authorization, $payment_profile);
        return $response;
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofilePutWithHttpInfo
     *
     * Update a merchant&#39;s payment profile,  This method allows you to send multiple payment methods at one time
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileRequestModel $payment_profile (optional)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantByMerchantkeyPaymentprofilePutWithHttpInfo($merchantkey, $authorization, $payment_profile = null)
    {
        $request = $this->v2MerchantByMerchantkeyPaymentprofilePutRequest($merchantkey, $authorization, $payment_profile);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofilePutAsync
     *
     * Update a merchant&#39;s payment profile,  This method allows you to send multiple payment methods at one time
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileRequestModel $payment_profile (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofilePutAsync($merchantkey, $authorization, $payment_profile = null)
    {
        return $this->v2MerchantByMerchantkeyPaymentprofilePutAsyncWithHttpInfo($merchantkey, $authorization, $payment_profile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantByMerchantkeyPaymentprofilePutAsyncWithHttpInfo
     *
     * Update a merchant&#39;s payment profile,  This method allows you to send multiple payment methods at one time
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileRequestModel $payment_profile (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantByMerchantkeyPaymentprofilePutAsyncWithHttpInfo($merchantkey, $authorization, $payment_profile = null)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileResponseModel';
        $request = $this->v2MerchantByMerchantkeyPaymentprofilePutRequest($merchantkey, $authorization, $payment_profile);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantByMerchantkeyPaymentprofilePut'
     *
     * @param  string $merchantkey (required)
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\UpdatePaymentProfileRequestModel $payment_profile (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantByMerchantkeyPaymentprofilePutRequest($merchantkey, $authorization, $payment_profile = null)
    {
        // verify the required parameter 'merchantkey' is set
        if ($merchantkey === null || (is_array($merchantkey) && count($merchantkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantkey when calling v2MerchantByMerchantkeyPaymentprofilePut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantByMerchantkeyPaymentprofilePut'
            );
        }

        $resourcePath = '/v2/merchant/{merchantkey}/paymentprofile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($merchantkey !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantkey' . '}',
                ObjectSerializer::toPathValue($merchantkey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($payment_profile)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payment_profile));
            } else {
                $httpBody = $payment_profile;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2MerchantPost
     *
     * Create a merchant.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantRequestModel $add_merchant add_merchant (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel
     */
    public function v2MerchantPost($authorization, $add_merchant)
    {
        list($response) = $this->v2MerchantPostWithHttpInfo($authorization, $add_merchant);
        return $response;
    }

    /**
     * Operation v2MerchantPostWithHttpInfo
     *
     * Create a merchant.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantRequestModel $add_merchant (required)
     *
     * @throws \DCarbone\ParagonSolutionsPHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2MerchantPostWithHttpInfo($authorization, $add_merchant)
    {
        $request = $this->v2MerchantPostRequest($authorization, $add_merchant);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2MerchantPostAsync
     *
     * Create a merchant.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantRequestModel $add_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantPostAsync($authorization, $add_merchant)
    {
        return $this->v2MerchantPostAsyncWithHttpInfo($authorization, $add_merchant)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2MerchantPostAsyncWithHttpInfo
     *
     * Create a merchant.
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantRequestModel $add_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2MerchantPostAsyncWithHttpInfo($authorization, $add_merchant)
    {
        $returnType = '\DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantResponseModel';
        $request = $this->v2MerchantPostRequest($authorization, $add_merchant);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2MerchantPost'
     *
     * @param  string $authorization JWT security token obtained from Identity Server. (required)
     * @param  \DCarbone\ParagonSolutionsPHPSDK\Model\AddMerchantRequestModel $add_merchant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2MerchantPostRequest($authorization, $add_merchant)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v2MerchantPost'
            );
        }
        // verify the required parameter 'add_merchant' is set
        if ($add_merchant === null || (is_array($add_merchant) && count($add_merchant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_merchant when calling v2MerchantPost'
            );
        }

        $resourcePath = '/v2/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($add_merchant)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_merchant));
            } else {
                $httpBody = $add_merchant;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
